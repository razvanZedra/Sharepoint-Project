{"version":3,"sources":["common/utilities/GeneralHelper.ts"],"names":[],"mappings":"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","file":"common/utilities/GeneralHelper.js","sourcesContent":["import { IContext } from '../Interfaces';\nimport { SPHelper } from './SPHelper';\nimport '../extensions/String.extensions';\n\nimport * as _ from '@microsoft/sp-lodash-subset';\n\nimport * as strings from 'ControlStrings';\n\n/**\n * Helper with general methods to simplify some routines\n */\nexport class GeneralHelper {\n    /**\n     * Trims slash at the end of URL if needed\n     * @param url URL\n     */\n    public static trimSlash(url: string): string {\n        if (url.lastIndexOf('/') === url.length - 1)\n            return url.slice(0, -1);\n        return url;\n    }\n\n    /**\n     * Encodes text\n     * @param text text to encode\n     */\n    public static encodeText(text: string): string {\n        const n = /[<>&'\"\\\\]/g;\n        return text ? text.replace(n, this._getEncodedChar) : '';\n    }\n\n    /**\n     * Copy of Microsoft's GetRelativeDateTimeString from SP.dateTimeUtil\n     */\n    public static getRelativeDateTimeString(format: string): string {\n        const formatParts: string[] = format.split('|');\n        let result: string = null;\n        let placeholdersString: string = null;\n\n        if (formatParts[0] == '0')\n            return format.substring(2);\n        const isFuture: boolean = formatParts[1] === '1';\n        const formatType: string = formatParts[2];\n        const timeString: string = formatParts.length >= 4 ? formatParts[3] : null;\n        const dayString: string = formatParts.length >= 5 ? formatParts[4] : null;\n\n        switch (formatType) {\n            case '1':\n                result = isFuture ? strings.DateTime['L_RelativeDateTime_AFewSecondsFuture'] : strings.DateTime['L_RelativeDateTime_AFewSeconds'];\n                break;\n            case '2':\n                result = isFuture ? strings.DateTime['L_RelativeDateTime_AboutAMinuteFuture'] : strings.DateTime['L_RelativeDateTime_AboutAMinute'];\n                break;\n            case '3':\n                placeholdersString = this.getLocalizedCountValue(isFuture ? strings.DateTime['L_RelativeDateTime_XMinutesFuture'] : strings.DateTime['L_RelativeDateTime_XMinutes'], isFuture ? strings.DateTime['L_RelativeDateTime_XMinutesFutureIntervals'] : strings.DateTime['L_RelativeDateTime_XMinutesIntervals'], Number(timeString));\n                break;\n            case '4':\n                result = isFuture ? strings.DateTime['L_RelativeDateTime_AboutAnHourFuture'] : strings.DateTime['L_RelativeDateTime_AboutAnHour'];\n                break;\n            case '5':\n                if (timeString == null) {\n                    result = isFuture ? strings.DateTime['L_RelativeDateTime_Tomorrow'] : strings.DateTime['L_RelativeDateTime_Yesterday'];\n                }\n                else {\n                    placeholdersString = isFuture ? strings.DateTime['L_RelativeDateTime_TomorrowAndTime'] : strings.DateTime['L_RelativeDateTime_YesterdayAndTime'];\n                }\n                break;\n            case '6':\n                placeholdersString = this.getLocalizedCountValue(\n                    isFuture ? strings.DateTime['L_RelativeDateTime_XHoursFuture'] : strings.DateTime['L_RelativeDateTime_XHours'],\n                    isFuture ? strings.DateTime['L_RelativeDateTime_XHoursFutureIntervals'] : strings.DateTime['L_RelativeDateTime_XHoursIntervals'],\n                    Number(timeString));\n                break;\n            case '7':\n                if (dayString == null) {\n                    result = timeString;\n                }\n                else {\n                    placeholdersString = strings.DateTime['L_RelativeDateTime_DayAndTime'];\n                }\n                break;\n            case '8':\n                placeholdersString = this.getLocalizedCountValue(\n                    isFuture ? strings.DateTime['L_RelativeDateTime_XDaysFuture'] : strings.DateTime['L_RelativeDateTime_XDays'],\n                    isFuture ? strings.DateTime['L_RelativeDateTime_XDaysFutureIntervals'] : strings.DateTime['L_RelativeDateTime_XDaysIntervals'],\n                    Number(timeString));\n                break;\n            case '9':\n                result = strings.DateTime['L_RelativeDateTime_Today'];\n        }\n        if (placeholdersString != null) {\n            result = placeholdersString.replace(\"{0}\", timeString);\n            if (dayString != null) {\n                result = result.replace(\"{1}\", dayString);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Copy of Microsoft's GetLocalizedCountValue from SP.dateTimeUtil.\n     * I've tried to rename all the vars to have meaningful names... but some were too unclear\n     */\n    public static getLocalizedCountValue(format: string, first: string, second: number): string {\n        if (format == undefined || first == undefined || second == undefined)\n            return null;\n        let result: string = '';\n        let a = -1;\n        let firstOperandOptions: string[] = first.split('||');\n\n        for (let firstOperandOptionsIdx = 0, firstOperandOptionsLen = firstOperandOptions.length; firstOperandOptionsIdx < firstOperandOptionsLen; firstOperandOptionsIdx++) {\n            const firstOperandOption: string = firstOperandOptions[firstOperandOptionsIdx];\n\n            if (firstOperandOption == null || firstOperandOption === '')\n                continue;\n            let optionParts: string[] = firstOperandOption.split(',');\n\n            for (var optionPartsIdx = 0, optionPartsLen = optionParts.length; optionPartsIdx < optionPartsLen; optionPartsIdx++) {\n                const optionPart: string = optionParts[optionPartsIdx];\n\n                if (optionPart == null || optionPart === '')\n                    continue;\n                if (isNaN(optionPart.parseNumberInvariant())) {\n                    const dashParts: string[] = optionPart.split('-');\n\n                    if (dashParts == null || dashParts.length !== 2)\n                        continue;\n                    var j, n;\n\n                    if (dashParts[0] === '')\n                        j = 0;\n                    else if (isNaN(dashParts[0].parseNumberInvariant()))\n                        continue;\n                    else\n                        j = parseInt(dashParts[0]);\n                    if (second >= j) {\n                        if (dashParts[1] === '') {\n                            a = firstOperandOptionsIdx;\n                            break;\n                        }\n                        else if (isNaN(dashParts[1].parseNumberInvariant()))\n                            continue;\n                        else\n                            n = parseInt(dashParts[1]);\n                        if (second <= n) {\n                            a = firstOperandOptionsIdx;\n                            break;\n                        }\n                    }\n                }\n                else {\n                    var p = parseInt(optionPart);\n\n                    if (second === p) {\n                        a = firstOperandOptionsIdx;\n                        break;\n                    }\n                }\n            }\n            if (a !== -1)\n                break;\n        }\n        if (a !== -1) {\n            var e = format.split('||');\n\n            if (e != null && e[a] != null && e[a] != '')\n                result = e[a];\n        }\n        return result;\n    }\n\n    /**\n     * Extracts text from HTML strings without creating HTML elements\n     * @param html HTML string\n     */\n    public static getTextFromHTML(html: string): string {\n        let result: string = html;\n        let oldResult: string = result;\n        const tagBody = '(?:[^\"\\'>]|\"[^\"]*\"|\\'[^\\']*\\')*';\n\n        const tagOrComment = new RegExp(\n            '<(?:'\n            // Comment body.\n            + '!--(?:(?:-*[^->])*--+|-?)'\n            // Special \"raw text\" elements whose content should be elided.\n            + '|script\\\\b' + tagBody + '>[\\\\s\\\\S]*?</script\\\\s*'\n            + '|style\\\\b' + tagBody + '>[\\\\s\\\\S]*?</style\\\\s*'\n            // Regular name\n            + '|/?[a-z]'\n            + tagBody\n            + ')>',\n            'gi');\n\n        do {\n            oldResult = result;\n            result = result.replace(tagOrComment, '');\n        } while (result !== result);\n\n        return result;\n    }\n\n    /**\n     * Checks if value is defined (not null and not undefined)\n     * @param value value\n     */\n    public static isDefined(value): boolean {\n        return value != null;\n    }\n\n    /**\n     * Creates Document element based on Xml string\n     * @param xmlString XML string to parse\n     */\n    public static parseXml(xmlString): Document {\n        const parser = new DOMParser();\n        const xml = parser.parseFromString(xmlString, 'text/xml');\n        return xml;\n    }\n\n    private static _getEncodedChar(c): string {\n        const o = {\n            \"<\": \"&lt;\",\n            \">\": \"&gt;\",\n            \"&\": \"&amp;\",\n            '\"': \"&quot;\",\n            \"'\": \"&#39;\",\n            \"\\\\\": \"&#92;\"\n        };\n        return o[c];\n    }\n}"],"sourceRoot":"../../../src"}
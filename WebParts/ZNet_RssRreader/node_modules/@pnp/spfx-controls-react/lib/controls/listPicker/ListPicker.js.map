{"version":3,"sources":["controls/listPicker/ListPicker.tsx"],"names":[],"mappings":"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","file":"controls/listPicker/ListPicker.js","sourcesContent":["import * as React from 'react';\nimport { IDropdownOption, IDropdownProps, Dropdown } from 'office-ui-fabric-react/lib/components/Dropdown';\nimport { Spinner, SpinnerSize } from 'office-ui-fabric-react/lib/components/Spinner';\nimport { IListPickerProps, IListPickerState } from './IListPicker';\nimport { ISPService } from '../../services/ISPService';\nimport { SPServiceFactory } from '../../services/SPServiceFactory';\nimport * as telemetry from '../../common/telemetry';\n\nimport styles from './ListPicker.module.scss';\n\n/**\n* Empty list value, to be checked for single list selection\n*/\nconst EMPTY_LIST_KEY = 'NO_LIST_SELECTED';\n\n/**\n* Renders the controls for the ListPicker component\n*/\nexport class ListPicker extends React.Component<IListPickerProps, IListPickerState> {\n  private _options: IDropdownOption[] = [];\n  private _selectedList: string | string[];\n\n  /**\n  * Constructor method\n  */\n  constructor(props: IListPickerProps) {\n    super(props);\n\n    telemetry.track('ReactListPicker');\n\n    this.state = {\n      options: this._options,\n      loading: false\n    };\n\n    this.onChanged = this.onChanged.bind(this);\n  }\n\n  /**\n  * Lifecycle hook when component is mounted\n  */\n  public componentDidMount() {\n    this.loadLists();\n  }\n\n  /**\n   * componentDidUpdate lifecycle hook\n   * @param prevProps\n   * @param prevState\n   */\n  public componentDidUpdate(prevProps: IListPickerProps, prevState: IListPickerState): void {\n    if (\n      prevProps.baseTemplate !== this.props.baseTemplate ||\n      prevProps.includeHidden !== this.props.includeHidden ||\n      prevProps.orderBy !== this.props.orderBy ||\n      prevProps.selectedList !== this.props.selectedList\n    ) {\n      this.loadLists();\n    }\n  }\n\n  /**\n  * Loads the list from SharePoint current web site\n  */\n  private loadLists() {\n    const { context, baseTemplate, includeHidden, orderBy, multiSelect, selectedList } = this.props;\n\n    // Show the loading indicator and disable the dropdown\n    this.setState({ loading: true });\n\n    const service: ISPService = SPServiceFactory.createService(context, true, 5000);\n    service.getLibs({\n      baseTemplate: baseTemplate,\n      includeHidden: includeHidden,\n      orderBy: orderBy\n    }).then((results) => {\n      // Start mapping the lists to the dropdown option\n      results.value.map(list => {\n        this._options.push({\n          key: list.Id,\n          text: list.Title\n        });\n      });\n\n      if (multiSelect !== true) {\n        // Add option to unselct list\n        this._options.unshift({\n          key: EMPTY_LIST_KEY,\n          text: ''\n        });\n      }\n\n      this._selectedList = this.props.selectedList;\n\n      // Hide the loading indicator and set the dropdown options and enable the dropdown\n      this.setState({\n        loading: false,\n        options: this._options,\n        selectedList: this._selectedList\n      });\n    });\n  }\n\n  /**\n  * Raises when a list has been selected\n  * @param option the new selection\n  * @param index the index of the selection\n  */\n  private onChanged(option: IDropdownOption, index?: number): void {\n    const { multiSelect, onSelectionChanged } = this.props;\n\n    if (multiSelect === true) {\n      if (!this._selectedList) {\n        this._selectedList = [] as string[];\n      }\n\n      const selectedLists: string[] = this._selectedList as string[];\n      // Check if option was selected\n      if (option.selected) {\n        selectedLists.push(option.key as string);\n      } else {\n        // Filter out the unselected list\n        this._selectedList = selectedLists.filter(list => list !== option.key);\n      }\n    } else {\n      this._selectedList = option.key as string;\n    }\n\n    if (onSelectionChanged) {\n      onSelectionChanged(this._selectedList);\n    }\n  }\n\n  /**\n  * Renders the ListPicker controls with Office UI Fabric\n  */\n  public render(): JSX.Element {\n    const { loading, options, selectedList } = this.state;\n    const { className, disabled, multiSelect, label, placeHolder } = this.props;\n\n    const dropdownOptions: IDropdownProps = {\n      className: className,\n      options: options,\n      disabled: ( loading || disabled ),\n      label: label,\n      placeHolder: placeHolder,\n      onChanged: this.onChanged\n    };\n\n    if (multiSelect === true) {\n      dropdownOptions.multiSelect = true;\n      dropdownOptions.selectedKeys = selectedList as string[];\n    } else {\n      dropdownOptions.selectedKey = selectedList as string;\n    }\n\n    return (\n      <div className={ styles.listPicker }>\n        { loading && <Spinner className={ styles.spinner } size={SpinnerSize.xSmall} /> }\n        <Dropdown {...dropdownOptions} />\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../src"}
{"version":3,"sources":["controls/webPartTitle/WebPartTitle.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA+B;AAC/B,wCAA0C;AAC1C,8DAAyD;AACzD,uEAAgD;AAChD,kDAAoD;AASpD;;GAEG;AACH;IAAkC,gCAAuC;IACvE;;OAEG;IACH,sBAAY,KAAyB;QAArC,YACE,kBAAM,KAAK,CAAC,SASb;QAPC,SAAS,CAAC,KAAK,CAAC,mBAAmB,EAAE;YACjC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK;YACpB,cAAc,EAAE,CAAC,CAAC,KAAK,CAAC,cAAc;YACtC,SAAS,EAAE,CAAC,CAAC,KAAK,CAAC,SAAS;SAC/B,CAAC,CAAC;QAEH,KAAI,CAAC,SAAS,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;IAC7C,CAAC;IAED;;OAEG;IACK,gCAAS,GAAjB,UAAkB,KAAK;QACrB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;IAED;;OAEG;IACI,6BAAM,GAAb;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,KAAK,6BAAW,CAAC,IAAI,CAAC,CAAC,CAAC;YACpE,MAAM,CAAC,CACL,6BAAK,SAAS,EAAK,kCAAM,CAAC,YAAY,UAAI,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,EAAE,CAAE;gBAExF,IAAI,CAAC,KAAK,CAAC,WAAW,KAAK,6BAAW,CAAC,IAAI,IAAI,kCAAU,WAAW,EAAE,OAAO,CAAC,uBAAuB,gBAAc,OAAO,CAAC,iBAAiB,EAAE,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,GAAa;gBAInN,IAAI,CAAC,KAAK,CAAC,WAAW,KAAK,6BAAW,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,8BAAM,IAAI,EAAC,SAAS,gBAAY,GAAG,IAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAQ,CAE9H,CACP,CAAC;QACJ,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IACH,mBAAC;AAAD,CA3CA,AA2CC,CA3CiC,KAAK,CAAC,SAAS,GA2ChD;AA3CY,oCAAY","file":"controls/webPartTitle/WebPartTitle.js","sourcesContent":["import * as React from 'react';\nimport * as strings from 'ControlStrings';\nimport { DisplayMode } from '@microsoft/sp-core-library';\nimport styles from './WebPartTitle.module.scss';\nimport * as telemetry from '../../common/telemetry';\n\nexport interface IWebPartTitleProps {\n  displayMode: DisplayMode;\n  title: string;\n  updateProperty: (value: string) => void;\n  className?: string;\n}\n\n/**\n * Web Part Title component\n */\nexport class WebPartTitle extends React.Component<IWebPartTitleProps, {}> {\n  /**\n   * Constructor\n   */\n  constructor(props: IWebPartTitleProps) {\n    super(props);\n\n    telemetry.track('ReactWebPartTitle', {\n        title: !!props.title,\n        updateProperty: !!props.updateProperty,\n        className: !!props.className\n    });\n\n    this._onChange = this._onChange.bind(this);\n  }\n\n  /**\n   * Process the text area change\n   */\n  private _onChange(event) {\n    this.props.updateProperty(event.target.value);\n  }\n\n  /**\n   * Default React component render method\n   */\n  public render(): React.ReactElement<IWebPartTitleProps> {\n    if (this.props.title || this.props.displayMode === DisplayMode.Edit) {\n      return (\n        <div className={`${styles.webPartTitle} ${this.props.className ? this.props.className : ''}` }>\n          {\n            this.props.displayMode === DisplayMode.Edit && <textarea placeholder={strings.WebPartTitlePlaceholder} aria-label={strings.WebPartTitleLabel} onChange={this._onChange} defaultValue={this.props.title}></textarea>\n          }\n\n          {\n            this.props.displayMode !== DisplayMode.Edit && this.props.title && <span role=\"heading\" aria-level=\"2\">{this.props.title}</span>\n          }\n        </div>\n      );\n    }\n\n    return null;\n  }\n}\n"],"sourceRoot":"../../../src"}
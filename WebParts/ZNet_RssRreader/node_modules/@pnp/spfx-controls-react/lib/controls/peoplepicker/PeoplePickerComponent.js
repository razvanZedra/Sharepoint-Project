"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var strings = require("ControlStrings");
var React = require("react");
var Tooltip_1 = require("office-ui-fabric-react/lib/Tooltip");
var PeoplePicker_1 = require("office-ui-fabric-react/lib/components/pickers/PeoplePicker/PeoplePicker");
var sp_http_1 = require("@microsoft/sp-http");
var PeoplePickerComponent_module_scss_1 = require("./PeoplePickerComponent.module.scss");
var telemetry = require("../../common/telemetry");
var Utilities_1 = require("office-ui-fabric-react/lib/Utilities");
var Label_1 = require("office-ui-fabric-react/lib/components/Label");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var BasePicker_types_1 = require("office-ui-fabric-react/lib/components/pickers/BasePicker.types");
var Icon_1 = require("office-ui-fabric-react/lib/components/Icon");
var sp_lodash_subset_1 = require("@microsoft/sp-lodash-subset");
/**
* PeoplePicker component
*/
var PeoplePicker = (function (_super) {
    __extends(PeoplePicker, _super);
    function PeoplePicker(props) {
        var _this = _super.call(this, props) || this;
        /**
         * On persona item changed event
         */
        _this._onPersonItemsChange = function (items) {
            var selectedItems = _this.props.selectedItems;
            _this.setState({
                selectedPersons: items,
                showmessageerror: items.length > 0 ? false : true
            });
            if (selectedItems) {
                selectedItems(items);
            }
        };
        /**
         * Validates the user input
         *
         * @param input
         */
        _this._validateInputPeople = function (input) {
            if (input.indexOf('@') !== -1) {
                return BasePicker_types_1.ValidationState.valid;
            }
            else if (input.length > 1) {
                return BasePicker_types_1.ValidationState.warning;
            }
            else {
                return BasePicker_types_1.ValidationState.invalid;
            }
        };
        /**
         * Returns the most recently used person
         *
         * @param currentPersonas
         */
        _this._returnMostRecentlyUsedPerson = function (currentPersonas) {
            var mostRecentlyUsedPersons = _this.state.mostRecentlyUsedPersons;
            return _this._removeDuplicates(mostRecentlyUsedPersons, currentPersonas);
        };
        /**
         * On filter changed event
         *
         * @param filterText
         * @param currentPersonas
         * @param limitResults
         */
        _this._onPersonFilterChanged = function (filterText, currentPersonas, limitResults) {
            if (filterText) {
                var filteredPersonas = _this._filterPersons(filterText);
                filteredPersonas = _this._removeDuplicates(filteredPersonas, currentPersonas);
                filteredPersonas = limitResults ? filteredPersonas.splice(0, limitResults) : filteredPersonas;
                return filteredPersonas;
            }
            else {
                return [];
            }
        };
        /**
         * Removes duplicates
         *
         * @param personas
         * @param possibleDupes
         */
        _this._removeDuplicates = function (personas, possibleDupes) {
            return personas.filter(function (persona) { return !_this._listContainsPersona(persona, possibleDupes); });
        };
        /**
         * Checks if list contains the person
         *
         * @param persona
         * @param personas
         */
        _this._listContainsPersona = function (persona, personas) {
            if (!personas || !personas.length || personas.length === 0) {
                return false;
            }
            return personas.filter(function (item) { return item.text === persona.text; }).length > 0;
        };
        /**
         * Filters Users based on email
         */
        _this.filterUsers = function (value, index, ar) {
            if (value.secondaryText.toLowerCase().indexOf(this.valToCompare.toLowerCase()) !== -1) {
                return value;
            }
        };
        telemetry.track('ReactPeoplePicker', {
            groupName: !!props.groupName,
            name: !!props.groupName,
            titleText: !!props.titleText
        });
        _this.state = {
            selectedPersons: [],
            mostRecentlyUsedPersons: [],
            currentSelectedPersons: [],
            allPersons: [],
            currentPicker: 0,
            peoplePartTitle: "",
            peoplePartTooltip: "",
            isLoading: false,
            showmessageerror: false
        };
        return _this;
    }
    /**
     * componentWillMount lifecycle hook
     */
    PeoplePicker.prototype.componentWillMount = function () {
        if (sp_core_library_1.Environment.type === sp_core_library_1.EnvironmentType.Local) {
            // local mode
            this._loadLocalWorkbenchUsers();
        }
        else {
            // online mode
            // Load the users
            this._thisLoadUsers();
        }
    };
    /**
     * componentDidUpdate lifecycle hook
     */
    PeoplePicker.prototype.componentDidUpdate = function (prevProps, prevState) {
        // If defaultSelectedUsers has changed then bind again
        if (!sp_lodash_subset_1.isEqual(this.props.defaultSelectedUsers, prevProps.defaultSelectedUsers) || !sp_lodash_subset_1.isEqual(this.state.allPersons, prevState.allPersons)) {
            // Check if we have results to get from, if not provide a empty array to filter on
            var userValuesArray = this.state.allPersons.length !== 0 ? this.state.allPersons : new Array();
            // Set Default selected persons
            var defaultUsers = [];
            var defaultPeopleList = [];
            if (this.props.defaultSelectedUsers) {
                defaultUsers = this.getDefaultUsers(userValuesArray, this.props.defaultSelectedUsers);
                for (var _i = 0, defaultUsers_1 = defaultUsers; _i < defaultUsers_1.length; _i++) {
                    var persona = defaultUsers_1[_i];
                    var selectedPeople = {};
                    Utilities_1.assign(selectedPeople, persona);
                    defaultPeopleList.push(selectedPeople);
                }
            }
            this.setState({
                selectedPersons: defaultPeopleList.length !== 0 ? defaultPeopleList : [],
                showmessageerror: this.props.isRequired && defaultPeopleList.length === 0
            });
        }
    };
    /**
     * Generate the user photo link
     *
     * @param value
     */
    PeoplePicker.prototype.generateUserPhotoLink = function (value) {
        return "https://outlook.office365.com/owa/service.svc/s/GetPersonaPhoto?email=" + value + "&UA=0&size=HR96x96";
    };
    /**
     * Retrieve the users for local demo and testing purposes
     */
    PeoplePicker.prototype._loadLocalWorkbenchUsers = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _fakeUsers, personaList, _i, _fakeUsers_1, persona, personaWithMenu;
            return __generator(this, function (_a) {
                _fakeUsers = new Array();
                _fakeUsers.push({
                    id: "10dfa208-d7d4-4aef-a7ea-f9e4bb1b85c1",
                    imageUrl: "",
                    imageInitials: "RF",
                    text: "Roger Federer",
                    secondaryText: "roger@tennis.onmicrosoft.com",
                    tertiaryText: "",
                    optionalText: ""
                });
                _fakeUsers.push({
                    id: "10dfa208-d7d4-4aef-a7ea-f9e4bb1b85c2",
                    imageUrl: "",
                    imageInitials: "RN",
                    text: "Rafael Nadal",
                    secondaryText: "rafael@tennis.onmicrosoft.com",
                    tertiaryText: "",
                    optionalText: ""
                });
                _fakeUsers.push({
                    id: "10dfa208-d7d4-4aef-a7ea-f9e4bb1b85c3",
                    imageUrl: "",
                    imageInitials: "ND",
                    text: "Novak Djokovic",
                    secondaryText: "novak@tennis.onmicrosoft.com",
                    tertiaryText: "",
                    optionalText: ""
                });
                _fakeUsers.push({
                    id: "10dfa208-d7d4-4aef-a7ea-f9e4bb1b85c4",
                    imageUrl: "",
                    imageInitials: "JP",
                    text: "Juan Martin del Potro",
                    secondaryText: "juanmartin@tennis.onmicrosoft.com",
                    tertiaryText: "",
                    optionalText: ""
                });
                personaList = [];
                for (_i = 0, _fakeUsers_1 = _fakeUsers; _i < _fakeUsers_1.length; _i++) {
                    persona = _fakeUsers_1[_i];
                    personaWithMenu = {};
                    Utilities_1.assign(personaWithMenu, persona);
                    personaList.push(personaWithMenu);
                }
                // update the current state
                this.setState({
                    allPersons: _fakeUsers,
                    peoplePersonaMenu: personaList,
                    mostRecentlyUsedPersons: personaList.slice(0, 5),
                    showmessageerror: this.props.isRequired && this.state.selectedPersons.length === 0
                });
                return [2 /*return*/];
            });
        });
    };
    /**
     * Retrieve the users
     */
    PeoplePicker.prototype._thisLoadUsers = function () {
        return __awaiter(this, void 0, void 0, function () {
            var stringVal, filterVal, webAbsoluteUrl, restApi, data, items, userValuesArray, i, item, personaList, _i, userValuesArray_1, persona, personaWithMenu, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        stringVal = "";
                        if (this.props.groupName) {
                            stringVal = "/_api/web/sitegroups/GetByName('" + this.props.groupName + "')/users";
                        }
                        else {
                            stringVal = "/_api/web/siteusers";
                        }
                        filterVal = "";
                        if (this.props.principleTypes) {
                            filterVal = "?$filter=" + this.props.principleTypes.map(function (principalType) { return "(PrincipalType eq " + principalType + ")"; }).join(" or ");
                        }
                        // filter for showHiddenInUI
                        if (this.props.showHiddenInUI) {
                            filterVal = filterVal ? filterVal + " and (IsHiddenInUI eq " + this.props.showHiddenInUI + ")" : "?$filter=IsHiddenInUI eq " + this.props.showHiddenInUI;
                        }
                        webAbsoluteUrl = this.props.webAbsoluteUrl || this.props.context.pageContext.web.absoluteUrl;
                        restApi = "" + webAbsoluteUrl + stringVal + filterVal;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        return [4 /*yield*/, this.props.context.spHttpClient.get(restApi, sp_http_1.SPHttpClient.configurations.v1, {
                                headers: {
                                    'Accept': 'application/json;odata.metadata=none'
                                }
                            })];
                    case 2:
                        data = _a.sent();
                        if (!data.ok) return [3 /*break*/, 4];
                        return [4 /*yield*/, data.json()];
                    case 3:
                        items = _a.sent();
                        // Check if items were retrieved
                        if (items && items.value && items.value.length > 0) {
                            userValuesArray = new Array();
                            // Loop over all the retrieved items
                            for (i = 0; i < items.value.length; i++) {
                                item = items.value[i];
                                if (!item.IsHiddenInUI || (this.props.showHiddenInUI && item.IsHiddenInUI)) {
                                    // Check if the the type must be returned
                                    if (!this.props.principleTypes || this.props.principleTypes.indexOf(item.PrincipalType) !== -1) {
                                        userValuesArray.push({
                                            id: item.Id.toString(),
                                            imageUrl: this.generateUserPhotoLink(item.Email),
                                            imageInitials: "",
                                            text: item.Title,
                                            secondaryText: item.Email,
                                            tertiaryText: "",
                                            optionalText: "" // anything
                                        });
                                    }
                                }
                            }
                            personaList = [];
                            for (_i = 0, userValuesArray_1 = userValuesArray; _i < userValuesArray_1.length; _i++) {
                                persona = userValuesArray_1[_i];
                                personaWithMenu = {};
                                Utilities_1.assign(personaWithMenu, persona);
                                personaList.push(personaWithMenu);
                            }
                            // Update the current state
                            this.setState({
                                allPersons: userValuesArray,
                                peoplePersonaMenu: personaList,
                                mostRecentlyUsedPersons: personaList.slice(0, 5)
                            });
                        }
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        e_1 = _a.sent();
                        console.error("Error occured while fetching the users and setting selected users.");
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Filter persons based on Name and Email (starting with and contains)
     *
     * @param filterText
     */
    PeoplePicker.prototype._filterPersons = function (filterText) {
        var _this = this;
        return this.state.peoplePersonaMenu.filter(function (item) {
            return _this._doesTextStartWith(item.text, filterText)
                || _this._doesTextContains(item.text, filterText)
                || _this._doesTextStartWith(item.secondaryText, filterText)
                || _this._doesTextContains(item.secondaryText, filterText);
        });
    };
    /**
     * Checks if text starts with
     *
     * @param text
     * @param filterText
     */
    PeoplePicker.prototype._doesTextStartWith = function (text, filterText) {
        return text && text.toLowerCase().indexOf(filterText.toLowerCase()) === 0;
    };
    /**
   * Checks if text contains
   *
   * @param text
   * @param filterText
   */
    PeoplePicker.prototype._doesTextContains = function (text, filterText) {
        return text && text.toLowerCase().indexOf(filterText.toLowerCase()) > 0;
    };
    /**
     * Gets the default users based on the provided email address.
     * Adds emails that are not found with a random generated User Id
     *
     * @param userValuesArray
     * @param selectedUsers
     */
    PeoplePicker.prototype.getDefaultUsers = function (userValuesArray, selectedUsers) {
        var defaultuserValuesArray = [];
        for (var i = 0; i < selectedUsers.length; i++) {
            var obj = { valToCompare: selectedUsers[i] };
            var length_1 = defaultuserValuesArray.length;
            defaultuserValuesArray = defaultuserValuesArray.length !== 0 ? defaultuserValuesArray.concat(userValuesArray.filter(this.filterUsers, obj)) : userValuesArray.filter(this.filterUsers, obj);
            if (length_1 === defaultuserValuesArray.length) {
                var defaultUnknownUser = [{
                        id: 1000 + i,
                        imageUrl: "",
                        imageInitials: "",
                        text: selectedUsers[i],
                        secondaryText: selectedUsers[i],
                        tertiaryText: "",
                        optionalText: "" //stgring
                    }];
                defaultuserValuesArray = defaultuserValuesArray.length !== 0 ? defaultuserValuesArray.concat(defaultUnknownUser) : defaultUnknownUser;
            }
        }
        return defaultuserValuesArray;
    };
    /**
     * Default React component render method
     */
    PeoplePicker.prototype.render = function () {
        var suggestionProps = {
            suggestionsHeaderText: strings.peoplePickerSuggestionsHeaderText,
            noResultsFoundText: strings.genericNoResultsFoundText,
            loadingText: strings.peoplePickerLoadingText,
            resultsMaximumNumber: this.props.suggestionsLimit ? this.props.suggestionsLimit : 5
        };
        var peoplepicker = (React.createElement("div", { id: "people", className: PeoplePickerComponent_module_scss_1.default.defaultClass + " " + (this.props.peoplePickerWPclassName ? this.props.peoplePickerWPclassName : '') },
            React.createElement(Label_1.Label, null, this.props.titleText || strings.peoplePickerComponentTitleText),
            React.createElement(PeoplePicker_1.NormalPeoplePicker, { pickerSuggestionsProps: suggestionProps, onResolveSuggestions: this._onPersonFilterChanged, onEmptyInputFocus: this._returnMostRecentlyUsedPerson, getTextFromItem: function (peoplePersonaMenu) { return peoplePersonaMenu.text; }, className: "'ms-PeoplePicker' " + (this.props.peoplePickerCntrlclassName ? this.props.peoplePickerCntrlclassName : ''), key: 'normal', onValidateInput: this._validateInputPeople, removeButtonAriaLabel: 'Remove', inputProps: {
                    'aria-label': 'People Picker'
                }, selectedItems: this.state.selectedPersons, itemLimit: this.props.personSelectionLimit || 1, disabled: this.props.disabled, onChange: this._onPersonItemsChange })));
        return (React.createElement("div", null,
            this.props.showtooltip ? (React.createElement(Tooltip_1.TooltipHost, { content: this.props.tooltipMessage || strings.peoplePickerComponentTooltipMessage, id: 'pntp', calloutProps: { gapSpace: 0 }, directionalHint: this.props.tooltipDirectional || 8 /* leftTopEdge */ }, peoplepicker)) : (React.createElement("div", null, peoplepicker)),
            (this.props.isRequired && this.state.showmessageerror) && (React.createElement("p", { className: "ms-TextField-errorMessage " + PeoplePickerComponent_module_scss_1.default.errorMessage + " " + (this.props.errorMessageClassName ? this.props.errorMessageClassName : '') },
                React.createElement(Icon_1.Icon, { iconName: 'Error', className: PeoplePickerComponent_module_scss_1.default.errorIcon }),
                React.createElement("span", { "data-automation-id": "error-message" }, this.props.errorMessage ? this.props.errorMessage : strings.peoplePickerComponentErrorMessage)))));
    };
    return PeoplePicker;
}(React.Component));
exports.PeoplePicker = PeoplePicker;

//# sourceMappingURL=PeoplePickerComponent.js.map

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var DetailsList_1 = require("office-ui-fabric-react/lib/DetailsList");
var IListView_1 = require("./IListView");
var sp_lodash_subset_1 = require("@microsoft/sp-lodash-subset");
var index_1 = require("../fileTypeIcon/index");
var strings = require("ControlStrings");
var telemetry = require("../../common/telemetry");
/**
 * File type icon component
 */
var ListView = (function (_super) {
    __extends(ListView, _super);
    function ListView(props) {
        var _this = _super.call(this, props) || this;
        telemetry.track('ReactListView', {
            viewFields: !!props.viewFields,
            groupByFields: !!props.groupByFields,
            selectionMode: !!props.selectionMode,
            selection: !!props.selection,
            defaultSelection: !!props.defaultSelection
        });
        // Initialize state
        _this.state = {
            items: []
        };
        // Binding the functions
        _this._columnClick = _this._columnClick.bind(_this);
        if (typeof _this.props.selection !== 'undefined' && _this.props.selection !== null) {
            // Initialize the selection
            _this._selection = new DetailsList_1.Selection({
                // Create the event handler when a selection changes
                onSelectionChanged: function () { return _this.props.selection(_this._selection.getSelection()); }
            });
        }
        return _this;
    }
    /**
     * Lifecycle hook when component is mounted
     */
    ListView.prototype.componentDidMount = function () {
        this._processProperties();
    };
    /**
     * Lifecycle hook when component did update after state or property changes
     * @param prevProps
     * @param prevState
     */
    ListView.prototype.componentDidUpdate = function (prevProps, prevState) {
        // select default items
        this._setSelectedItems();
        if (!sp_lodash_subset_1.isEqual(prevProps, this.props)) {
            // Reset the selected items
            if (this._selection) {
                this._selection.setItems(this.props.items, true);
            }
            // Process list view properties
            this._processProperties();
        }
    };
    /**
     * Select all the items that should be selected by default
     */
    ListView.prototype._setSelectedItems = function () {
        if (this.props.items &&
            this.props.items.length > 0 &&
            this.props.defaultSelection &&
            this.props.defaultSelection.length > 0) {
            for (var _i = 0, _a = this.props.defaultSelection; _i < _a.length; _i++) {
                var index = _a[_i];
                if (index > -1) {
                    this._selection.setIndexSelected(index, true, false);
                }
            }
        }
    };
    /**
     * Specify result grouping for the list rendering
     * @param items
     * @param groupByFields
     */
    ListView.prototype._getGroups = function (items, groupByFields, level, startIndex) {
        if (level === void 0) { level = 0; }
        if (startIndex === void 0) { startIndex = 0; }
        // Group array which stores the configured grouping
        var groups = [];
        var updatedItemsOrder = [];
        // Check if there are groupby fields set
        if (groupByFields) {
            var groupField_1 = groupByFields[level];
            // Check if grouping is configured
            if (groupByFields && groupByFields.length > 0) {
                // Create grouped items object
                var groupedItems_1 = {};
                items.forEach(function (item) {
                    var groupName = item[groupField_1.name];
                    // Check if the group name exists
                    if (typeof groupName === "undefined") {
                        // Set the default empty label for the field
                        groupName = strings.ListViewGroupEmptyLabel;
                    }
                    // Check if group name is a number, this can cause sorting issues
                    if (typeof groupName === "number") {
                        groupName = groupName + ".";
                    }
                    // Check if current group already exists
                    if (typeof groupedItems_1[groupName] === "undefined") {
                        // Create a new group of items
                        groupedItems_1[groupName] = [];
                    }
                    groupedItems_1[groupName].push(item);
                });
                // Sort the grouped items object by its key
                var sortedGroups_1 = {};
                var groupNames = Object.keys(groupedItems_1);
                groupNames = groupField_1.order === IListView_1.GroupOrder.ascending ? groupNames.sort() : groupNames.sort().reverse();
                groupNames.forEach(function (key) {
                    sortedGroups_1[key] = groupedItems_1[key];
                });
                // Loop over all the groups
                for (var groupItems in sortedGroups_1) {
                    // Retrieve the total number of items per group
                    var totalItems = groupedItems_1[groupItems].length;
                    // Create the new group
                    var group = {
                        name: groupItems === "undefined" ? strings.ListViewGroupEmptyLabel : groupItems,
                        key: groupItems === "undefined" ? strings.ListViewGroupEmptyLabel : groupItems,
                        startIndex: startIndex,
                        count: totalItems,
                    };
                    // Check if child grouping available
                    if (groupByFields[level + 1]) {
                        // Get the child groups
                        var subGroup = this._getGroups(groupedItems_1[groupItems], groupByFields, (level + 1), startIndex);
                        subGroup.items.forEach(function (item) {
                            updatedItemsOrder.push(item);
                        });
                        group.children = subGroup.groups;
                    }
                    else {
                        // Add the items to the updated items order array
                        groupedItems_1[groupItems].forEach(function (item) {
                            updatedItemsOrder.push(item);
                        });
                    }
                    // Increase the start index for the next group
                    startIndex = startIndex + totalItems;
                    groups.push(group);
                }
            }
        }
        return {
            items: updatedItemsOrder,
            groups: groups
        };
    };
    /**
     * Process all the component properties
     */
    ListView.prototype._processProperties = function () {
        var tempState = sp_lodash_subset_1.cloneDeep(this.state);
        var columns = null;
        // Check if a set of items was provided
        if (typeof this.props.items !== 'undefined' && this.props.items !== null) {
            tempState.items = this._flattenItems(this.props.items);
        }
        // Check if an icon needs to be shown
        if (typeof this.props.iconFieldName !== 'undefined' && this.props.iconFieldName !== null) {
            if (columns === null) {
                columns = [];
            }
            var iconColumn = this._createIconColumn(this.props.iconFieldName);
            columns.push(iconColumn);
        }
        // Check if view fields were provided
        if (typeof this.props.viewFields !== 'undefined' && this.props.viewFields !== null) {
            if (columns === null) {
                columns = [];
            }
            columns = this._createColumns(this.props.viewFields, columns);
        }
        // Add the columns to the temporary state
        tempState.columns = columns;
        // Add grouping to the list view
        var grouping = this._getGroups(tempState.items, this.props.groupByFields);
        if (grouping.groups.length > 0) {
            tempState.groups = grouping.groups;
            // Update the items
            tempState.items = grouping.items;
        }
        else {
            tempState.groups = null;
        }
        // Update the current component state with the new values
        this.setState(tempState);
    };
    /**
     * Flatten all objects in every item
     * @param items
     */
    ListView.prototype._flattenItems = function (items) {
        var _this = this;
        // Flatten items
        var flattenItems = items.map(function (item) {
            // Flatten all objects in the item
            return _this._flattenItem(item);
        });
        return flattenItems;
    };
    /**
     * Flatten all object in the item
     * @param item
     */
    ListView.prototype._flattenItem = function (item) {
        var flatItem = {};
        for (var parentPropName in item) {
            // Check if property already exists
            if (!item.hasOwnProperty(parentPropName))
                continue;
            // Check if the property is of type object
            if ((typeof item[parentPropName]) === 'object') {
                // Flatten every object
                var flatObject = this._flattenItem(item[parentPropName]);
                for (var childPropName in flatObject) {
                    if (!flatObject.hasOwnProperty(childPropName))
                        continue;
                    flatItem[parentPropName + "." + childPropName] = flatObject[childPropName];
                }
            }
            else {
                flatItem[parentPropName] = item[parentPropName];
            }
        }
        return flatItem;
    };
    /**
     * Create an icon column rendering
     * @param iconField
     */
    ListView.prototype._createIconColumn = function (iconFieldName) {
        return {
            key: 'fileType',
            name: 'File Type',
            iconName: 'Page',
            isIconOnly: true,
            fieldName: 'fileType',
            minWidth: 16,
            maxWidth: 16,
            onRender: function (item) {
                return (React.createElement(index_1.FileTypeIcon, { type: index_1.IconType.image, path: item[iconFieldName] }));
            }
        };
    };
    /**
     * Returns required set of columns for the list view
     * @param viewFields
     */
    ListView.prototype._createColumns = function (viewFields, crntColumns) {
        var _this = this;
        viewFields.forEach(function (field) {
            crntColumns.push({
                key: field.name,
                name: field.displayName || field.name,
                fieldName: field.name,
                minWidth: field.minWidth || 50,
                maxWidth: field.maxWidth,
                isResizable: field.isResizable,
                onRender: _this._fieldRender(field),
                onColumnClick: _this._columnClick
            });
        });
        return crntColumns;
    };
    /**
     * Check how field needs to be rendered
     * @param field
     */
    ListView.prototype._fieldRender = function (field) {
        // Check if a render function is specified
        if (field.render) {
            return field.render;
        }
        // Check if the URL property is specified
        if (field.linkPropertyName) {
            return function (item, index, column) {
                return React.createElement("a", { href: item[field.linkPropertyName] }, item[column.fieldName]);
            };
        }
    };
    /**
     * Check if sorting needs to be set to the column
     * @param ev
     * @param column
     */
    ListView.prototype._columnClick = function (ev, column) {
        // Find the field in the viewFields list
        var columnIdx = sp_lodash_subset_1.findIndex(this.props.viewFields, function (field) { return field.name === column.key; });
        // Check if the field has been found
        if (columnIdx !== -1) {
            var field = this.props.viewFields[columnIdx];
            // Check if the field needs to be sorted
            if (sp_lodash_subset_1.has(field, 'sorting')) {
                // Check if the sorting option is true
                if (field.sorting) {
                    var sortDescending_1 = typeof column.isSortedDescending === 'undefined' ? false : !column.isSortedDescending;
                    var sortedItems = this._sortItems(this.state.items, column.key, sortDescending_1);
                    // Update the columns
                    var sortedColumns = this.state.columns.map(function (c) {
                        if (c.key === column.key) {
                            c.isSortedDescending = sortDescending_1;
                            c.isSorted = true;
                        }
                        else {
                            c.isSorted = false;
                            c.isSortedDescending = false;
                        }
                        return c;
                    });
                    // Update the grouping
                    var groupedItems = this._getGroups(sortedItems, this.props.groupByFields);
                    // Update the items and columns
                    this.setState({
                        items: groupedItems.groups.length > 0 ? groupedItems.items : sortedItems,
                        columns: sortedColumns,
                        groups: groupedItems.groups.length > 0 ? groupedItems.groups : null,
                    });
                }
            }
        }
    };
    /**
     * Sort the list of items by the clicked column
     * @param items
     * @param columnName
     * @param descending
     */
    ListView.prototype._sortItems = function (items, columnName, descending) {
        var _this = this;
        if (descending === void 0) { descending = false; }
        // Sort the items
        var ascItems = sp_lodash_subset_1.sortBy(items, [columnName]);
        var sortedItems = descending ? ascItems.reverse() : ascItems;
        // Check if selection needs to be updated
        if (this._selection) {
            var selection_1 = this._selection.getSelection();
            if (selection_1 && selection_1.length > 0) {
                // Clear selection
                this._selection.setItems([], true);
                setTimeout(function () {
                    // Find new index
                    var idxs = selection_1.map(function (item) { return sp_lodash_subset_1.findIndex(sortedItems, item); });
                    idxs.forEach(function (idx) { return _this._selection.setIndexSelected(idx, true, false); });
                }, 0);
            }
        }
        // Return the sorted items list
        return sortedItems;
    };
    /**
     * Default React component render method
     */
    ListView.prototype.render = function () {
        var groupProps = {};
        // Check if selection mode is single selection,
        // if that is the case, disable the selection on grouping headers
        if (this.props.selectionMode === DetailsList_1.SelectionMode.single) {
            groupProps = {
                headerProps: {
                    onToggleSelectGroup: function () { return null; },
                    onGroupHeaderClick: function () { return null; },
                }
            };
        }
        return (React.createElement("div", null,
            React.createElement(DetailsList_1.DetailsList, { items: this.state.items, columns: this.state.columns, groups: this.state.groups, selectionMode: this.props.selectionMode || DetailsList_1.SelectionMode.none, selection: this._selection, layoutMode: DetailsList_1.DetailsListLayoutMode.justified, compact: this.props.compact, setKey: "ListViewControl", groupProps: groupProps })));
    };
    return ListView;
}(React.Component));
exports.ListView = ListView;

//# sourceMappingURL=ListView.js.map

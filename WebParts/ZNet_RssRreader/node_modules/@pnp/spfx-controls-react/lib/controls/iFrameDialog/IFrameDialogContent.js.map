{"version":3,"sources":["controls/iFrameDialog/IFrameDialogContent.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA+B;AAC/B,qFAAuD;AACvD,8DAA0E;AAc1E;;GAEG;AACH;IAAyC,uCAAqE;IAG1G,6BAAY,KAAgC;QAA5C,YACI,kBAAM,KAAK,CAAC,SAKf;QAHG,KAAI,CAAC,KAAK,GAAG;YACT,gBAAgB,EAAE,KAAK;SAC1B,CAAC;;IACN,CAAC;IAEM,oCAAM,GAAb;QAAA,iBAQC;QAPG,MAAM,CAAC,CAAC,6BAAK,SAAS,EAAE,yCAAM,CAAC,YAAY;YACvC,gCAAQ,GAAG,EAAE,UAAC,MAAM,IAAO,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,SAAS,GAAG,QAAQ,EAAE,GAAI;YACvP,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB;gBACzB,6BAAK,SAAS,EAAE,yCAAM,CAAC,gBAAgB;oBACnC,oBAAC,iBAAO,IAAC,IAAI,EAAE,qBAAW,CAAC,KAAK,GAAI,CAClC,CACR,CAAC,CAAC;IACZ,CAAC;IAEO,2CAAa,GAArB;QACI,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAGvE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1C,CAAC;QAED,IAAI,CAAC,QAAQ,CAAC;YACV,gBAAgB,EAAE,IAAI;SACzB,CAAC,CAAC;IACP,CAAC;IACL,0BAAC;AAAD,CAjCA,AAiCC,CAjCwC,KAAK,CAAC,SAAS,GAiCvD;AAjCY,kDAAmB","file":"controls/iFrameDialog/IFrameDialogContent.js","sourcesContent":["import * as React from \"react\";\nimport styles from './IFrameDialogContent.module.scss';\nimport { Spinner, SpinnerSize } from 'office-ui-fabric-react/lib/Spinner';\n\nexport interface IIFrameDialogContentProps {\n    url: string;\n    close: () => void;\n    iframeOnLoad?: (iframe: any) => void;\n    width: string;\n    height: string;\n}\n\nexport interface IIFrameDialogContentState {\n    isContentVisible?: boolean;\n}\n\n/**\n * IFrame Dialog content\n */\nexport class IFrameDialogContent extends React.Component<IIFrameDialogContentProps, IIFrameDialogContentState> {\n    private _iframe: any;\n\n    constructor(props: IIFrameDialogContentProps) {\n        super(props);\n\n        this.state = {\n            isContentVisible: false\n        };\n    }\n\n    public render(): JSX.Element {\n        return (<div className={styles.iFrameDialog}>\n            <iframe ref={(iframe) => { this._iframe = iframe; }} frameBorder={0} src={this.props.url} onLoad={this._iframeOnLoad.bind(this)} style={{ width: '100%', height: this.props.height, visibility: this.state.isContentVisible ? 'visible' : 'hidden' }} />\n            {!this.state.isContentVisible &&\n                <div className={styles.spinnerContainer}>\n                    <Spinner size={SpinnerSize.large} />\n                </div>}\n        </div>);\n    }\n\n    private _iframeOnLoad(): void {\n        this._iframe.contentWindow.frameElement.cancelPopUp = this.props.close;\n\n\n        if (this.props.iframeOnLoad) {\n            this.props.iframeOnLoad(this._iframe);\n        }\n\n        this.setState({\n            isContentVisible: true\n        });\n    }\n}\n"],"sourceRoot":"../../../src"}
{"version":3,"sources":["services/SPService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAqE;AAIrE,8CAAwE;AAExE;IAEE,mBAAoB,QAAuD;QAAvD,aAAQ,GAAR,QAAQ,CAA+C;IAAG,CAAC;IAE/E;;;OAGG;IACU,2BAAO,GAApB,UAAqB,OAAsB;;;;;;wBAErC,QAAQ,GAAc,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,kDAA+C,CAAC;wBAEnH,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;4BACpB,QAAQ,IAAI,gBAAa,OAAO,CAAC,OAAO,KAAK,wBAAW,CAAC,EAAE,GAAG,IAAI,GAAE,OAAO,CAAE,CAAC;wBAChF,CAAC;wBAED,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;4BACzB,QAAQ,IAAI,8BAA4B,OAAO,CAAC,YAAc,CAAC;4BAC/D,QAAQ,GAAG,IAAI,CAAC;wBAClB,CAAC;wBAED,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,KAAK,KAAK,CAAC,CAAC,CAAC;4BACpC,QAAQ,IAAI,QAAQ,GAAG,sBAAsB,GAAG,0BAA0B,CAAC;4BAC3E,QAAQ,GAAG,IAAI,CAAC;wBAClB,CAAC;wBAEY,qBAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,sBAAY,CAAC,cAAc,CAAC,EAAE,CAAC,EAAA;;wBAArF,IAAI,GAAG,SAA8E;6BACvF,IAAI,CAAC,EAAE,EAAP,wBAAO;wBACF,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;4BAAxB,sBAAO,SAAsC,EAAC;4BAE9C,sBAAO,IAAI,EAAC;;;;KAEf;IAED;;OAEG;IACU,gCAAY,GAAzB,UAA0B,UAAkB,EAAE,MAAc,EAAE,kBAA0B,EAAE,MAAe;;;;;;;wBAI/F,cAAc,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,GAAG,MAAM,CAAC;wBAC9E,MAAM,GAAM,cAAc,yBAAoB,MAAM,4BAAuB,kBAAkB,4BAAuB,kBAAkB,UAAK,UAAU,OAAI,CAAC;wBACnJ,qBAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,sBAAY,CAAC,cAAc,CAAC,EAAE,CAAC,EAAA;;wBAAnF,IAAI,GAAG,SAA4E;6BACrF,IAAI,CAAC,EAAE,EAAP,wBAAO;wBACO,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;wBAA3B,OAAO,GAAG,SAAiB;wBACjC,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BACzD,MAAM,gBAAC,OAAO,CAAC,KAAK,EAAC;wBACvB,CAAC;;4BAGH,sBAAO,EAAE,EAAC;;;wBAEV,sBAAO,OAAO,CAAC,MAAM,CAAC,OAAK,CAAC,EAAC;;;;;KAEhC;IACH,gBAAC;AAAD,CAxDA,AAwDC,IAAA","file":"services/SPService.js","sourcesContent":["import { ISPService, ILibsOptions, LibsOrderBy } from \"./ISPService\";\nimport { ISPLists } from \"../common/SPEntities\";\nimport { WebPartContext } from \"@microsoft/sp-webpart-base\";\nimport { ApplicationCustomizerContext } from \"@microsoft/sp-application-base\";\nimport { SPHttpClient, SPHttpClientResponse } from \"@microsoft/sp-http\";\n\nexport default class SPService implements ISPService {\n\n  constructor(private _context: WebPartContext | ApplicationCustomizerContext) {}\n\n  /**\n   * Get lists or libraries\n   * @param options\n   */\n  public async getLibs(options?: ILibsOptions): Promise<ISPLists> {\n    let filtered: boolean;\n    let queryUrl: string = `${this._context.pageContext.web.absoluteUrl}/_api/web/lists?$select=Title,id,BaseTemplate`;\n\n    if (options.orderBy) {\n      queryUrl += `&$orderby=${options.orderBy === LibsOrderBy.Id ? 'Id': 'Title'}`;\n    }\n\n    if (options.baseTemplate) {\n      queryUrl += `&$filter=BaseTemplate eq ${options.baseTemplate}`;\n      filtered = true;\n    }\n\n    if (options.includeHidden === false) {\n      queryUrl += filtered ? ' and Hidden eq false' : '&$filter=Hidden eq false';\n      filtered = true;\n    }\n\n    const data = await this._context.spHttpClient.get(queryUrl, SPHttpClient.configurations.v1);\n    if (data.ok) {\n      return await data.json() as Promise<ISPLists>;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get List Items\n   */\n  public async getListItems(filterText: string, listId: string, internalColumnName: string, webUrl?: string): Promise<any[]> {\n    let returnItems: any[];\n\n    try {\n      const webAbsoluteUrl = !webUrl ? this._context.pageContext.web.absoluteUrl : webUrl;\n      const apiUrl = `${webAbsoluteUrl}/_api/web/lists('${listId}')/items?$select=Id,${internalColumnName}&$filter=startswith(${internalColumnName},'${filterText}')`;\n      const data = await this._context.spHttpClient.get(apiUrl, SPHttpClient.configurations.v1);\n      if (data.ok) {\n        const results = await data.json();\n        if (results && results.value && results.value.length > 0) {\n          return results.value;\n        }\n      }\n\n      return [];\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n}\n"],"sourceRoot":"../../src"}
{"version":3,"sources":["services/SPTermStorePickerService.ts"],"names":[],"mappings":"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","file":"services/SPTermStorePickerService.js","sourcesContent":["/**\n * DISCLAIMER\n *\n * As there is not yet an OData end-point for managed metadata, this service makes use of the ProcessQuery end-points.\n * The service will get updated once the APIs are in place for managing managed metadata.\n */\n\nimport { SPHttpClient, SPHttpClientResponse, ISPHttpClientOptions } from '@microsoft/sp-http';\nimport { Environment, EnvironmentType } from '@microsoft/sp-core-library';\nimport { IWebPartContext } from '@microsoft/sp-webpart-base';\nimport { ITaxonomyPickerProps } from '../controls/taxonomyPicker/ITaxonomyPicker';\nimport { IPickerTerms, IPickerTerm } from '../controls/taxonomyPicker/ITermPicker';\nimport { ITermStore, ITerms, ITerm, IGroup, ITermSet, ITermSets } from './ISPTermStorePickerService';\nimport SPTermStoreMockHttpClient from './SPTermStorePickerMockService';\nimport { ApplicationCustomizerContext } from '@microsoft/sp-application-base';\n\n\n/**\n * Service implementation to manage term stores in SharePoint\n */\nexport default class SPTermStorePickerService {\n  private taxonomySession: string;\n  private formDigest: string;\n  private clientServiceUrl: string;\n\n  /**\n   * Service constructor\n   */\n  constructor(private props: ITaxonomyPickerProps, private context: IWebPartContext | ApplicationCustomizerContext) {\n    if (Environment.type !== EnvironmentType.Local) {\n      {\n        this.clientServiceUrl = this.context.pageContext.web.absoluteUrl + '/_vti_bin/client.svc/ProcessQuery';\n      }\n    }\n  }\n\n  /**\n   * Gets the collection of term stores in the current SharePoint env\n   */\n  public getTermStores(): Promise<ITermStore[]> {\n    if (Environment.type === EnvironmentType.Local) {\n      // If the running environment is local, load the data from the mock\n      return this.getTermStoresFromMock();\n    } else {\n      // Retrieve the term store name, groups, and term sets\n      const data = '<Request AddExpandoFieldTypeSuffix=\"true\" SchemaVersion=\"15.0.0.0\" LibraryVersion=\"16.0.0.0\" ApplicationName=\".NET Library\" xmlns=\"http://schemas.microsoft.com/sharepoint/clientquery/2009\"><Actions><ObjectPath Id=\"2\" ObjectPathId=\"1\" /><ObjectIdentityQuery Id=\"3\" ObjectPathId=\"1\" /><ObjectPath Id=\"5\" ObjectPathId=\"4\" /><ObjectIdentityQuery Id=\"6\" ObjectPathId=\"4\" /><Query Id=\"7\" ObjectPathId=\"4\"><Query SelectAllProperties=\"false\"><Properties><Property Name=\"Id\" ScalarProperty=\"true\" /><Property Name=\"Name\" ScalarProperty=\"true\" /><Property Name=\"Groups\"><Query SelectAllProperties=\"false\"><Properties /></Query><ChildItemQuery SelectAllProperties=\"false\"><Properties><Property Name=\"Name\" ScalarProperty=\"true\" /><Property Name=\"Id\" ScalarProperty=\"true\" /><Property Name=\"IsSystemGroup\" ScalarProperty=\"true\" /><Property Name=\"TermSets\"><Query SelectAllProperties=\"false\"><Properties /></Query><ChildItemQuery SelectAllProperties=\"false\"><Properties><Property Name=\"Name\" ScalarProperty=\"true\" /><Property Name=\"Id\" ScalarProperty=\"true\" /><Property Name=\"Description\" ScalarProperty=\"true\" /><Property Name=\"Names\" ScalarProperty=\"true\" /></Properties></ChildItemQuery></Property></Properties></ChildItemQuery></Property></Properties></Query></Query></Actions><ObjectPaths><StaticMethod Id=\"1\" Name=\"GetTaxonomySession\" TypeId=\"{981cbc68-9edc-4f8d-872f-71146fcbb84f}\" /><Method Id=\"4\" ParentId=\"1\" Name=\"GetDefaultSiteCollectionTermStore\" /></ObjectPaths></Request>';\n\n      const reqHeaders = new Headers();\n      reqHeaders.append(\"accept\", \"application/json\");\n      reqHeaders.append(\"content-type\", \"application/xml\");\n\n      const httpPostOptions: ISPHttpClientOptions = {\n        headers: reqHeaders,\n        body: data\n      };\n\n      return this.context.spHttpClient.post(this.clientServiceUrl, SPHttpClient.configurations.v1, httpPostOptions).then((serviceResponse: SPHttpClientResponse) => {\n        return serviceResponse.json().then((serviceJSONResponse: any) => {\n          // Construct results\n          let termStoreResult: ITermStore[] = serviceJSONResponse.filter(r => r['_ObjectType_'] === 'SP.Taxonomy.TermStore');\n          // Check if term store was retrieved\n          if (termStoreResult.length > 0) {\n            // Check if the termstore needs to be filtered or limited\n            if (this.props.termsetNameOrID) {\n              return termStoreResult.map(termstore => {\n                let termGroups = termstore.Groups._Child_Items_;\n\n                // Check if the groups have to be limited to a specific term set\n                if (this.props.termsetNameOrID) {\n                  const termsetNameOrId = this.props.termsetNameOrID;\n                  termGroups = termGroups.map((group: IGroup) => {\n                    group.TermSets._Child_Items_ = group.TermSets._Child_Items_.filter((termSet: ITermSet) => termSet.Name === termsetNameOrId || this.cleanGuid(termSet.Id).toLowerCase() === this.cleanGuid(termsetNameOrId).toLowerCase());\n                    return group;\n                  });\n                }\n\n                // Filter out all systen groups\n                termGroups = termGroups.filter(group => !group.IsSystemGroup);\n\n                // Filter out empty groups\n                termGroups = termGroups.filter((group: IGroup) => group.TermSets._Child_Items_.length > 0);\n\n                // Map the new groups\n                termstore.Groups._Child_Items_ = termGroups;\n                return termstore;\n              });\n            }\n\n            // Return the term store results\n            return termStoreResult;\n          }\n          return [];\n        });\n      });\n    }\n  }\n\n  /**\n   * Gets the current term set\n   */\n  public async getTermSet(): Promise<ITermSet> {\n    if (Environment.type === EnvironmentType.Local) {\n      const termSetInfo = await SPTermStoreMockHttpClient.getAllTerms();\n      return termSetInfo;\n    } else {\n      const termStore = await this.getTermStores();\n      return this.getTermSetId(termStore, this.props.termsetNameOrID);\n    }\n  }\n\n  /**\n   * Retrieve all terms for the given term set\n   * @param termset\n   */\n  public async getAllTerms(termset: string): Promise<ITermSet> {\n    if (Environment.type === EnvironmentType.Local) {\n      // If the running environment is local, load the data from the mock\n      return this.getAllMockTerms();\n    } else {\n      let termsetId: string = termset;\n      // Check if the provided term set property is a GUID or string\n      if (!this.isGuid(termset)) {\n        // Fetch the term store information\n        const termStore = await this.getTermStores();\n        // Get the ID of the provided term set name\n        const crntTermSet = this.getTermSetId(termStore, termset);\n        if (crntTermSet) {\n          termsetId = this.cleanGuid(crntTermSet.Id);\n        } else {\n          return null;\n        }\n      }\n\n      // Request body to retrieve all terms for the given term set\n      const data = `<Request xmlns=\"http://schemas.microsoft.com/sharepoint/clientquery/2009\" SchemaVersion=\"15.0.0.0\" LibraryVersion=\"16.0.0.0\" ApplicationName=\"Javascript Library\"><Actions><ObjectPath Id=\"1\" ObjectPathId=\"0\" /><ObjectIdentityQuery Id=\"2\" ObjectPathId=\"0\" /><ObjectPath Id=\"4\" ObjectPathId=\"3\" /><ObjectIdentityQuery Id=\"5\" ObjectPathId=\"3\" /><ObjectPath Id=\"7\" ObjectPathId=\"6\" /><ObjectIdentityQuery Id=\"8\" ObjectPathId=\"6\" /><ObjectPath Id=\"10\" ObjectPathId=\"9\" /><Query Id=\"11\" ObjectPathId=\"6\"><Query SelectAllProperties=\"true\"><Properties /></Query></Query><Query Id=\"12\" ObjectPathId=\"9\"><Query SelectAllProperties=\"false\"><Properties /></Query><ChildItemQuery SelectAllProperties=\"false\"><Properties><Property Name=\"IsRoot\" SelectAll=\"true\" /><Property Name=\"Labels\" SelectAll=\"true\" /><Property Name=\"TermsCount\" SelectAll=\"true\" /><Property Name=\"CustomSortOrder\" SelectAll=\"true\" /><Property Name=\"Id\" SelectAll=\"true\" /><Property Name=\"Name\" SelectAll=\"true\" /><Property Name=\"PathOfTerm\" SelectAll=\"true\" /><Property Name=\"Parent\" SelectAll=\"true\" /><Property Name=\"LocalCustomProperties\" SelectAll=\"true\" /><Property Name=\"IsDeprecated\" ScalarProperty=\"true\" /><Property Name=\"IsAvailableForTagging\" ScalarProperty=\"true\" /></Properties></ChildItemQuery></Query></Actions><ObjectPaths><StaticMethod Id=\"0\" Name=\"GetTaxonomySession\" TypeId=\"{981cbc68-9edc-4f8d-872f-71146fcbb84f}\" /><Method Id=\"3\" ParentId=\"0\" Name=\"GetDefaultKeywordsTermStore\" /><Method Id=\"6\" ParentId=\"3\" Name=\"GetTermSet\"><Parameters><Parameter Type=\"Guid\">${termsetId}</Parameter></Parameters></Method><Method Id=\"9\" ParentId=\"6\" Name=\"GetAllTerms\" /></ObjectPaths></Request>`;\n\n\n      const reqHeaders = new Headers();\n      reqHeaders.append(\"accept\", \"application/json\");\n      reqHeaders.append(\"content-type\", \"application/xml\");\n\n      const httpPostOptions: ISPHttpClientOptions = {\n        headers: reqHeaders,\n        body: data\n      };\n\n      return this.context.spHttpClient.post(this.clientServiceUrl, SPHttpClient.configurations.v1, httpPostOptions).then((serviceResponse: SPHttpClientResponse) => {\n        return serviceResponse.json().then((serviceJSONResponse: any) => {\n          const termStoreResultTermSets: ITermSet[] = serviceJSONResponse.filter(r => r['_ObjectType_'] === 'SP.Taxonomy.TermSet');\n\n          if (termStoreResultTermSets.length > 0) {\n            var termStoreResultTermSet = termStoreResultTermSets[0];\n            termStoreResultTermSet.Terms = [];\n            // Retrieve the term collection results\n            const termStoreResultTerms: ITerms[] = serviceJSONResponse.filter(r => r['_ObjectType_'] === 'SP.Taxonomy.TermCollection');\n            if (termStoreResultTerms.length > 0) {\n              // Retrieve all terms\n              let terms = termStoreResultTerms[0]._Child_Items_;\n              // Clean the term ID and specify the path depth\n              terms = terms.map(term => {\n                term.CustomSortOrderIndex = (termStoreResultTermSet.CustomSortOrder) ? termStoreResultTermSet.CustomSortOrder.split(\":\").indexOf(this.cleanGuid(term.Id)) : -1;\n                term.Id = this.cleanGuid(term.Id);\n                term['PathDepth'] = term.PathOfTerm.split(';').length;\n                term.TermSet = { Id: this.cleanGuid(termStoreResultTermSet.Id), Name: termStoreResultTermSet.Name };\n                if (term[\"Parent\"]) {\n                  term.ParentId = this.cleanGuid(term[\"Parent\"].Id);\n                }\n                return term;\n              });\n              // Check if the term set was not empty\n              if (terms.length > 0) {\n                // Sort the terms by PathOfTerm\n                terms = terms.sort(this._sortTerms);\n                termStoreResultTermSet.Terms = terms;\n              }\n            }\n            return termStoreResultTermSet;\n          }\n          return null;\n        });\n      });\n    }\n  }\n\n\n  /**\n   * Get the term set ID by its name\n   * @param termstore\n   * @param termset\n   */\n  private getTermSetId(termstore: ITermStore[], termsetName: string): ITermSet {\n    if (termstore && termstore.length > 0 && termsetName) {\n      // Get the first term store\n      const ts = termstore[0];\n      // Check if the term store contains groups\n      if (ts.Groups && ts.Groups._Child_Items_) {\n        for (const group of ts.Groups._Child_Items_) {\n          // Check if the group contains term sets\n          if (group.TermSets && group.TermSets._Child_Items_) {\n            for (const termSet of group.TermSets._Child_Items_) {\n              // Check if the term set is found\n              if (termSet.Name === termsetName) {\n                return termSet;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n\n  /**\n   * Retrieve all terms that starts with the searchText\n   * @param searchText\n   */\n  public searchTermsByName(searchText: string): Promise<IPickerTerm[]> {\n    if (Environment.type === EnvironmentType.Local) {\n      // If the running environment is local, load the data from the mock\n      return SPTermStoreMockHttpClient.searchTermsByName(searchText);\n    } else {\n      return this.searchTermsByTermSet(searchText, this.props.termsetNameOrID);\n    }\n  }\n\n  /**\n     * Searches terms for the given term set\n     * @param searchText\n     * @param termsetId\n     */\n  private searchTermsByTermSet(searchText: string, termSet: string): Promise<IPickerTerm[]> {\n    if (Environment.type === EnvironmentType.Local) {\n      // If the running environment is local, load the data from the mock\n      return SPTermStoreMockHttpClient.searchTermsByName(searchText);\n    } else {\n      return new Promise<IPickerTerm[]>(resolve => {\n        this.getTermStores().then(termStore => {\n          let TermSetId = termSet;\n          if (!this.isGuid(termSet)) {\n            // Get the ID of the provided term set name\n            const crntTermSet = this.getTermSetId(termStore, termSet);\n            if (crntTermSet) {\n              TermSetId = this.cleanGuid(crntTermSet.Id);\n            } else {\n              resolve(null);\n              return;\n            }\n          }\n\n          let data = `<Request xmlns=\"http://schemas.microsoft.com/sharepoint/clientquery/2009\" SchemaVersion=\"15.0.0.0\" LibraryVersion=\"16.0.0.0\" ApplicationName=\"Javascript Library\"><Actions><ObjectPath Id=\"456\" ObjectPathId=\"455\" /><ObjectIdentityQuery Id=\"457\" ObjectPathId=\"455\" /><ObjectPath Id=\"459\" ObjectPathId=\"458\" /><ObjectIdentityQuery Id=\"460\" ObjectPathId=\"458\" /><ObjectPath Id=\"462\" ObjectPathId=\"461\" /><ObjectIdentityQuery Id=\"463\" ObjectPathId=\"461\" /><ObjectPath Id=\"465\" ObjectPathId=\"464\" /><SetProperty Id=\"466\" ObjectPathId=\"464\" Name=\"TermLabel\"><Parameter Type=\"String\">${searchText}</Parameter></SetProperty><SetProperty Id=\"467\" ObjectPathId=\"464\" Name=\"DefaultLabelOnly\"><Parameter Type=\"Boolean\">true</Parameter></SetProperty><SetProperty Id=\"468\" ObjectPathId=\"464\" Name=\"StringMatchOption\"><Parameter Type=\"Number\">0</Parameter></SetProperty><SetProperty Id=\"469\" ObjectPathId=\"464\" Name=\"ResultCollectionSize\"><Parameter Type=\"Number\">10</Parameter></SetProperty><SetProperty Id=\"470\" ObjectPathId=\"464\" Name=\"TrimUnavailable\"><Parameter Type=\"Boolean\">true</Parameter></SetProperty><ObjectPath Id=\"472\" ObjectPathId=\"471\" /><Query Id=\"473\" ObjectPathId=\"471\"><Query SelectAllProperties=\"false\"><Properties /></Query><ChildItemQuery SelectAllProperties=\"false\"><Properties><Property Name=\"IsRoot\" SelectAll=\"true\" /><Property Name=\"Id\" SelectAll=\"true\" /><Property Name=\"Name\" SelectAll=\"true\" /><Property Name=\"PathOfTerm\" SelectAll=\"true\" /><Property Name=\"TermSet\" SelectAll=\"true\" /></Properties></ChildItemQuery></Query></Actions><ObjectPaths><StaticMethod Id=\"455\" Name=\"GetTaxonomySession\" TypeId=\"{981cbc68-9edc-4f8d-872f-71146fcbb84f}\" /><Method Id=\"458\" ParentId=\"455\" Name=\"GetDefaultKeywordsTermStore\" /><Method Id=\"461\" ParentId=\"458\" Name=\"GetTermSet\"><Parameters><Parameter Type=\"Guid\">${TermSetId}</Parameter></Parameters></Method><Constructor Id=\"464\" TypeId=\"{61a1d689-2744-4ea3-a88b-c95bee9803aa}\" /><Method Id=\"471\" ParentId=\"461\" Name=\"GetTerms\"><Parameters><Parameter ObjectPathId=\"464\" /></Parameters></Method></ObjectPaths></Request>`;\n\n          const reqHeaders = new Headers();\n          reqHeaders.append(\"accept\", \"application/json\");\n          reqHeaders.append(\"content-type\", \"application/xml\");\n\n          const httpPostOptions: ISPHttpClientOptions = {\n            headers: reqHeaders,\n            body: data\n          };\n\n\n          return this.context.spHttpClient.post(this.clientServiceUrl, SPHttpClient.configurations.v1, httpPostOptions).then((serviceResponse: SPHttpClientResponse) => {\n            return serviceResponse.json().then((serviceJSONResponse: any) => {\n              // Retrieve the term collection results\n              const termStoreResult: ITerms[] = serviceJSONResponse.filter(r => r['_ObjectType_'] === 'SP.Taxonomy.TermCollection');\n              if (termStoreResult.length > 0) {\n                // Retrieve all terms\n\n                let terms = termStoreResult[0]._Child_Items_;\n\n                let returnTerms: IPickerTerm[] = [];\n                terms.forEach(term => {\n                  if (term.Name.toLowerCase().indexOf(searchText.toLowerCase()) !== -1) {\n                    returnTerms.push({\n                      key: this.cleanGuid(term.Id),\n                      name: term.Name,\n                      path: term.PathOfTerm,\n                      termSet: this.cleanGuid(term.TermSet.Id),\n                      termSetName: term.TermSet.Name\n                    });\n                  }\n                });\n                resolve(returnTerms);\n              }\n              return null;\n            });\n          });\n        });\n      });\n    }\n  }\n\n  private isGuid(strGuid: string): boolean {\n    return /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(strGuid);\n  }\n\n  /**\n   * Sort the terms by their path\n   * @param a term 2\n   * @param b term 2\n   */\n  private _sortTerms(a: ITerm, b: ITerm) {\n    if(a.CustomSortOrderIndex === -1){\n      if (a.PathOfTerm < b.PathOfTerm) {\n        return -1;\n      }\n      if (a.PathOfTerm > b.PathOfTerm) {\n        return 1;\n      }\n      return 0;\n    }else{\n      if (a.CustomSortOrderIndex < b.CustomSortOrderIndex) {\n        return -1;\n      }\n      if (a.CustomSortOrderIndex > b.CustomSortOrderIndex) {\n        return 1;\n      }\n      return 0;\n    }\n\n  }\n\n  /**\n   * Clean the Guid from the Web Service response\n   * @param guid\n   */\n  public cleanGuid(guid: string): string {\n    if (guid !== undefined) {\n      return guid.replace('/Guid(', '').replace('/', '').replace(')', '');\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Returns 3 fake SharePoint lists for the Mock mode\n   */\n  private getTermStoresFromMock(): Promise<ITermStore[]> {\n    return SPTermStoreMockHttpClient.getTermStores(this.context.pageContext.web.absoluteUrl).then((data) => {\n      return data;\n    }) as Promise<ITermStore[]>;\n  }\n\n  /**\n   * Returns 3 fake SharePoint lists for the Mock mode\n   */\n  private getAllMockTerms(): Promise<ITermSet> {\n    return SPTermStoreMockHttpClient.getAllTerms().then((data) => {\n      return data;\n    }) as Promise<ITermSet>;\n  }\n}\n"],"sourceRoot":"../../src"}
{"version":3,"sources":["services/SPListPickerService.ts"],"names":[],"mappings":"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","file":"services/SPListPickerService.js","sourcesContent":["import { SPHttpClientResponse } from '@microsoft/sp-http';\nimport { SPHttpClient } from '@microsoft/sp-http';\nimport { Environment, EnvironmentType } from '@microsoft/sp-core-library';\nimport { IWebPartContext } from '@microsoft/sp-webpart-base';\nimport { ISPLists, IPropertyFieldListPickerHostProps } from '../propertyFields/listPicker/IPropertyFieldListPickerHost';\nimport { PropertyFieldListPickerOrderBy } from '../propertyFields/listPicker/IPropertyFieldListPicker';\nimport SPListPickerMockHttpClient from './SPListPickerMockService';\n\n/**\n * Service implementation to get list & list items from current SharePoint site\n */\nexport default class SPListPickerService {\n\n  private context: IWebPartContext;\n  private props: IPropertyFieldListPickerHostProps;\n\n  /**\n   * Service constructor\n   */\n  constructor(_props: IPropertyFieldListPickerHostProps, pageContext: IWebPartContext) {\n    this.props = _props;\n    this.context = pageContext;\n  }\n\n  /**\n   * Gets the collection of libs in the current SharePoint site, or target site if specified by webRelativeUrl\n   */\n  public getLibs(): Promise<ISPLists> {\n    if (Environment.type === EnvironmentType.Local) {\n      // If the running environment is local, load the data from the mock\n      return this.getLibsFromMock();\n    }\n    else {\n      // use the web relative url if provided, otherwise default to current SharePoint site\n      const webAbsoluteUrl = this.props.webAbsoluteUrl ? this.props.webAbsoluteUrl : this.context.pageContext.web.absoluteUrl;\n      // If the running environment is SharePoint, request the lists REST service\n      let queryUrl: string = `${webAbsoluteUrl}/_api/lists?$select=Title,id,BaseTemplate`;\n      // Check if the orderBy property is provided\n      if (this.props.orderBy !== null) {\n        queryUrl += '&$orderby=';\n        switch (this.props.orderBy) {\n          case PropertyFieldListPickerOrderBy.Id:\n            queryUrl += 'Id';\n            break;\n          case PropertyFieldListPickerOrderBy.Title:\n            queryUrl += 'Title';\n            break;\n        }\n      }\n      // Check if the list have get filtered based on the list base template type\n      if (this.props.baseTemplate !== null && this.props.baseTemplate) {\n        queryUrl += '&$filter=BaseTemplate%20eq%20';\n        queryUrl += this.props.baseTemplate;\n        // Check if you also want to exclude hidden list in the list\n        if (this.props.includeHidden === false) {\n          queryUrl += '%20and%20Hidden%20eq%20false';\n        }\n      } else {\n        if (this.props.includeHidden === false) {\n          queryUrl += '&$filter=Hidden%20eq%20false';\n        }\n      }\n      return this.context.spHttpClient.get(queryUrl, SPHttpClient.configurations.v1).then((response: SPHttpClientResponse) => {\n        return response.json();\n      }) as Promise<ISPLists>;\n    }\n  }\n\n  /**\n   * Returns 3 fake SharePoint lists for the Mock mode\n   */\n  private getLibsFromMock(): Promise<ISPLists> {\n    return SPListPickerMockHttpClient.getLists(this.context.pageContext.web.absoluteUrl).then(() => {\n      const listData: ISPLists = {\n        value:\n        [\n          { Title: 'Mock List One', Id: '6770c83b-29e8-494b-87b6-468a2066bcc6', BaseTemplate: '109' },\n          { Title: 'Mock List Two', Id: '2ece98f2-cc5e-48ff-8145-badf5009754c', BaseTemplate: '109' },\n          { Title: 'Mock List Three', Id: 'bd5dbd33-0e8d-4e12-b289-b276e5ef79c2', BaseTemplate: '109' }\n        ]\n      };\n      return listData;\n    }) as Promise<ISPLists>;\n  }\n}\n"],"sourceRoot":"../../src"}
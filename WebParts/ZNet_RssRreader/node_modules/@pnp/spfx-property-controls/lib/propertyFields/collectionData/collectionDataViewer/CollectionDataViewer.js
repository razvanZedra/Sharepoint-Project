"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropertyFieldCollectionDataHost_module_scss_1 = require("../PropertyFieldCollectionDataHost.module.scss");
var collectionDataItem_1 = require("../collectionDataItem");
var Button_1 = require("office-ui-fabric-react/lib/components/Button");
var Icon_1 = require("office-ui-fabric-react/lib/components/Icon");
var strings = require("PropertyControlStrings");
var sp_lodash_subset_1 = require("@microsoft/sp-lodash-subset");
var CollectionDataViewer = (function (_super) {
    __extends(CollectionDataViewer, _super);
    function CollectionDataViewer(props) {
        var _this = _super.call(this, props) || this;
        /**
         * Add a new item to the collection
         */
        _this.addItem = function (item) {
            _this.setState(function (prevState) { return ({
                crntItems: prevState.crntItems.concat([item]),
                inCreationItem: null
            }); });
        };
        /**
         * Remove an item from the collection
         */
        _this.updateItem = function (idx, item) {
            _this.setState(function (prevState) {
                var crntItems = prevState.crntItems;
                // Update the item in the array
                crntItems[idx] = item;
                return { crntItems: crntItems };
            });
        };
        /**
         * Remove an item from the collection
         */
        _this.deleteItem = function (idx) {
            _this.setState(function (prevState) {
                var crntItems = prevState.crntItems;
                crntItems.splice(idx, 1);
                return { crntItems: crntItems };
            });
        };
        /**
         * Validate every item
         */
        _this.validateItem = function (idx, isValid) {
            _this.setState(function (prevState) {
                var validation = prevState.validation;
                validation[idx] = isValid;
                return {
                    validation: prevState.validation
                };
            });
        };
        /**
         * Currently in creation
         */
        _this.addInCreation = function (item) {
            _this.setState({
                inCreationItem: item
            });
        };
        /**
         * Add the item and save the form
         */
        _this.addAndSave = function () {
            // Check if the item is not empty
            if (_this.state.inCreationItem) {
                _this.props.fOnSave(_this.state.crntItems.concat([_this.state.inCreationItem]));
            }
            else {
                _this.onSave();
            }
        };
        /**
         * Save the collection data
         */
        _this.onSave = function () {
            _this.props.fOnSave(_this.state.crntItems);
        };
        /**
         * Cancel
         */
        _this.onCancel = function () {
            _this.props.fOnClose();
        };
        _this.state = {
            crntItems: [],
            inCreationItem: null,
            validation: {}
        };
        return _this;
    }
    /**
     * componentDidMount lifecycle hook
     */
    CollectionDataViewer.prototype.componentDidMount = function () {
        this.setState({
            crntItems: this.props.value ? sp_lodash_subset_1.cloneDeep(this.props.value) : []
        });
    };
    /**
     * Check if all items are valid
     */
    CollectionDataViewer.prototype.allItemsValid = function () {
        var validation = this.state.validation;
        if (validation) {
            var keys = Object.keys(validation);
            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                var key = keys_1[_i];
                if (!validation[key]) {
                    return false;
                }
            }
        }
        return true;
    };
    /**
     * Default React render
     */
    CollectionDataViewer.prototype.render = function () {
        var _this = this;
        return (React.createElement("div", null,
            React.createElement("div", { className: PropertyFieldCollectionDataHost_module_scss_1.default.table },
                React.createElement("div", { className: PropertyFieldCollectionDataHost_module_scss_1.default.tableRow + " " + PropertyFieldCollectionDataHost_module_scss_1.default.tableHead },
                    this.props.fields.map(function (f) { return (React.createElement("span", { className: PropertyFieldCollectionDataHost_module_scss_1.default.tableCell },
                        f.title,
                        " ",
                        f.required && React.createElement(Icon_1.Icon, { className: PropertyFieldCollectionDataHost_module_scss_1.default.required, iconName: "Asterisk" }))); }),
                    React.createElement("span", { className: PropertyFieldCollectionDataHost_module_scss_1.default.tableCell }),
                    React.createElement("span", { className: PropertyFieldCollectionDataHost_module_scss_1.default.tableCell })),
                (this.state.crntItems && this.state.crntItems.length > 0) && (this.state.crntItems.map(function (item, idx) { return (React.createElement(collectionDataItem_1.CollectionDataItem, { key: idx, fields: _this.props.fields, index: idx, item: item, fUpdateItem: _this.updateItem, fDeleteItem: _this.deleteItem, fValidation: _this.validateItem })); })),
                React.createElement(collectionDataItem_1.CollectionDataItem, { fields: this.props.fields, index: null, item: null, fAddItem: this.addItem, fAddInCreation: this.addInCreation })),
            (!this.state.crntItems || this.state.crntItems.length === 0) && (React.createElement("p", { className: PropertyFieldCollectionDataHost_module_scss_1.default.noCollectionData }, strings.CollectionDataEmptyValue)),
            React.createElement("div", { className: PropertyFieldCollectionDataHost_module_scss_1.default.panelActions },
                this.state.inCreationItem && React.createElement(Button_1.PrimaryButton, { text: strings.CollectionSaveAndAddButtonLabel, onClick: this.addAndSave, disabled: !this.allItemsValid() }),
                !this.state.inCreationItem && React.createElement(Button_1.PrimaryButton, { text: strings.SaveButtonLabel, onClick: this.onSave, disabled: !this.allItemsValid() }),
                React.createElement(Button_1.DefaultButton, { text: strings.CancelButtonLabel, onClick: this.onCancel }))));
    };
    return CollectionDataViewer;
}(React.Component));
exports.CollectionDataViewer = CollectionDataViewer;

//# sourceMappingURL=CollectionDataViewer.js.map

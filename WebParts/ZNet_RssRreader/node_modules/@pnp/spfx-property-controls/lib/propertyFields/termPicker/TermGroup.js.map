{"version":3,"sources":["propertyFields/termPicker/TermGroup.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA+B;AAE/B,6EAAuF;AACvF,qCAAgC;AAEhC,qGAA+D;AAC/D,gDAAkD;AAElD;;GAEG;AACH;IAAuC,6BAAiD;IACtF,mBAAY,KAAsB;QAAlC,YACE,kBAAM,KAAK,CAAC,SAQb;QANC,KAAI,CAAC,KAAK,GAAG;YACX,QAAQ,EAAE,KAAK;SAChB,CAAC;QAEF,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QACjD,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;IACjD,CAAC;IAED;;OAEG;IACK,gCAAY,GAApB;QACE,IAAI,CAAC,QAAQ,CAAC;YACZ,QAAQ,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ;SAC/B,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,+BAAW,GAAnB;QACE,IAAI,CAAC,QAAQ,CAAC;YACZ,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC;IACL,CAAC;IAEM,0BAAM,GAAb;QAAA,iBA8BC;QA7BC,0DAA0D;QAC1D,IAAM,UAAU,GAAwB;YACtC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,OAAO,GAAG,MAAM;SAChD,CAAC;QAEF,MAAM,CAAC,CACL;YACE,6BAAK,SAAS,EAAE,KAAG,iDAAM,CAAC,QAAU,EAAE,OAAO,EAAE,IAAI,CAAC,YAAY;gBAC9D,6BAAK,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,0CAAY,GAAG,2CAAa,EAAE,GAAG,EAAE,OAAO,CAAC,oBAAoB,EAAE,KAAK,EAAE,OAAO,CAAC,oBAAoB,GAAI;gBACxI,6BAAK,GAAG,EAAE,uCAAS,EAAE,KAAK,EAAE,OAAO,CAAC,mBAAmB,EAAE,GAAG,EAAE,OAAO,CAAC,mBAAmB,GAAI;;gBAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAChH;YACN,6BAAK,KAAK,EAAE,UAAU,IAElB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,UAAA,OAAO;gBACjD,MAAM,CAAC,oBAAC,iBAAO,IAAC,GAAG,EAAE,OAAO,CAAC,EAAE,EACf,OAAO,EAAE,OAAO,EAChB,SAAS,EAAE,KAAI,CAAC,KAAK,CAAC,SAAS,EAC/B,YAAY,EAAE,KAAI,CAAC,KAAK,CAAC,YAAY,EACrC,UAAU,EAAE,KAAI,CAAC,WAAW,EAC5B,WAAW,EAAE,KAAI,CAAC,KAAK,CAAC,WAAW,EACnC,eAAe,EAAE,KAAI,CAAC,KAAK,CAAC,eAAe,EAC3C,cAAc,EAAE,KAAI,CAAC,KAAK,CAAC,cAAc,EACzC,mBAAmB,EAAE,KAAI,CAAC,KAAK,CAAC,mBAAmB,EACnD,eAAe,EAAE,KAAI,CAAC,KAAK,CAAC,eAAe,GAAI,CAAC;YAClE,CAAC,CAAC,CAEA,CACF,CACP,CAAC;IACJ,CAAC;IACH,gBAAC;AAAD,CA7DA,AA6DC,CA7DsC,KAAK,CAAC,SAAS,GA6DrD","file":"propertyFields/termPicker/TermGroup.js","sourcesContent":["import * as React from 'react';\nimport { ITermGroupProps, ITermGroupState } from './IPropertyFieldTermPickerHost';\nimport { GROUP_IMG, EXPANDED_IMG, COLLAPSED_IMG } from './PropertyFieldTermPickerHost';\nimport TermSet from './TermSet';\n\nimport styles from './PropertyFieldTermPickerHost.module.scss';\nimport * as strings from 'PropertyControlStrings';\n\n/**\n * Term group component\n */\nexport default class TermGroup extends React.Component<ITermGroupProps, ITermGroupState> {\n  constructor(props: ITermGroupProps) {\n    super(props);\n\n    this.state = {\n      expanded: false\n    };\n\n    this._handleClick = this._handleClick.bind(this);\n    this._autoExpand = this._autoExpand.bind(this);\n  }\n\n  /**\n   * Handle the click event: collapse or expand\n   */\n  private _handleClick() {\n    this.setState({\n      expanded: !this.state.expanded\n    });\n  }\n\n  /**\n   * Function to auto expand the termset\n   */\n  private _autoExpand() {\n    this.setState({\n      expanded: true\n    });\n  }\n\n  public render(): JSX.Element {\n    // Specify the inline styling to show or hide the termsets\n    const styleProps: React.CSSProperties = {\n      display: this.state.expanded ? 'block' : 'none'\n    };\n\n    return (\n      <div>\n        <div className={`${styles.listItem}`} onClick={this._handleClick}>\n          <img src={this.state.expanded ? EXPANDED_IMG : COLLAPSED_IMG} alt={strings.TermPickerExpandNode} title={strings.TermPickerExpandNode} />\n          <img src={GROUP_IMG} title={strings.TermPickerMenuGroup} alt={strings.TermPickerMenuGroup} /> {this.props.group.Name}\n        </div>\n        <div style={styleProps}>\n          {\n            this.props.group.TermSets._Child_Items_.map(termset => {\n              return <TermSet key={termset.Id} \n                              termset={termset} \n                              termstore={this.props.termstore} \n                              termsService={this.props.termsService} \n                              autoExpand={this._autoExpand} \n                              activeNodes={this.props.activeNodes} \n                              changedCallback={this.props.changedCallback} \n                              multiSelection={this.props.multiSelection} \n                              isTermSetSelectable={this.props.isTermSetSelectable}\n                              disabledTermIds={this.props.disabledTermIds} />;\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../../../src"}
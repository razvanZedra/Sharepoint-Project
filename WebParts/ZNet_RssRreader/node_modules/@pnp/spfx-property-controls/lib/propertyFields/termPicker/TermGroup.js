"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropertyFieldTermPickerHost_1 = require("./PropertyFieldTermPickerHost");
var TermSet_1 = require("./TermSet");
var PropertyFieldTermPickerHost_module_scss_1 = require("./PropertyFieldTermPickerHost.module.scss");
var strings = require("PropertyControlStrings");
/**
 * Term group component
 */
var TermGroup = (function (_super) {
    __extends(TermGroup, _super);
    function TermGroup(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            expanded: false
        };
        _this._handleClick = _this._handleClick.bind(_this);
        _this._autoExpand = _this._autoExpand.bind(_this);
        return _this;
    }
    /**
     * Handle the click event: collapse or expand
     */
    TermGroup.prototype._handleClick = function () {
        this.setState({
            expanded: !this.state.expanded
        });
    };
    /**
     * Function to auto expand the termset
     */
    TermGroup.prototype._autoExpand = function () {
        this.setState({
            expanded: true
        });
    };
    TermGroup.prototype.render = function () {
        var _this = this;
        // Specify the inline styling to show or hide the termsets
        var styleProps = {
            display: this.state.expanded ? 'block' : 'none'
        };
        return (React.createElement("div", null,
            React.createElement("div", { className: "" + PropertyFieldTermPickerHost_module_scss_1.default.listItem, onClick: this._handleClick },
                React.createElement("img", { src: this.state.expanded ? PropertyFieldTermPickerHost_1.EXPANDED_IMG : PropertyFieldTermPickerHost_1.COLLAPSED_IMG, alt: strings.TermPickerExpandNode, title: strings.TermPickerExpandNode }),
                React.createElement("img", { src: PropertyFieldTermPickerHost_1.GROUP_IMG, title: strings.TermPickerMenuGroup, alt: strings.TermPickerMenuGroup }),
                " ",
                this.props.group.Name),
            React.createElement("div", { style: styleProps }, this.props.group.TermSets._Child_Items_.map(function (termset) {
                return React.createElement(TermSet_1.default, { key: termset.Id, termset: termset, termstore: _this.props.termstore, termsService: _this.props.termsService, autoExpand: _this._autoExpand, activeNodes: _this.props.activeNodes, changedCallback: _this.props.changedCallback, multiSelection: _this.props.multiSelection, isTermSetSelectable: _this.props.isTermSetSelectable, disabledTermIds: _this.props.disabledTermIds });
            }))));
    };
    return TermGroup;
}(React.Component));
exports.default = TermGroup;

//# sourceMappingURL=TermGroup.js.map

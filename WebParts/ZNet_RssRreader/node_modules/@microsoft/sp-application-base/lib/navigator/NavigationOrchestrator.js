import { Guid, Session, Validate, _SPEventManager, _SPKillSwitch } from '@microsoft/sp-core-library';
import { _Diagnostics, _LogSource, _TraceLogger } from '@microsoft/sp-diagnostics';
import { _ManifestStore, _SPLoaderFlights } from '@microsoft/sp-loader';
import { PageContext, SharePointPageContextDataProvider } from '@microsoft/sp-page-context';
import { _Telemetry } from '@ms/sp-telemetry';
import ApplicationManager from '../ApplicationManager';
import BaseApplication from '../BaseApplication';
import ApplicationCustomizerLoader from '../extensibility/ApplicationCustomizerLoader';
import SPPageChrome from '../pageChrome/SPPageChrome';
import SPThemeProvider from '../pageChrome/SPThemeProvider';
import { NavigationOperation } from './INavigationResult';
var NavigationOrchestrator = (function () {
    function NavigationOrchestrator(serviceScope, applicationManager, navigator) {
        Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        this._serviceScope = serviceScope;
        this._applicationManager = applicationManager || new ApplicationManager(serviceScope, navigator);
        this._pageContext = serviceScope.consume(PageContext.serviceKey);
        this._applicationCustomizerLoader = new ApplicationCustomizerLoader(serviceScope);
    }
    NavigationOrchestrator.raiseNavigatedEvent = function () {
        _SPEventManager.instance.raiseStickyEvent(BaseApplication._navigatedEventName, {});
    };
    NavigationOrchestrator.prototype.navigate = function (preloadedData) {
        var _this = this;
        if (!_SPLoaderFlights._useNewBootSequence()) {
            if (!this._applicationManager.currentApplicationId.equals(Guid.empty) &&
                !this._applicationManager.currentApplicationId.equals(
                Guid.tryParse(preloadedData.clientSideApplicationId) || Guid.empty)) {
                return Promise.resolve({
                    preloadedData: preloadedData,
                    application: undefined,
                    operation: NavigationOperation.Unsupported
                });
            }
        }
        this._fixPreloadedDataItem(preloadedData);
        var isCrossSite = this._isCrossSite(preloadedData, this._pageContext);
        var pageChrome = undefined;
        this._pageContext.initialize(SharePointPageContextDataProvider._createPageContextData(preloadedData.spPageContextInfo), preloadedData.spPageContextInfo);
        _ManifestStore.instance.replaceManifests(preloadedData.manifests);
        if (!ApplicationManager._isChromelessApplication(preloadedData.clientSideApplicationId)) {
            pageChrome = new SPPageChrome(this._serviceScope);
        }
        if (_SPKillSwitch.isActivated(NavigationOrchestrator.DELAY_APP_CUSTOMIZER_KILLSWITCH, '2018/10/19', 'Delay loading app customizers')) {
            this._loadApplicationCustomizers(preloadedData);
        }
        if (isCrossSite) {
            if (!ApplicationManager._isChromelessApplication(preloadedData.clientSideApplicationId)) {
                var themeProvider = new SPThemeProvider(this._serviceScope);
                themeProvider.loadThemedStyles();
            }
        }
        this._updateTelemetry(preloadedData);
        preloadedData.spPageContextInfo = undefined;
        Session._changePage();
        NavigationOrchestrator.raiseNavigatedEvent();
        if (_SPLoaderFlights._useNewBootSequence()) {
            if (this._applicationManager.currentApplicationId.equals(Guid.tryParse(preloadedData.clientSideApplicationId) || Guid.empty)) {
                if (!_SPKillSwitch.isActivated(NavigationOrchestrator.DELAY_APP_CUSTOMIZER_KILLSWITCH, '2018/10/19', 'Delay loading app customizers')) {
                    this._loadApplicationCustomizers(preloadedData);
                }
                return Promise.resolve({
                    preloadedData: preloadedData,
                    application: this._applicationManager.currentApplication,
                    operation: NavigationOperation.UpdateContext
                });
            }
            else {
                return this._applicationManager.startApplication(preloadedData, pageChrome).then(function (application) {
                    if (!_SPKillSwitch.isActivated(NavigationOrchestrator.DELAY_APP_CUSTOMIZER_KILLSWITCH, '2018/10/19', 'Delay loading app customizers')) {
                        _this._loadApplicationCustomizers(preloadedData);
                    }
                    return Promise.resolve({
                        preloadedData: preloadedData,
                        application: application,
                        operation: NavigationOperation.LoadApplication
                    });
                });
            }
        }
        else {
            return Promise.resolve({
                preloadedData: preloadedData,
                application: undefined,
                operation: NavigationOperation.UpdateContext
            });
        }
    };
    NavigationOrchestrator.prototype._loadApplicationCustomizers = function (preloadedData) {
        if (preloadedData.clientSideApplicationId !== NavigationOrchestrator.classicPagesComponentId &&
            preloadedData.clientSideApplicationId !== NavigationOrchestrator.workbenchComponentId) {
            _TraceLogger.logVerbose(NavigationOrchestrator._logSource, 'Loading application customizers');
            return this._applicationCustomizerLoader.loadExtensions(preloadedData.customActions);
        }
        else {
            _TraceLogger.logVerbose(NavigationOrchestrator._logSource, 'Application Customizer is not supported for classic pages and workbench.');
            return Promise.resolve();
        }
    };
    NavigationOrchestrator.prototype._updateTelemetry = function (preloadedData) {
        var _a = this._pageContext.legacyPageContext, siteId = _a.siteId, webId = _a.webId;
        var emptyIdValueForMerge = ''; 
        var listId = (this._pageContext.list && this._pageContext.list.id.toString()) ||
            emptyIdValueForMerge;
        var uniqueId = (preloadedData.item && preloadedData.item.UniqueId) ||
            emptyIdValueForMerge;
        _Telemetry.updateSettings({
            siteId: siteId,
            webId: webId,
            listId: listId,
            listItemUniqueId: uniqueId
        });
        _Diagnostics.updateSettings({
            siteId: siteId,
            webId: webId,
            listId: listId,
            listItemUniqueId: uniqueId
        });
    };
    NavigationOrchestrator.prototype._isCrossSite = function (preloadedData, pageContext) {
        if (!pageContext.isInitialized) {
            return false;
        }
        return !Guid.parse(preloadedData.spPageContextInfo.webId).equals(pageContext.web.id) ||
            !Guid.parse(preloadedData.spPageContextInfo.siteId).equals(pageContext.site.id);
    };
    NavigationOrchestrator.prototype._fixPreloadedDataItem = function (preloadedData) {
        var INVALID_PAGE_ITEM_ID = -1;
        if (preloadedData.spPageContextInfo.pageItemId === INVALID_PAGE_ITEM_ID &&
            preloadedData.item &&
            preloadedData.item.ID !== INVALID_PAGE_ITEM_ID) {
            preloadedData.spPageContextInfo.pageItemId = preloadedData.item.ID;
        }
        return preloadedData;
    };
    NavigationOrchestrator.DELAY_APP_CUSTOMIZER_KILLSWITCH = Guid.parse('dcd3b7d3-b49f-4f19-9a79-811393b890a6');
    NavigationOrchestrator.classicPagesComponentId = 'eb4b666b-5c29-4dad-9a99-23613f21a2b7';
    NavigationOrchestrator.workbenchComponentId = '8be81a5c-af38-4bb2-af97-afa3b64dfbed';
    NavigationOrchestrator._logSource = _LogSource.create('NavigationOrchestrator');
    return NavigationOrchestrator;
}());
export default NavigationOrchestrator;

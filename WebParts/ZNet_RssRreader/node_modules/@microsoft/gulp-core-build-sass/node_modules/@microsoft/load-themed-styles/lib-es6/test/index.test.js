/// <reference types="mocha" />
import { expect } from 'chai';
import { detokenize, loadTheme, splitStyles, loadStyles, configureLoadStyles } from './../index';
describe('detokenize', function () {
    it('handles colors', function () {
        expect(detokenize('"[theme:name, default: #FFF]"')).to.equal('#FFF');
        expect(detokenize('"[theme: name, default: #FFF]"')).to.equal('#FFF');
        expect(detokenize('"[theme: name , default: #FFF  ]"')).to.equal('#FFF');
    });
    it('handles rgba', function () {
        expect(detokenize('"[theme:name, default: rgba(255,255,255,.5)]"')).to.equal('rgba(255,255,255,.5)');
    });
    it('handles fonts', function () {
        expect(detokenize('"[theme:name, default: "Segoe UI"]"')).to.equal('"Segoe UI"');
    });
    it('respects theme', function () {
        loadTheme({
            color: 'red'
        });
        try {
            expect(detokenize('"[theme:color, default: #FFF]"')).to.equal('red');
            expect(detokenize('"[theme: color , default: #FFF]"')).to.equal('red');
        }
        finally {
            loadTheme(undefined);
        }
    });
    it('ignores malformed themes', function () {
        expect(detokenize('"[theme:name, default: "Segoe UI"]')).to.equal('"[theme:name, default: "Segoe UI"]');
        expect(detokenize('"[theme:]"')).to.equal('"[theme:]"');
    });
    it('translates missing themes', function () {
        expect(detokenize('"[theme:name]"')).to.equal('inherit');
    });
    it('splits non-themable CSS', function () {
        var cssString = '.sampleClass\n{\n color: #FF0000;\n}\n';
        var arr = splitStyles(cssString);
        expect(arr.length).to.equal(1);
        expect(arr[0].rawString).to.equal(cssString);
    });
    it('splits themable CSS', function () {
        var arr = splitStyles('.firstClass { color: "[theme: firstColor ]";}\n' +
            ' .secondClass { color: "[theme:secondColor, default: #AAA]";}\n .coach { color: #333; }');
        expect(arr.length).to.equal(5);
        for (var i = 0; i < arr.length; i++) {
            if (i % 2 === 0) {
                expect(typeof arr[i].rawString).to.equal('string');
            }
            else {
                expect(typeof arr[i].theme).to.equal('string');
            }
        }
    });
    it('passes the styles to loadStyles override callback', function () {
        var expected = 'xxx.foo { color: #FFF }xxx';
        var subject = undefined;
        var callback = function (str) {
            subject = 'xxx' + str + 'xxx';
        };
        configureLoadStyles(callback);
        loadStyles('.foo { color: "[theme:fooColor, default: #FFF]" }');
        expect(subject).to.equal(expected);
        configureLoadStyles(undefined);
    });
});
//# sourceMappingURL=index.test.js.map
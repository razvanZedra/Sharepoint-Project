{"version":3,"file":"TypeScriptMessageFormatter.js","sourceRoot":"","sources":["../../src/utils/TypeScriptMessageFormatter.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAI3D;IACE;;OAEG;IACI,MAAM,CAAC,MAAM,CAAC,WAA+C;QAClE,MAAM,eAAe,GAAa,EAAE,CAAC;QACrC,GAAG,CAAC,CACF,IAAI,kBAAkB,GAAmD,WAAW,EACpF,kBAAkB,KAAK,SAAS,EAChC,kBAAkB,GAAI,kBAAgD,CAAC,IAAI,EAC3E,CAAC;YACD,EAAE,CAAC,CAAC,OAAO,kBAAkB,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC3C,eAAe,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YAC3C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,eAAe,CAAC,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;YACvD,CAAC;QACH,CAAC;QAED,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;CACF;AApBD,gEAoBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\n\r\nexport class TypeScriptMessageFormatter {\r\n  /**\r\n   * Format a TypeScript diagnostic message or message chain.\r\n   */\r\n  public static format(messageText: string | ts.DiagnosticMessageChain): string {\r\n    const formattedErrors: string[] = [];\r\n    for (\r\n      let wrappedMessageText: string | ts.DiagnosticMessageChain | undefined = messageText;\r\n      wrappedMessageText !== undefined;\r\n      wrappedMessageText = (wrappedMessageText as ts.DiagnosticMessageChain).next\r\n    ) {\r\n      if (typeof wrappedMessageText === 'string') {\r\n        formattedErrors.push(wrappedMessageText);\r\n      } else {\r\n        formattedErrors.push(wrappedMessageText.messageText);\r\n      }\r\n    }\r\n\r\n    return formattedErrors.join('; ');\r\n  }\r\n}\r\n"]}
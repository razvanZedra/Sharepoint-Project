{
  "kind": "package",
  "name": "@microsoft/sp-component-base",
  "summary": [
    {
      "kind": "text",
      "text": "SharePoint Framework support for building client-side components"
    }
  ],
  "remarks": [
    {
      "kind": "text",
      "text": "This package supports development of client-side components (e.g. web parts, client-side extensions, and applications) built using the SharePoint Framework. It defines the base classes and interfaces for functionality that is common across all client-side component types."
    }
  ],
  "exports": {
    "BaseComponent": {
      "kind": "class",
      "extends": "",
      "implements": "ISPEventObserver",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The base class for client-side components such as BaseClientSideWebPart or BaseExtension."
        }
      ],
      "remarks": [
        {
          "kind": "text",
          "text": "The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the BaseComponent class."
        },
        {
          "kind": "paragraph"
        }
      ],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentId": {
          "kind": "property",
          "signature": "readonly componentId: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the component identifier as defined in the component’s associated manifest."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "Each client-side component has an associated manifest that is used by the sp-loader to load its scripts, and which may include additional metadata about the component. The manifest is uniquely identified using a text string containing a lower case GUID value."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "context": {
          "kind": "property",
          "signature": "protected context: BaseComponentContext;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "BaseComponentContext",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Use the context object to access common services and state associated with the component."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "Child classes are expected to override this field by redeclaring it with a specialized type. It is meant to be a read-only property; the type cannot be declared as read-only in the base class (because it is initialized outside the constructor), but child classes should redeclare it as readonly."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dispose": {
          "kind": "method",
          "signature": "dispose(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Disposes the component."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "Third-party code generally does not need to call this method; it's invoked automatically when the lifecycle ends for a web part or extension. To perform custom cleanup when your component is disposed, override the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "BaseComponent.onDispose"
                }
              ],
              "target": {
                "scopeName": "@microsoft",
                "packageName": "sp-component-base",
                "exportName": "BaseComponent",
                "memberName": "onDispose"
              }
            },
            {
              "kind": "text",
              "text": " method."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "instanceId": {
          "kind": "property",
          "signature": "readonly instanceId: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A unique identifier for the instance of the component."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "A component implementation can be loaded multiple times on the page. For example, if the component is a charting web part, multiple instances of this web part could be added to the SharePoint canvas. The instanceId uniquely identifies each of these instances."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDisposed": {
          "kind": "property",
          "signature": "readonly isDisposed: boolean;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns true if the component has been already disposed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "manifest": {
          "kind": "property",
          "signature": "readonly manifest: IClientSideComponentManifest;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "IClientSideComponentManifest",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Provides access to the manifest for the client-side component."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "Child classes can override this with more specialized manifest types."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDispose": {
          "kind": "method",
          "signature": "protected onDispose(): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This event method is called at the end of the component's lifecycle. It provides an opportunity to release any associated resources, cancel any outstanding requests, etc."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "BaseComponentContext": {
      "kind": "class",
      "extends": "",
      "implements": "IDisposable",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The base class for context objects for client-side components."
        }
      ],
      "remarks": [
        {
          "kind": "text",
          "text": "The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the BaseComponentContext class."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "A \"context\" object is a collection of well-known services and other objects that are likely to be needed by business logic that interacts with a associated component. Each component type has its own specialized subclass of BaseComponentContext, e.g. WebPartContext for web parts, ExtensionContext for client-side extensions, and so on."
        }
      ],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "aadHttpClientFactory": {
          "kind": "property",
          "signature": "readonly aadHttpClientFactory: AadHttpClientFactory;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "AadHttpClientFactory",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The instance of AadHttpClientFactory created for this instance of component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "aadTokenProviderFactory": {
          "kind": "property",
          "signature": "readonly aadTokenProviderFactory: AadTokenProviderFactory;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "AadTokenProviderFactory",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The instance of AadTokenProviderFactory created for this instance of component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dispose": {
          "kind": "method",
          "signature": "dispose(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Disposes the base component context."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "dynamicDataProvider": {
          "kind": "property",
          "signature": "readonly dynamicDataProvider: DynamicDataProvider;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "DynamicDataProvider",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the Dynamic Data Provider associated with the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dynamicDataSourceManager": {
          "kind": "property",
          "signature": "readonly dynamicDataSourceManager: DynamicDataSourceManager;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "DynamicDataSourceManager",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the Dynamic Data Source Manager associated with the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "graphHttpClient": {
          "kind": "property",
          "signature": "readonly graphHttpClient: GraphHttpClient;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "GraphHttpClient",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "BaseComponentContext.msGraphClientFactory"
                }
              ],
              "target": {
                "scopeName": "@microsoft",
                "packageName": "sp-component-base",
                "exportName": "BaseComponentContext",
                "memberName": "msGraphClientFactory"
              }
            },
            {
              "kind": "text",
              "text": " instead"
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "The instance of GraphHttpClient created for this instance of component"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "httpClient": {
          "kind": "property",
          "signature": "readonly httpClient: HttpClient;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "HttpClient",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The instance of HttpClient created for this instance of component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "instanceId": {
          "kind": "property",
          "signature": "readonly instanceId: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A unique identifier for the instance of the component."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "A component implementation can be loaded multiple times on the page. For example, if the component is a charting web part, multiple instances of this web part could be added to the SharePoint canvas. The instanceId uniquely identifies each of these instances."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDisposed": {
          "kind": "property",
          "signature": "readonly isDisposed: boolean;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns true if the context is disposed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "manifest": {
          "kind": "property",
          "signature": "readonly manifest: IClientSideComponentManifest;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "IClientSideComponentManifest",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Manifest for the client-side component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "msGraphClientFactory": {
          "kind": "property",
          "signature": "readonly msGraphClientFactory: MSGraphClientFactory;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "MSGraphClientFactory",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The instance of MSGraphClientFactory created for this instance of component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "pageContext": {
          "kind": "property",
          "signature": "readonly pageContext: PageContext;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "PageContext",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The page context provides standard definitions for common SharePoint objects that need to be shared between the client-side application, web parts, and other components."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "serviceScope": {
          "kind": "property",
          "signature": "readonly serviceScope: ServiceScope;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "ServiceScope",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The associated "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ServiceScope"
                }
              ],
              "target": {
                "scopeName": "@microsoft",
                "packageName": "sp-core-library",
                "exportName": "ServiceScope",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " for this component."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "A child service scope is created for each client-side component."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "spHttpClient": {
          "kind": "property",
          "signature": "readonly spHttpClient: SPHttpClient;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "SPHttpClient",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The instance of SpHttpClient created for this instance of component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "DynamicDataProvider": {
      "kind": "class",
      "extends": "",
      "implements": "IDisposable",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The Dynamic Data Provider allows components to consume Dynamic Data. It allows components to request Dynamic Data sources and register/unregister to those."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "dispose": {
          "kind": "method",
          "signature": "dispose(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Disposes the Dynamic Data Provider."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getAvailableSources": {
          "kind": "method",
          "signature": "getAvailableSources(): ReadonlyArray<IDynamicDataSource>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "ReadonlyArray<IDynamicDataSource>",
            "description": [
              {
                "kind": "text",
                "text": "Read-only array with all available sources."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a list with all available Dynamic Data Sources."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isDisposed": {
          "kind": "property",
          "signature": "readonly isDisposed: boolean;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns true if the Dynamic Data Provider is disposed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "registerAvailableSourcesChanged": {
          "kind": "method",
          "signature": "registerAvailableSourcesChanged(callback: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Function to execute when the sources are updated."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Registers a callback to an event that raises when the list of available Dynamic Data Sources is updated."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "registerPropertyChanged": {
          "kind": "method",
          "signature": "registerPropertyChanged(sourceId: string, propertyId: string, callback: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "sourceId": {
              "name": "sourceId",
              "description": [
                {
                  "kind": "text",
                  "text": "Id of the Dynamic Data Source."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "propertyId": {
              "name": "propertyId",
              "description": [
                {
                  "kind": "text",
                  "text": "Id of the property of the source."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Function to execute when the source updates its data."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Registers a callback for updates when a property is changed in a Dynamic Data source."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "registerSourceChanged": {
          "kind": "method",
          "signature": "registerSourceChanged(sourceId: string, callback: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "sourceId": {
              "name": "sourceId",
              "description": [
                {
                  "kind": "text",
                  "text": "Id of the Dynamic Data Source."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Function to execute when the source updates its data."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Registers a callback for updates when a Dynamic Data source is changed. This happens when any property is updated within the source."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "tryGetSource": {
          "kind": "method",
          "signature": "tryGetSource(id: string): IDynamicDataSource | undefined;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "IDynamicDataSource | undefined",
            "description": []
          },
          "parameters": {
            "id": {
              "name": "id",
              "description": [
                {
                  "kind": "text",
                  "text": "Id of the Dynamic Data Source."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a Dynamic Data Source, by its id. If the source is not present, it returns undefined."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "unregisterAvailableSourcesChanged": {
          "kind": "method",
          "signature": "unregisterAvailableSourcesChanged(callback: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Function to remove from the registration. Must be the same it was registered with."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Unregisters a callback to an event that raises when the list of available Dynamic Data Sources is updated."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "unregisterPropertyChanged": {
          "kind": "method",
          "signature": "unregisterPropertyChanged(sourceId: string, propertyId: string, callback: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "sourceId": {
              "name": "sourceId",
              "description": [
                {
                  "kind": "text",
                  "text": "Id of the Dynamic Data Source."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "propertyId": {
              "name": "propertyId",
              "description": [
                {
                  "kind": "text",
                  "text": "Id of the property of the source."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Function to remove from the registration. Must be the same it was registered with."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Unregisters a callback for updates when a property is changed in a Dynamic Data source."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "unregisterSourceChanged": {
          "kind": "method",
          "signature": "unregisterSourceChanged(sourceId: string, callback: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "sourceId": {
              "name": "sourceId",
              "description": [
                {
                  "kind": "text",
                  "text": "Id of the Dynamic Data Source."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Function to remove from the registration. Must be the same it was registered with."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Unregisters a callback for updates when a Dynamic Data source is changed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DynamicDataSourceManager": {
      "kind": "class",
      "extends": "",
      "implements": "IDisposable",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The Dynamic Data Source Manager is responsible for: - Constructing the dynamic data source - Allowing initialization of the dynamic data source by a component - Allowing data source to update its metadata and notify when data has been updated."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "dispose": {
          "kind": "method",
          "signature": "dispose(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Disposes the resources held by the Dynamic Data source."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "initializeSource": {
          "kind": "method",
          "signature": "initializeSource(callableFunctions: IDynamicDataCallables): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "callableFunctions": {
              "name": "callableFunctions",
              "description": [
                {
                  "kind": "text",
                  "text": "Set of methods that are exposed through the Dynamic Data Source"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "IDynamicDataCallables"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Initializes the Dynamic Data Source for the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isDisposed": {
          "kind": "property",
          "signature": "readonly isDisposed: boolean;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns true if the DynamicDataSourceManager is disposed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "notifyPropertyChanged": {
          "kind": "method",
          "signature": "notifyPropertyChanged(propertyId: string): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "propertyId": {
              "name": "propertyId",
              "description": [
                {
                  "kind": "text",
                  "text": "Id of the updated property in the source."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Notifies that this source has updated a specific property."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "When invoked, it enables to broadcast the notification to all the consumers who have registered to this notification from this source."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "notifySourceChanged": {
          "kind": "method",
          "signature": "notifySourceChanged(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Notifies that this source has updated its properties."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "When invoked, it enables to broadcast the notification to all the consumers who have registered to this notification from this source."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "sourceId": {
          "kind": "property",
          "signature": "readonly sourceId: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the Id of the current DataSource."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "updateMetadata": {
          "kind": "method",
          "signature": "updateMetadata(metadata: Partial<IDynamicDataSourceMetadata>): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "metadata": {
              "name": "metadata",
              "description": [
                {
                  "kind": "text",
                  "text": "Partial of the metadata."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Partial<IDynamicDataSourceMetadata>"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the metadata of the Dynamic Data Source. It allows to update fields like title or description. Auto-generated fields like alias, componentId or instanceId cannot be updated."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DynamicProperty": {
      "kind": "class",
      "extends": "",
      "implements": "IDisposable",
      "typeParameters": [
        "TValue"
      ],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Serializable object that simplifies usage of a DynamicProperty."
        }
      ],
      "remarks": [
        {
          "kind": "text",
          "text": "This is built for usage in web part properties, and modified through the property pane. Can be initialized with a default callback. Web parts initialize with the render method so if the 3rd party developer does nothing, a change in the DynamicProperty will re-render the web part automatically."
        }
      ],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(provider: DynamicDataProvider, callback?: () => void);",
          "parameters": {
            "provider": {
              "name": "provider",
              "description": [
                {
                  "kind": "text",
                  "text": "DynamicDataProvider."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "DynamicDataProvider"
            },
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Optional. Default callback to be registered for updates in the DynamicDataSource."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Create a new DynamicProperty object."
            }
          ],
          "remarks": []
        },
        "dispose": {
          "kind": "method",
          "signature": "dispose(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This method is called to permanently dispose the object."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "After the object has been disposed, do not call its methods or access its properties."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "hasDefaultCallback": {
          "kind": "method",
          "signature": "hasDefaultCallback(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns true if the object has a default callback."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isDisposed": {
          "kind": "property",
          "signature": "readonly isDisposed: boolean;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns true if the dispose() method has been called. Once an object is disposed, it remains in this state permanently."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "After the object has been disposed, do not call its methods or access its properties."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "reference": {
          "kind": "property",
          "signature": "readonly reference: string | undefined;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "DynamicDataReference string that the DynamicProperty object points to. The reference is of the form "
            },
            {
              "kind": "code",
              "text": "<source>:<property>:<path>",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "If the DynamicProperty is set up with static data, this returns undefined."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "register": {
          "kind": "method",
          "signature": "register(callback: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Callback function to register."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Registers a callback function for updates on the associated DynamicDataSource."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "removeDefaultCallback": {
          "kind": "method",
          "signature": "removeDefaultCallback(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Removes the registration for the default callback."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "This can be useful for advanced users who only want their custom callbacks."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setReference": {
          "kind": "method",
          "signature": "setReference(reference: string): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "reference": {
              "name": "reference",
              "description": [
                {
                  "kind": "text",
                  "text": "Id of the DynamicDataSource and property."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the value of the DynamicProperty to be a reference to a DynamicDynamicSource and property. The reference is of the form "
            },
            {
              "kind": "code",
              "text": "<source>:<property>:<path>",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setValue": {
          "kind": "method",
          "signature": "setValue(value: TValue): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [
                {
                  "kind": "text",
                  "text": "Value for the DynamicProperty."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "TValue"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets a static value in the DynamicProperty."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "tryGetSource": {
          "kind": "method",
          "signature": "tryGetSource(): IDynamicDataSource | undefined;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "IDynamicDataSource | undefined",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the DynamicDataSource that the DynamicProperty object refers to. Returns undefined if the source doesn't exist."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "tryGetValue": {
          "kind": "method",
          "signature": "tryGetValue(): TValue | undefined;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "TValue | undefined",
            "description": [
              {
                "kind": "text",
                "text": "the value associated with the dynamic property or undefined if the source or the data doesn't exist."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the value of the object."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "If the value is an array, then the first element of the array is returned; otherwise, the value itself is returned."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "NOTE: This api will never return an array. To retrieve an array value, use the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "DynamicProperty.tryGetValues"
                }
              ],
              "target": {
                "scopeName": "@microsoft",
                "packageName": "sp-component-base",
                "exportName": "DynamicProperty",
                "memberName": "tryGetValues"
              }
            },
            {
              "kind": "text",
              "text": " API."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "tryGetValues": {
          "kind": "method",
          "signature": "tryGetValues(): TValue[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "TValue[]",
            "description": [
              {
                "kind": "text",
                "text": "the value associated with the dynamic property or an empty array if the source or the data doesn't exist."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the value of the object."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "If the value is NOT an array, then an array is returned with the value being the single entry; otherwise, the value itself is returned. If the property is undefined or cannot be found, an empty array will be returned."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "NOTE: This api will always return an array and it assumes that the array is homogeneous. To retrieve a non-array value, use the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "DynamicProperty.tryGetValue"
                }
              ],
              "target": {
                "scopeName": "@microsoft",
                "packageName": "sp-component-base",
                "exportName": "DynamicProperty",
                "memberName": "tryGetValue"
              }
            },
            {
              "kind": "text",
              "text": " API."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "unregister": {
          "kind": "method",
          "signature": "unregister(callback: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Callback function to unregister."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Unregisters a callback function for updates on the associated DynamicDataSource. The callback function must be the same it was registered with."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "IFontStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Font styles for different sizes."
        }
      ],
      "remarks": [],
      "isBeta": true,
      "isSealed": false,
      "members": {
        "large": {
          "kind": "property",
          "signature": "large: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Large font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "medium": {
          "kind": "property",
          "signature": "medium: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Medium font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "mediumPlus": {
          "kind": "property",
          "signature": "mediumPlus: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Larger than medium but smaller than large font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "mega": {
          "kind": "property",
          "signature": "mega: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Mega sized font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "small": {
          "kind": "property",
          "signature": "small: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Small font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "smallPlus": {
          "kind": "property",
          "signature": "smallPlus: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Larger than small but smaller than medium font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "superLarge": {
          "kind": "property",
          "signature": "superLarge: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Super large font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "tiny": {
          "kind": "property",
          "signature": "tiny: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Tiny font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "xLarge": {
          "kind": "property",
          "signature": "xLarge: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Extra large font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "xSmall": {
          "kind": "property",
          "signature": "xSmall: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Extra small font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "xxLarge": {
          "kind": "property",
          "signature": "xxLarge: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Extra extra large font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPalette": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Color palette."
        }
      ],
      "remarks": [],
      "isBeta": true,
      "isSealed": false,
      "members": {
        "accent": {
          "kind": "property",
          "signature": "accent: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for the accent."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "black": {
          "kind": "property",
          "signature": "black: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for the strongest color, which is black in the default theme. This is a very light color in inverted themes."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "blackTranslucent40": {
          "kind": "property",
          "signature": "blackTranslucent40: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for blackTranslucent40."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "blue": {
          "kind": "property",
          "signature": "blue: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for blue."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "blueDark": {
          "kind": "property",
          "signature": "blueDark: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for blueDark."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "blueLight": {
          "kind": "property",
          "signature": "blueLight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for blueLight."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "blueMid": {
          "kind": "property",
          "signature": "blueMid: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for blueMid."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "green": {
          "kind": "property",
          "signature": "green: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for green."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "greenDark": {
          "kind": "property",
          "signature": "greenDark: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for greenDark."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "greenLight": {
          "kind": "property",
          "signature": "greenLight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for greenLight."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "magenta": {
          "kind": "property",
          "signature": "magenta: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for magenta."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "magentaDark": {
          "kind": "property",
          "signature": "magentaDark: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for magentaDark."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "magentaLight": {
          "kind": "property",
          "signature": "magentaLight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for magentaLight."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralDark": {
          "kind": "property",
          "signature": "neutralDark: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralDark."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralLight": {
          "kind": "property",
          "signature": "neutralLight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralLight."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralLighter": {
          "kind": "property",
          "signature": "neutralLighter: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralLighter."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralLighterAlt": {
          "kind": "property",
          "signature": "neutralLighterAlt: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralLighterAlt."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralPrimary": {
          "kind": "property",
          "signature": "neutralPrimary: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralPrimary."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralPrimaryAlt": {
          "kind": "property",
          "signature": "neutralPrimaryAlt: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralPrimaryAlt."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralQuaternary": {
          "kind": "property",
          "signature": "neutralQuaternary: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralQuaternary."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralQuaternaryAlt": {
          "kind": "property",
          "signature": "neutralQuaternaryAlt: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralQuaternaryAlt."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralSecondary": {
          "kind": "property",
          "signature": "neutralSecondary: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralSecondary."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralTertiary": {
          "kind": "property",
          "signature": "neutralTertiary: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralTertiary."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralTertiaryAlt": {
          "kind": "property",
          "signature": "neutralTertiaryAlt: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralTertiaryAlt."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "orange": {
          "kind": "property",
          "signature": "orange: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for orange."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "orangeLight": {
          "kind": "property",
          "signature": "orangeLight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for orangeLight."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "orangeLighter": {
          "kind": "property",
          "signature": "orangeLighter: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for orangeLighter."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "purple": {
          "kind": "property",
          "signature": "purple: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for purple."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "purpleDark": {
          "kind": "property",
          "signature": "purpleDark: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for purpleDark."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "purpleLight": {
          "kind": "property",
          "signature": "purpleLight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for purpleLight."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "red": {
          "kind": "property",
          "signature": "red: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for red."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "redDark": {
          "kind": "property",
          "signature": "redDark: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for redDark."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "teal": {
          "kind": "property",
          "signature": "teal: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for teal."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "tealDark": {
          "kind": "property",
          "signature": "tealDark: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for tealDark."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "tealLight": {
          "kind": "property",
          "signature": "tealLight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for tealLight."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "themeDark": {
          "kind": "property",
          "signature": "themeDark: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for themeDark."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "themeDarkAlt": {
          "kind": "property",
          "signature": "themeDarkAlt: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for themeDarkAlt."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "themeDarker": {
          "kind": "property",
          "signature": "themeDarker: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for themeDarker."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "themeLight": {
          "kind": "property",
          "signature": "themeLight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for themeLight."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "themeLighter": {
          "kind": "property",
          "signature": "themeLighter: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for themeLighter."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "themeLighterAlt": {
          "kind": "property",
          "signature": "themeLighterAlt: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for themeLighterAlt."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "themePrimary": {
          "kind": "property",
          "signature": "themePrimary: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for themePrimary."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "themeSecondary": {
          "kind": "property",
          "signature": "themeSecondary: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for themeSecondary."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "themeTertiary": {
          "kind": "property",
          "signature": "themeTertiary: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for themeTertiary."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "white": {
          "kind": "property",
          "signature": "white: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for the softest color, which is white in the default theme. This is a very dark color in dark themes. This is the page background."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "whiteTranslucent40": {
          "kind": "property",
          "signature": "whiteTranslucent40: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for whiteTranslucent40"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "yellow": {
          "kind": "property",
          "signature": "yellow: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for yellow."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "yellowLight": {
          "kind": "property",
          "signature": "yellowLight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for yellowLight."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IReadonlyFontStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Font styles for different sizes."
        }
      ],
      "remarks": [],
      "isBeta": true,
      "isSealed": false,
      "members": {
        "large": {
          "kind": "property",
          "signature": "large: IReadonlyRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IReadonlyRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Large font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "medium": {
          "kind": "property",
          "signature": "medium: IReadonlyRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IReadonlyRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Medium font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "mediumPlus": {
          "kind": "property",
          "signature": "mediumPlus: IReadonlyRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IReadonlyRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Larger than medium but smaller than large font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "mega": {
          "kind": "property",
          "signature": "mega: IReadonlyRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IReadonlyRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Mega sized font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "small": {
          "kind": "property",
          "signature": "small: IReadonlyRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IReadonlyRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Small font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "smallPlus": {
          "kind": "property",
          "signature": "smallPlus: IReadonlyRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IReadonlyRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Larger than small but smaller than medium font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "superLarge": {
          "kind": "property",
          "signature": "superLarge: IReadonlyRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IReadonlyRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Super large font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "tiny": {
          "kind": "property",
          "signature": "tiny: IReadonlyRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IReadonlyRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Tiny font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "xLarge": {
          "kind": "property",
          "signature": "xLarge: IReadonlyRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IReadonlyRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Extra large font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "xSmall": {
          "kind": "property",
          "signature": "xSmall: IReadonlyRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IReadonlyRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Extra small font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "xxLarge": {
          "kind": "property",
          "signature": "xxLarge: IReadonlyRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IReadonlyRawStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Extra extra large font style."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IReadonlyTheme": {
      "kind": "interface",
      "extends": "Readonly",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Immutable ITheme."
        }
      ],
      "remarks": [],
      "isBeta": true,
      "isSealed": false,
      "members": {
        "fonts": {
          "kind": "property",
          "signature": "readonly fonts: Readonly<IReadonlyFontStyles>;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Readonly<IReadonlyFontStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Font styles for different sizes."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "palette": {
          "kind": "property",
          "signature": "readonly palette: Readonly<IPalette>;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Readonly<IPalette>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color palette."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "semanticColors": {
          "kind": "property",
          "signature": "readonly semanticColors: Readonly<ISemanticColors>;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Readonly<ISemanticColors>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The collection of all semantic slots for colors used in themes."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISemanticColors": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The collection of semantic slots for colors used in themes."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "## Naming Convention"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "The name of a semantic slot can quickly tell you how it’s meant to be used. It generally follows this format:"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "[category name][element name][checked state][hovered/pressed/disabled state] [category name] – The “family” that this slot belongs to. [element name] – The name of the thing being targeted, such as the background or border. [checked state] – Whether the thing is checked. We assume things are unchecked by default, so no need to specify the unchecked state. (We used “checked” to refer to anything that is on, selected, toggled, highlighted, emphasized, etc.) [hovered/pressed/disabled state] – One of these states, if applicable. Each of these states are mutually exclusive. Pressed styles overwrite hovered styles, and disabled elements cannot be hovered or pressed."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "## Base Slots"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "A basic set of slots that provide many default body styles, such as text, subtext, disabled colors, and so on. If a category doesn't provide the slot you're looking for, use one from this category. For example, the placeholder text on a text input field has no corresponding slot in its category, so you'd use the bodySubtextColor from this category."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "## Invariants"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "When color has meaning, we do not want to change the color much theme to theme. For example, we will always want errors to be some shade of red, but we will need to tweak the exact shade so it's legible depending on whether it's an inverted theme or not. Invariant colors should almost never be changed by the theme, the defaults should suffice."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "## Input Controls"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "This category contains input components commonly used to denote state, including radio buttons, check boxes, toggle switches, sliders, progress bars, and more."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "## Buttons"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Buttons! And all the flavors thereof."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "## Menus"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Any kind of popup menus uses this category."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "## Lists"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Lists differ from menus in that they are designed to show infinite amounts of items, often scroll, and have a large and complex interaction surface. This category covers all kinds of lists, whether they're typical one-item-per-row lists (like DetailsList) or ones with a tiled layout."
        }
      ],
      "remarks": [],
      "isBeta": true,
      "isSealed": false,
      "members": {
        "actionLink": {
          "kind": "property",
          "signature": "actionLink: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Neutral colored links and links for action buttons."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "actionLinkHovered": {
          "kind": "property",
          "signature": "actionLinkHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Hover state for neutral colored links and links for action buttons."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "blockingBackground": {
          "kind": "property",
          "signature": "blockingBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background for blocking issues, which is more severe than a warning, but not as bad as an error."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bodyBackground": {
          "kind": "property",
          "signature": "bodyBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default color for backgrounds."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bodyDivider": {
          "kind": "property",
          "signature": "bodyDivider: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Divider lines; e.g. lines that separate sections in a menu, an "
            },
            {
              "kind": "html-tag",
              "token": "<HR>"
            },
            {
              "kind": "text",
              "text": " element."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bodyFrameBackground": {
          "kind": "property",
          "signature": "bodyFrameBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The color for chrome adjacent to an area with bodyBackground. This can be used to provide visual separation of zones when using stronger colors, when using a divider line is not desired. In most themes, this should match the color of bodyBackground. See also: bodyFrameDivider"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bodyFrameDivider": {
          "kind": "property",
          "signature": "bodyFrameDivider: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used as the border between a zone with bodyFrameBackground and a zone with bodyBackground. If bodyBackground and bodyFrameBackground are different, this should be the same color as bodyFrameBackground in order to visually disappear. See also: bodyFrameBackground"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bodyStandoutBackground": {
          "kind": "property",
          "signature": "bodyStandoutBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The standout color for highlighted content backgrounds. For highlighted content when there is no emphasis, use the neutral variant instead. This should be a shade darker than bodyBackground in light themes, and a shade lighter in inverted themes."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bodySubtext": {
          "kind": "property",
          "signature": "bodySubtext: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "De-emphasized text; e.g. metadata, captions, placeholder text."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bodyText": {
          "kind": "property",
          "signature": "bodyText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default color for text."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bodyTextChecked": {
          "kind": "property",
          "signature": "bodyTextChecked: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Checked text color, e.g. selected menu item text."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonBackground": {
          "kind": "property",
          "signature": "buttonBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background of a standard button"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonBackgroundChecked": {
          "kind": "property",
          "signature": "buttonBackgroundChecked: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background of a checked standard button; e.g. bold/italicize/underline text button in toolbar"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonBackgroundCheckedHovered": {
          "kind": "property",
          "signature": "buttonBackgroundCheckedHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background of a checked and hovered standard button; e.g. bold/italicize/underline text button in toolbar"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonBackgroundHovered": {
          "kind": "property",
          "signature": "buttonBackgroundHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background of a hovered standard button"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonBackgroundPressed": {
          "kind": "property",
          "signature": "buttonBackgroundPressed: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background of a pressed standard button; i.e. currently being clicked by mouse"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonBorder": {
          "kind": "property",
          "signature": "buttonBorder: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Border of a standard button"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonBorderDisabled": {
          "kind": "property",
          "signature": "buttonBorderDisabled: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Border of a disabled standard button"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonText": {
          "kind": "property",
          "signature": "buttonText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of text in a standard button"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonTextChecked": {
          "kind": "property",
          "signature": "buttonTextChecked: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of text in a checked standard button"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonTextCheckedHovered": {
          "kind": "property",
          "signature": "buttonTextCheckedHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of text in a checked and hovered standard button"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonTextDisabled": {
          "kind": "property",
          "signature": "buttonTextDisabled: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of text in a disabled standard button"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonTextHovered": {
          "kind": "property",
          "signature": "buttonTextHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of text in a hovered standard button"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonTextPressed": {
          "kind": "property",
          "signature": "buttonTextPressed: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of text in a pressed standard button; i.e. currently being clicked by mouse"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabledBackground": {
          "kind": "property",
          "signature": "disabledBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default color for backgrounds of disabled controls; e.g. disabled text field."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabledBodyText": {
          "kind": "property",
          "signature": "disabledBodyText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default color for disabled text on the default background (bodyBackground)."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabledSubtext": {
          "kind": "property",
          "signature": "disabledSubtext: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Disabled de-emphasized text, for use on disabledBackground."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabledText": {
          "kind": "property",
          "signature": "disabledText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default color for disabled text on top of disabledBackground; e.g. text in a disabled text field, disabled button text."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "errorBackground": {
          "kind": "property",
          "signature": "errorBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background for errors, if necessary, or highlighting the section of the page where the error is present."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "errorText": {
          "kind": "property",
          "signature": "errorText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default color of error text, used on bodyBackground."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focusBorder": {
          "kind": "property",
          "signature": "focusBorder: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The color of the outline around focused controls that don't already have a border; e.g. menu items"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputBackground": {
          "kind": "property",
          "signature": "inputBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background color of an input, e.g. textbox background."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputBackgroundChecked": {
          "kind": "property",
          "signature": "inputBackgroundChecked: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background of a checked control; e.g. checked radio button's dot, checked toggle's background."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputBackgroundCheckedHovered": {
          "kind": "property",
          "signature": "inputBackgroundCheckedHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background of a checked and hovered control; e.g. checked checkbox's background color on hover."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputBorder": {
          "kind": "property",
          "signature": "inputBorder: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The border of a large input control in its resting, state; e.g. the box of dropdown."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputBorderHovered": {
          "kind": "property",
          "signature": "inputBorderHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The border color of a large hovered input control, such as textbox."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputFocusBorderAlt": {
          "kind": "property",
          "signature": "inputFocusBorderAlt: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The alternate focus border color for elements that already have a border; e.g. text field borders on focus."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputForegroundChecked": {
          "kind": "property",
          "signature": "inputForegroundChecked: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The foreground of a checked control; e.g. checked checkbox's checkmark color, checked toggle's thumb color, radio button's background color around the dot."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputPlaceholderText": {
          "kind": "property",
          "signature": "inputPlaceholderText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The color of placeholder text."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "link": {
          "kind": "property",
          "signature": "link: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The color of a link."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "linkHovered": {
          "kind": "property",
          "signature": "linkHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The color of a hovered link. Also used when the link is active."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listBackground": {
          "kind": "property",
          "signature": "listBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background color for the entire list."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listHeaderBackgroundHovered": {
          "kind": "property",
          "signature": "listHeaderBackgroundHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background color for a hovered list header."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listHeaderBackgroundPressed": {
          "kind": "property",
          "signature": "listHeaderBackgroundPressed: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background color for a pressed list header."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listItemBackgroundChecked": {
          "kind": "property",
          "signature": "listItemBackgroundChecked: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background color of a checked list item."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listItemBackgroundCheckedHovered": {
          "kind": "property",
          "signature": "listItemBackgroundCheckedHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background color of a checked and hovered list item."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listItemBackgroundHovered": {
          "kind": "property",
          "signature": "listItemBackgroundHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background color of a hovered list item."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listText": {
          "kind": "property",
          "signature": "listText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default text color for list item titles and text in column fields."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listTextColor": {
          "kind": "property",
          "signature": "listTextColor: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "This slot was incorrectly named. Use listText instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated. Do not use."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuHeader": {
          "kind": "property",
          "signature": "menuHeader: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The headers in menus that denote title of a section."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuIcon": {
          "kind": "property",
          "signature": "menuIcon: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default colors of icons in menus."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuItemBackgroundChecked": {
          "kind": "property",
          "signature": "menuItemBackgroundChecked: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "(Checked menu items no longer get a background color.) The background of checked menu item; e.g. a menu item whose submenu is open, a selected dropdown item."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated. Do not use."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuItemBackgroundHovered": {
          "kind": "property",
          "signature": "menuItemBackgroundHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background of a hovered menu item."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryButtonBackground": {
          "kind": "property",
          "signature": "primaryButtonBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background of a primary button"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryButtonBackgroundHovered": {
          "kind": "property",
          "signature": "primaryButtonBackgroundHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background of a hovered primary button"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryButtonBackgroundPressed": {
          "kind": "property",
          "signature": "primaryButtonBackgroundPressed: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background of a pressed primary button; i.e. currently being clicked by mouse"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryButtonBorder": {
          "kind": "property",
          "signature": "primaryButtonBorder: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Border of a primary button"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryButtonText": {
          "kind": "property",
          "signature": "primaryButtonText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of text in a primary button"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryButtonTextHovered": {
          "kind": "property",
          "signature": "primaryButtonTextHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of text in a hovered primary button"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryButtonTextPressed": {
          "kind": "property",
          "signature": "primaryButtonTextPressed: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of text in a pressed primary button; i.e. currently being clicked by mouse"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "smallInputBorder": {
          "kind": "property",
          "signature": "smallInputBorder: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The border of a small input control in its resting unchecked state; e.g. the box of an unchecked checkbox."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "successBackground": {
          "kind": "property",
          "signature": "successBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background for success"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "variantBorder": {
          "kind": "property",
          "signature": "variantBorder: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The color of the border that provides contrast between an element, such as a card, and an emphasized background."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "warningBackground": {
          "kind": "property",
          "signature": "warningBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background for warning messages."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "warningHighlight": {
          "kind": "property",
          "signature": "warningHighlight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Foreground color for warning highlights"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "warningText": {
          "kind": "property",
          "signature": "warningText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The color of text on errorBackground, warningBackground, blockingBackground, or successBackground."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITheme": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Collection of theme values, which can be used to programatically style components."
        }
      ],
      "remarks": [],
      "isBeta": true,
      "isSealed": false,
      "members": {
        "disableGlobalClassNames": {
          "kind": "property",
          "signature": "disableGlobalClassNames: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Diables global styles on Fabric components. This will prevent global overrides that might have been set by other Fabric users from applying to your components."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "This has a vary narrow use case and most likely should be avoided."
            }
          ],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "fonts": {
          "kind": "property",
          "signature": "fonts: IFontStyles;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IFontStyles",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Font styles for different sizes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isInverted": {
          "kind": "property",
          "signature": "isInverted: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates whether the theme is inverted."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "palette": {
          "kind": "property",
          "signature": "palette: IPalette;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IPalette",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color palette."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "semanticColors": {
          "kind": "property",
          "signature": "semanticColors: ISemanticColors;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISemanticColors",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The collection of all semantic slots for colors used in themes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ThemeChangedEventArgs": {
      "kind": "class",
      "extends": "SPEventArgs",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The object passed when the IThemeProvider.themeChangedEvent is raised."
        }
      ],
      "remarks": [],
      "isBeta": true,
      "isSealed": false,
      "members": {
        "theme": {
          "kind": "property",
          "signature": "readonly theme: ITheme | undefined;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "ITheme | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The new theme. If the value is undefined, then the theme was cleared."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ThemeProvider": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The ThemeProvider class provides the capability to get different themes from the Framework. Themes can be provided in different contexts, e.g. Canvas sections may provide a variant of the global theme in some contexts."
        }
      ],
      "remarks": [],
      "isBeta": true,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(serviceScope: ServiceScope, theme?: ITheme);",
          "parameters": {
            "serviceScope": {
              "name": "serviceScope",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ServiceScope"
            },
            "theme": {
              "name": "theme",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "ITheme"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ThemeProvider"
                }
              ],
              "target": {
                "scopeName": "@microsoft",
                "packageName": "sp-component-base",
                "exportName": "ThemeProvider",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "serviceKey": {
          "kind": "property",
          "signature": "static readonly serviceKey: ServiceKey<ThemeProvider>;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": true,
          "type": "ServiceKey<ThemeProvider>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The service key for ThemeProvider."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "themeChangedEvent": {
          "kind": "property",
          "signature": "readonly themeChangedEvent: SPEvent<ThemeChangedEventArgs>;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "SPEvent<ThemeChangedEventArgs>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Raised when the theme changes with the new theme as an argument."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": true
        },
        "tryGetTheme": {
          "kind": "method",
          "signature": "tryGetTheme(): IReadonlyTheme | undefined;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "IReadonlyTheme | undefined",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If set, get the current scoped theme."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    }
  }
}

{"version":3,"file":"TscCmdTask.js","sourceRoot":"","sources":["../src/TscCmdTask.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport {\r\n  JsonFile,\r\n  FileSystem,\r\n  LegacyAdapters\r\n} from '@microsoft/node-core-library';\r\nimport * as glob from 'glob';\r\nimport * as globEscape from 'glob-escape';\r\nimport * as typescript from 'typescript';\r\nimport * as decomment from 'decomment';\r\n\r\nimport {\r\n  BaseCmdTask,\r\n  IBaseCmdTaskConfig\r\n} from './BaseCmdTask';\r\nimport { TsParseConfigHost } from './TsParseConfigHost';\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ITscCmdTaskConfig extends IBaseCmdTaskConfig {\r\n  /**\r\n   * Glob matches for files to be passed through the build.\r\n   */\r\n  staticMatch?: string[];\r\n\r\n  /**\r\n   * Removes comments from all generated `.js` files in the TSConfig outDir. Will **not** remove comments from\r\n   * generated `.d.ts` files. Defaults to false.\r\n   */\r\n  removeCommentsFromJavaScript?: boolean;\r\n}\r\n\r\n/**\r\n * @alpha\r\n */\r\nexport class TscCmdTask extends BaseCmdTask<ITscCmdTaskConfig> {\r\n  constructor() {\r\n    super(\r\n      'tsc',\r\n      {\r\n        initialTaskConfig: {\r\n          staticMatch: [\r\n            'src/**/*.js',\r\n            'src/**/*.json',\r\n            'src/**/*.jsx'\r\n          ],\r\n          removeCommentsFromJavaScript: false\r\n        },\r\n        packageName: 'typescript',\r\n        packageBinPath: path.join('bin', 'tsc')\r\n      }\r\n    );\r\n  }\r\n\r\n  public loadSchema(): Object {\r\n    return JsonFile.load(path.resolve(__dirname, 'schemas', 'tsc-cmd.schema.json'));\r\n  }\r\n\r\n  public executeTask(gulp: Object, completeCallback: (error?: string) => void): Promise<void> | undefined {\r\n    // Static passthrough files.\r\n    const srcPath: string = path.join(this.buildConfig.rootPath, this.buildConfig.srcFolder);\r\n    const libFolders: string[] = [this.buildConfig.libFolder];\r\n    if (this.buildConfig.libAMDFolder) {\r\n      libFolders.push(this.buildConfig.libAMDFolder);\r\n    }\r\n\r\n    if (this.buildConfig.libES6Folder) {\r\n      libFolders.push(this.buildConfig.libES6Folder);\r\n    }\r\n\r\n    if (this.buildConfig.libESNextFolder) {\r\n      libFolders.push(this.buildConfig.libESNextFolder);\r\n    }\r\n\r\n    const resolvedLibFolders: string[] = libFolders.map((libFolder) => path.join(this.buildConfig.rootPath, libFolder));\r\n    const promises: Promise<void>[] = (this.taskConfig.staticMatch || []).map((pattern) =>\r\n      LegacyAdapters.convertCallbackToPromise(glob, path.join(globEscape(this.buildConfig.rootPath), pattern)).then(\r\n        (matchPaths: string[]) => {\r\n          for (const matchPath of matchPaths) {\r\n            const fileContents: string = FileSystem.readFile(matchPath);\r\n            const relativePath: string = path.relative(srcPath, matchPath);\r\n            for (const resolvedLibFolder of resolvedLibFolders) {\r\n              const destPath: string = path.join(resolvedLibFolder, relativePath);\r\n              FileSystem.writeFile(destPath, fileContents, { ensureFolderExists: true });\r\n            }\r\n          }\r\n        }\r\n      )\r\n    );\r\n\r\n    let completeCallbackCalled: boolean = false;\r\n    let completeCallbackError: string | undefined;\r\n    const basePromise: Promise<void> | undefined = super.executeTask(\r\n      gulp,\r\n      (error?: string) => {\r\n        completeCallbackCalled = true;\r\n        completeCallbackError = error;\r\n      }\r\n    );\r\n\r\n    if (basePromise) {\r\n      promises.push(basePromise);\r\n    }\r\n\r\n    let buildPromise: Promise<void> = Promise.all(promises).then(() => { /* collapse void[] to void */ });\r\n\r\n    if (this.taskConfig.removeCommentsFromJavaScript === true) {\r\n      buildPromise = buildPromise.then(() => this._removeComments(this._getArgs()));\r\n    }\r\n\r\n    return buildPromise.then(() => {\r\n      if (completeCallbackCalled) {\r\n        completeCallback(completeCallbackError);\r\n      }\r\n    });\r\n  }\r\n\r\n  protected _onData(data: Buffer): void {\r\n    // Log lines separately\r\n    const dataLines: (string | undefined)[] = data.toString().split('\\n');\r\n    for (const dataLine of dataLines) {\r\n      const trimmedLine: string = (dataLine || '').trim();\r\n      if (!!trimmedLine) {\r\n        if (trimmedLine.match(/\\serror\\s/i)) {\r\n          // If the line looks like an error, log it as an error\r\n          this.logError(trimmedLine);\r\n        } else {\r\n          this.log(trimmedLine);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private _removeComments(commandLineArgs: string[]): Promise<void> {\r\n    const configFilePath: string | undefined = typescript.findConfigFile(this.buildConfig.rootPath, FileSystem.exists);\r\n    if (!configFilePath) {\r\n      return Promise.reject(new Error('Unable to resolve tsconfig file to determine outDir.'));\r\n    }\r\n\r\n    const commandLine: typescript.ParsedCommandLine = typescript.parseCommandLine(commandLineArgs);\r\n    const tsConfig: typescript.ParsedCommandLine = typescript.parseJsonConfigFileContent(\r\n      JsonFile.load(configFilePath),\r\n      new TsParseConfigHost(),\r\n      path.dirname(configFilePath),\r\n      commandLine.options\r\n    );\r\n    if (!tsConfig || !tsConfig.options.outDir) {\r\n      return Promise.reject('Unable to determine outDir from TypesScript configuration.');\r\n    }\r\n\r\n    return LegacyAdapters.convertCallbackToPromise(\r\n      glob,\r\n      path.join(globEscape(tsConfig.options.outDir), '**', '*.js')\r\n    ).then((matches: string[]) => {\r\n      for (const match of matches) {\r\n        const sourceText: string = FileSystem.readFile(match);\r\n        const decommentedText: string = decomment(\r\n          sourceText,\r\n          {\r\n            // This option preserves comments that start with /*!, /**! or //! - typically copyright comments\r\n            safe: true\r\n          }\r\n        );\r\n        FileSystem.writeFile(match, decommentedText);\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}
{"version":3,"file":"PackageJsonUpdater.js","sourceRoot":"","sources":["../../src/logic/PackageJsonUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as semver from 'semver';\r\n\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\nimport { InstallManager, IInstallManagerOptions } from './InstallManager';\r\nimport { RushConfigurationProject } from '../api/RushConfigurationProject';\r\nimport { VersionMismatchFinder } from '../api/VersionMismatchFinder';\r\nimport { PurgeManager } from './PurgeManager';\r\nimport { Utilities } from '../utilities/Utilities';\r\nimport { DependencyType, PackageJsonEditor, PackageJsonDependency } from '../api/PackageJsonEditor';\r\n\r\n/**\r\n * The type of SemVer range specifier that is prepended to the version\r\n */\r\nexport const enum SemVerStyle {\r\n  Exact = 'exact',\r\n  Caret = 'caret',\r\n  Tilde = 'tilde'\r\n}\r\n\r\n/**\r\n * Options for adding a dependency to a particular project.\r\n */\r\nexport interface IPackageJsonUpdaterRushAddOptions {\r\n  /**\r\n   * The project whose package.json should get updated\r\n   */\r\n  currentProject: RushConfigurationProject;\r\n  /**\r\n   * The name of the dependency to be added\r\n   */\r\n  packageName: string;\r\n  /**\r\n   * The initial version specifier.\r\n   * If undefined, the latest version will be used (that doesn't break ensureConsistentVersions).\r\n   * If specified, the latest version meeting the SemVer specifier will be used as the basis.\r\n   */\r\n  initialVersion: string | undefined;\r\n  /**\r\n   * Whether or not this dependency should be added as a devDependency or a regular dependency.\r\n   */\r\n  devDependency: boolean;\r\n  /**\r\n   * If specified, other packages that use this dependency will also have their package.json's updated.\r\n   */\r\n  updateOtherPackages: boolean;\r\n  /**\r\n   * If specified, \"rush update\" will not be run after updating the package.json file(s).\r\n   */\r\n  skipUpdate: boolean;\r\n  /**\r\n   * If specified, \"rush update\" will be run in debug mode.\r\n   */\r\n  debugInstall: boolean;\r\n  /**\r\n   * The style of range that should be used if the version is automatically detected.\r\n   */\r\n  rangeStyle: SemVerStyle;\r\n}\r\n\r\n/**\r\n * Configuration options for adding or updating a dependency in a single project\r\n */\r\nexport interface IUpdateProjectOptions {\r\n  /**\r\n   * The project which will have its package.json updated\r\n   */\r\n  project: RushConfigurationProject;\r\n  /**\r\n   * The name of the dependency to be added or updated in the project\r\n   */\r\n  packageName: string;\r\n  /**\r\n   * The new SemVer specifier that should be added to the project's package.json\r\n   */\r\n  newVersion: string;\r\n  /**\r\n   * The type of dependency that should be updated. If left empty, this will be auto-detected.\r\n   * If it cannot be auto-detected an exception will be thrown.\r\n   */\r\n  dependencyType?: DependencyType;\r\n}\r\n\r\n/**\r\n * A helper class for managing the dependencies of various package.json files.\r\n * @internal\r\n */\r\nexport class PackageJsonUpdater {\r\n  private _rushConfiguration: RushConfiguration;\r\n\r\n  public constructor(rushConfiguration: RushConfiguration) {\r\n    this._rushConfiguration = rushConfiguration;\r\n  }\r\n\r\n  /**\r\n   * Adds a dependency to a particular project. The core business logic for \"rush add\".\r\n   */\r\n  public doRushAdd(options: IPackageJsonUpdaterRushAddOptions): Promise<void> {\r\n    const {\r\n      currentProject,\r\n      packageName,\r\n      initialVersion,\r\n      devDependency,\r\n      updateOtherPackages,\r\n      skipUpdate,\r\n      debugInstall,\r\n      rangeStyle\r\n    } = options;\r\n\r\n    const implicitlyPinned: Map<string, string>\r\n      = InstallManager.collectImplicitlyPreferredVersions(this._rushConfiguration);\r\n\r\n    const version: string = this._getNormalizedVersionSpec(\r\n      packageName, initialVersion, implicitlyPinned.get(packageName), rangeStyle);\r\n\r\n    console.log();\r\n    console.log(colors.green(`Updating projects to use `)\r\n      + packageName + '@' + colors.cyan(version));\r\n    console.log();\r\n\r\n    const currentProjectUpdate: IUpdateProjectOptions = {\r\n      project: currentProject,\r\n      packageName,\r\n      newVersion: version,\r\n      dependencyType: devDependency ? DependencyType.Dev : undefined\r\n    };\r\n    this.updateProject(currentProjectUpdate);\r\n\r\n    const otherPackageUpdates: Array<IUpdateProjectOptions> = [];\r\n\r\n    if (this._rushConfiguration.ensureConsistentVersions || updateOtherPackages) {\r\n      // we need to do a mismatch check\r\n      const mismatchFinder: VersionMismatchFinder = VersionMismatchFinder.getMismatches(this._rushConfiguration);\r\n\r\n      const mismatches: Array<string> = mismatchFinder.getMismatches();\r\n      if (mismatches.length) {\r\n        if (!updateOtherPackages) {\r\n          return Promise.reject(new Error(`Adding '${packageName}@${version}' to ${currentProject.packageName}`\r\n            + ` causes mismatched dependencies. Use the \"--make-consistent\" flag to update other packages to use this`\r\n            + ` version, or do not specify a SemVer range.`));\r\n        }\r\n\r\n        // otherwise we need to go update a bunch of other projects\r\n        const mismatchedVersions: Array<string> | undefined = mismatchFinder.getVersionsOfMismatch(packageName);\r\n        if (mismatchedVersions) {\r\n          for (const mismatchedVersion of mismatchedVersions) {\r\n            for (const consumer of mismatchFinder.getConsumersOfMismatch(packageName, mismatchedVersion)!) {\r\n              if (consumer !== currentProject.packageName) {\r\n                otherPackageUpdates.push({\r\n                  project: this._rushConfiguration.getProjectByName(consumer)!,\r\n                  packageName: packageName,\r\n                  newVersion: version\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.updateProjects(otherPackageUpdates);\r\n\r\n    for (const project of this._rushConfiguration.projects) {\r\n      if (project.packageJsonEditor.saveIfModified()) {\r\n        console.log(colors.green('Wrote ') + project.packageJsonEditor.filePath);\r\n      }\r\n    }\r\n\r\n    if (skipUpdate) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    const purgeManager: PurgeManager = new PurgeManager(this._rushConfiguration);\r\n    const installManager: InstallManager = new InstallManager(this._rushConfiguration, purgeManager);\r\n    const installManagerOptions: IInstallManagerOptions = {\r\n      debug: debugInstall,\r\n      allowShrinkwrapUpdates: true,\r\n      bypassPolicy: false,\r\n      noLink: false,\r\n      fullUpgrade: false,\r\n      recheckShrinkwrap: false,\r\n      networkConcurrency: undefined,\r\n      collectLogFile: false\r\n    };\r\n\r\n    console.log();\r\n    console.log(colors.green('Running \"rush update\"'));\r\n    console.log();\r\n    return installManager.doInstall(installManagerOptions)\r\n      .then(() => {\r\n        purgeManager.deleteAll();\r\n      })\r\n      .catch((error) => {\r\n        purgeManager.deleteAll();\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Updates several projects' package.json files\r\n   */\r\n  public updateProjects(projectUpdates: Array<IUpdateProjectOptions>): void {\r\n    for (const update of projectUpdates) {\r\n      this.updateProject(update);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates a single project's package.json file\r\n   */\r\n  public updateProject(options: IUpdateProjectOptions): void {\r\n    let { dependencyType } = options;\r\n    const {\r\n      project,\r\n      packageName,\r\n      newVersion\r\n    } = options;\r\n    const packageJson: PackageJsonEditor = project.packageJsonEditor;\r\n\r\n    const oldDependency: PackageJsonDependency | undefined = packageJson.tryGetDependency(packageName);\r\n    const oldDevDependency: PackageJsonDependency | undefined = packageJson.tryGetDevDependency(packageName);\r\n\r\n    const oldDependencyType: DependencyType | undefined =\r\n      oldDevDependency ? oldDevDependency.dependencyType :\r\n      oldDependency ? oldDependency.dependencyType : undefined;\r\n\r\n    dependencyType = dependencyType || oldDependencyType || DependencyType.Regular;\r\n\r\n    packageJson.addOrUpdateDependency(packageName, newVersion, dependencyType!);\r\n  }\r\n\r\n  /**\r\n   * Selects an appropriate version number for a particular package, given an optional initial SemVer spec.\r\n   * If ensureConsistentVersions, tries to pick a version that will be consistent.\r\n   * Otherwise, will choose the latest semver matching the initialSpec and append the proper range style.\r\n   * @param packageName - the name of the package to be used\r\n   * @param initialSpec - a semver pattern that should be used to find the latest version matching the spec\r\n   * @param implicitlyPinnedVersion - the implicityly preferred (aka common/primary) version of the package in use\r\n   * @param rangeStyle - if this version is selected by querying registry, then this range specifier is prepended to\r\n   *   the selected version.\r\n   */\r\n  private _getNormalizedVersionSpec(\r\n    packageName: string,\r\n    initialSpec: string | undefined,\r\n    implicitlyPinnedVersion: string | undefined,\r\n    rangeStyle: SemVerStyle): string {\r\n\r\n    console.log(colors.gray(`Determining new version for dependency: ${packageName}`));\r\n    if (initialSpec) {\r\n      console.log(`Specified version selector: ${colors.cyan(initialSpec)}`);\r\n    } else {\r\n      console.log(`No version selector was specified, so the version will be determined automatically.`);\r\n    }\r\n    console.log();\r\n\r\n    // if ensureConsistentVersions => reuse the pinned version\r\n    // else, query the registry and use the latest that satisfies semver spec\r\n    if (initialSpec && implicitlyPinnedVersion && initialSpec === implicitlyPinnedVersion) {\r\n      console.log(colors.green('Assigning \"')\r\n        + colors.cyan(initialSpec)\r\n        + colors.green(`\" for \"${packageName}\" because it matches what other projects are using in this repo.`));\r\n      return initialSpec;\r\n    }\r\n\r\n    if (this._rushConfiguration.ensureConsistentVersions && !initialSpec && implicitlyPinnedVersion) {\r\n      console.log(`Assigning the version range \"${colors.cyan(implicitlyPinnedVersion)}\" for \"${packageName}\" because`\r\n        + ` it is already used by other projects in this repo.`);\r\n      return implicitlyPinnedVersion;\r\n    }\r\n\r\n    let selectedVersion: string | undefined;\r\n\r\n    if (this._rushConfiguration.packageManager === 'yarn') {\r\n      throw new Error('The Yarn package manager is not currently supported by the \"rush add\" command.');\r\n    }\r\n\r\n    if (initialSpec && initialSpec !== 'latest') {\r\n      console.log(colors.gray('Finding newest version that satisfies the selector: ') + initialSpec);\r\n      console.log();\r\n      console.log(`Querying registry for all versions of \"${packageName}\"...`);\r\n\r\n      const allVersions: string =\r\n        Utilities.executeCommandAndCaptureOutput(this._rushConfiguration.packageManagerToolFilename,\r\n          ['view', packageName, 'versions', '--json'],\r\n          this._rushConfiguration.commonTempFolder);\r\n\r\n      let versionList: Array<string> = JSON.parse(allVersions);\r\n      versionList = versionList.sort((a: string, b: string) => { return semver.gt(a, b) ? -1 : 1; });\r\n\r\n      console.log(colors.gray(`Found ${versionList.length} available versions.`));\r\n\r\n      for (const version of versionList) {\r\n        if (semver.satisfies(version, initialSpec)) {\r\n          selectedVersion = version;\r\n          console.log(`Found latest version: ${colors.cyan(selectedVersion)}`);\r\n          break;\r\n        }\r\n      }\r\n      if (!selectedVersion) {\r\n        throw new Error(`Unable to find a version of \"${packageName}\" that satisfies`\r\n          + ` the version range \"${initialSpec}\"`);\r\n      }\r\n    } else {\r\n      if (initialSpec !== 'latest') {\r\n        console.log(colors.gray(`The \"ensureConsistentVersions\" policy is NOT active,`\r\n          + ` so we will assign the latest version.`));\r\n        console.log();\r\n      }\r\n      console.log(`Querying NPM registry for latest version of \"${packageName}\"...`);\r\n\r\n      selectedVersion = Utilities.executeCommandAndCaptureOutput(this._rushConfiguration.packageManagerToolFilename,\r\n        ['view', `${packageName}@latest`, 'version'],\r\n        this._rushConfiguration.commonTempFolder).trim();\r\n      console.log();\r\n\r\n      console.log(`Found latest version: ${colors.cyan(selectedVersion)}`);\r\n    }\r\n\r\n    console.log();\r\n\r\n    if (rangeStyle === SemVerStyle.Caret) {\r\n      console.log(colors.grey(`Assigning version \"^${selectedVersion}\" for \"${packageName}\" because the \"--caret\"`\r\n        + ` flag was specified.`));\r\n      return '^' + selectedVersion;\r\n    } else if (rangeStyle === SemVerStyle.Exact) {\r\n      console.log(colors.grey(`Assigning version \"${selectedVersion}\" for \"${packageName}\" because the \"--exact\"`\r\n        + ` flag was specified.`));\r\n      return selectedVersion;\r\n    } else {\r\n      console.log(colors.gray(`Assigning version \"~${selectedVersion}\" for \"${packageName}\".`));\r\n      return '~' + selectedVersion!;\r\n    }\r\n  }\r\n}\r\n"]}
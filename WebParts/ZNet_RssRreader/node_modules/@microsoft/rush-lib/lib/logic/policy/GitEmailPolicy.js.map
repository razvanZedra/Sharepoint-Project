{"version":3,"file":"GitEmailPolicy.js","sourceRoot":"","sources":["../../../src/logic/policy/GitEmailPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as os from 'os';\r\n\r\nimport { RushConfiguration } from '../../api/RushConfiguration';\r\nimport { AlreadyReportedError } from '../../utilities/AlreadyReportedError';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { Git } from '../Git';\r\n\r\nexport class GitEmailPolicy {\r\n  public static validate(rushConfiguration: RushConfiguration): void {\r\n    if (!Git.isGitPresent()) {\r\n      // If Git isn't installed, or this Rush project is not under a Git working folder,\r\n      // then we don't care about the Git email\r\n      console.log(colors.cyan(\r\n        'Ignoring Git validation because the Git binary was not found in the shell path.') + os.EOL);\r\n      return;\r\n    }\r\n\r\n    if (!Git.isPathUnderGitWorkingTree()) {\r\n      // If Git isn't installed, or this Rush project is not under a Git working folder,\r\n      // then we don't care about the Git email\r\n      console.log(colors.cyan(\r\n        'Ignoring Git validation because this is not a Git working folder.' + os.EOL));\r\n      return;\r\n    }\r\n\r\n    // If there isn't a Git policy, then we don't care whether the person configured\r\n    // a Git email address at all.  This helps people who don't\r\n    if (rushConfiguration.gitAllowedEmailRegExps.length === 0) {\r\n      if (Git.tryGetGitEmail(rushConfiguration) === undefined) {\r\n        return;\r\n      }\r\n\r\n      // Otherwise, if an email *is* configured at all, then we still perform the basic\r\n      // sanity checks (e.g. no spaces in the address).\r\n    }\r\n\r\n    let userEmail: string;\r\n    try {\r\n      userEmail = Git.getGitEmail(rushConfiguration);\r\n\r\n      // sanity check; a valid email should not contain any whitespace\r\n      // if this fails, then we have another issue to report\r\n      if (!userEmail.match(/^\\S+$/g)) {\r\n        console.log([\r\n          colors.red('Your Git email address is invalid: ' + JSON.stringify(userEmail)),\r\n          '',\r\n          `To configure your Git email address, try something like this:`,\r\n          '',\r\n          ...GitEmailPolicy.getEmailExampleLines(rushConfiguration),\r\n          ''\r\n        ].join(os.EOL));\r\n        throw new AlreadyReportedError();\r\n      }\r\n    } catch (e) {\r\n      if (e instanceof AlreadyReportedError) {\r\n        console.log(colors.red('Aborting, so you can go fix your settings.  (Or use --bypass-policy to skip.)'));\r\n        throw e;\r\n      } else {\r\n        throw e;\r\n      }\r\n    }\r\n\r\n    if (rushConfiguration.gitAllowedEmailRegExps.length === 0) {\r\n      // If there is no policy, then we're good\r\n      return;\r\n    }\r\n\r\n    console.log('Checking Git policy for this repository.' + os.EOL);\r\n\r\n    // If there is a policy, at least one of the RegExp's must match\r\n    for (const pattern of rushConfiguration.gitAllowedEmailRegExps) {\r\n      const regex: RegExp = new RegExp('^' + pattern + '$', 'i');\r\n      if (userEmail.match(regex)) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Show the user's name as well.\r\n    // Ex. \"Mr. Example <mr@example.com>\"\r\n    let fancyEmail: string = colors.cyan(userEmail);\r\n    const gitPath: string = Git.getGitPath()!;\r\n    try {\r\n      const userName: string = Utilities.executeCommandAndCaptureOutput(\r\n        gitPath,\r\n        ['config', 'user.name'],\r\n        '.'\r\n      ).trim();\r\n      if (userName) {\r\n        fancyEmail = `${userName} <${fancyEmail}>`;\r\n      }\r\n    } catch (e) {\r\n      // but if it fails, this isn't critical, so don't bother them about it\r\n    }\r\n\r\n    console.log([\r\n      'Hey there!  To keep things tidy, this repo asks you to submit your Git commits using an email like ' +\r\n        (rushConfiguration.gitAllowedEmailRegExps.length > 1 ? 'one of these patterns:' : 'this pattern:'),\r\n      '',\r\n      ...rushConfiguration.gitAllowedEmailRegExps.map((pattern) => '    ' + colors.cyan(pattern)),\r\n      '',\r\n      '...but yours is configured like this:',\r\n      '',\r\n      `    ${fancyEmail}`,\r\n      '',\r\n      'To fix it, you can use commands like this:',\r\n      '',\r\n      ...GitEmailPolicy.getEmailExampleLines(rushConfiguration),\r\n      ''\r\n    ].join(os.EOL));\r\n\r\n    console.log(colors.red('Aborting, so you can go fix your settings.  (Or use --bypass-policy to skip.)'));\r\n    throw new AlreadyReportedError();\r\n  }\r\n\r\n  public static getEmailExampleLines(rushConfiguration: RushConfiguration): string[] {\r\n    return [\r\n      colors.cyan('    git config --local user.name \"Mr. Example\"'),\r\n      colors.cyan(`    git config --local user.email \"${rushConfiguration.gitSampleEmail || 'example@contoso.com'}\"`)\r\n    ];\r\n  }\r\n}\r\n"]}
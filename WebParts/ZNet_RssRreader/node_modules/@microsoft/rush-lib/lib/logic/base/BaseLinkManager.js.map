{"version":3,"file":"BaseLinkManager.js","sourceRoot":"","sources":["../../../src/logic/base/BaseLinkManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as fs from 'fs';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\n\r\nimport { FileSystem, IFileSystemCreateLinkOptions } from '@microsoft/node-core-library';\r\n\r\nimport { RushConfiguration } from '../../api/RushConfiguration';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { Stopwatch } from '../../utilities/Stopwatch';\r\nimport { BasePackage } from './BasePackage';\r\n\r\nexport enum SymlinkKind {\r\n  File,\r\n  Directory\r\n}\r\n\r\nexport interface IBaseLinkManagerCreateSymlinkOptions extends IFileSystemCreateLinkOptions {\r\n  symlinkKind: SymlinkKind;\r\n}\r\n\r\nexport abstract class BaseLinkManager {\r\n  protected _rushConfiguration: RushConfiguration;\r\n\r\n  protected static _createSymlink(options: IBaseLinkManagerCreateSymlinkOptions): void {\r\n    const newLinkFolder: string = path.dirname(options.newLinkPath);\r\n    FileSystem.ensureFolder(newLinkFolder);\r\n\r\n    // Link to the relative path, to avoid going outside containers such as a Docker image\r\n    const targetRelativePath: string = path.relative(fs.realpathSync(newLinkFolder),\r\n      options.linkTargetPath);\r\n\r\n    if (process.platform === 'win32') {\r\n      if (options.symlinkKind === SymlinkKind.Directory) {\r\n        // For directories, we use a Windows \"junction\".  On Unix, this produces a regular symlink.\r\n        FileSystem.createSymbolicLinkJunction({\r\n          linkTargetPath: targetRelativePath,\r\n          newLinkPath: options.newLinkPath\r\n        });\r\n      } else {\r\n        // For files, we use a Windows \"hard link\", because creating a symbolic link requires\r\n        // administrator permission.\r\n        FileSystem.createHardLink({\r\n          linkTargetPath: targetRelativePath,\r\n          newLinkPath: options.newLinkPath\r\n        });\r\n      }\r\n    } else {\r\n      // However hard links seem to cause build failures on Mac, so for all other operating systems\r\n      // we use symbolic links for this case.\r\n      if (options.symlinkKind === SymlinkKind.Directory) {\r\n        FileSystem.createSymbolicLinkFolder({\r\n          linkTargetPath: targetRelativePath,\r\n          newLinkPath: options.newLinkPath\r\n        });\r\n      } else {\r\n        FileSystem.createSymbolicLinkFile({\r\n          linkTargetPath: targetRelativePath,\r\n          newLinkPath: options.newLinkPath\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * For a Package object that represents a top-level Rush project folder\r\n   * (i.e. with source code that we will be building), this clears out its\r\n   * node_modules folder and then recursively creates all the symlinked folders.\r\n   */\r\n  protected static _createSymlinksForTopLevelProject(localPackage: BasePackage): void {\r\n    const localModuleFolder: string = path.join(localPackage.folderPath, 'node_modules');\r\n\r\n    // Sanity check\r\n    if (localPackage.parent) {\r\n      throw new Error('The provided package is not a top-level project');\r\n    }\r\n\r\n    // The root-level folder is the project itself, so we simply delete its node_modules\r\n    // to start clean\r\n    console.log('Purging ' + localModuleFolder);\r\n    Utilities.dangerouslyDeletePath(localModuleFolder);\r\n\r\n    if (localPackage.children.length > 0) {\r\n      Utilities.createFolderWithRetry(localModuleFolder);\r\n\r\n      for (const child of localPackage.children) {\r\n        BaseLinkManager._createSymlinksForDependencies(child);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This is a helper function used by createSymlinksForTopLevelProject().\r\n   * It will recursively creates symlinked folders corresponding to each of the\r\n   * Package objects in the provided tree.\r\n   */\r\n  private static _createSymlinksForDependencies(localPackage: BasePackage): void {\r\n    const localModuleFolder: string = path.join(localPackage.folderPath, 'node_modules');\r\n\r\n    if (!localPackage.symlinkTargetFolderPath) {\r\n      // Program bug\r\n      throw Error('localPackage.symlinkTargetFolderPath was not assigned');\r\n    }\r\n\r\n    // This is special case for when localPackage.name has the form '@scope/name',\r\n    // in which case we need to create the '@scope' folder first.\r\n    const parentFolderPath: string = path.dirname(localPackage.folderPath);\r\n    if (parentFolderPath && parentFolderPath !== localPackage.folderPath) {\r\n      if (!FileSystem.exists(parentFolderPath)) {\r\n        Utilities.createFolderWithRetry(parentFolderPath);\r\n      }\r\n    }\r\n\r\n    if (localPackage.children.length === 0) {\r\n      // If there are no children, then we can symlink the entire folder\r\n      BaseLinkManager._createSymlink({\r\n        linkTargetPath: localPackage.symlinkTargetFolderPath,\r\n        newLinkPath: localPackage.folderPath,\r\n        symlinkKind: SymlinkKind.Directory\r\n      });\r\n    } else {\r\n      // If there are children, then we need to symlink each item in the folder individually\r\n      Utilities.createFolderWithRetry(localPackage.folderPath);\r\n\r\n      for (const filename of FileSystem.readFolder(localPackage.symlinkTargetFolderPath)) {\r\n        if (filename.toLowerCase() !== 'node_modules') {\r\n          // Create the symlink\r\n          let symlinkKind: SymlinkKind = SymlinkKind.File;\r\n\r\n          const linkSource: string = path.join(localPackage.folderPath, filename);\r\n          let linkTarget: string = path.join(localPackage.symlinkTargetFolderPath, filename);\r\n\r\n          const linkStats: fs.Stats = FileSystem.getLinkStatistics(linkTarget);\r\n\r\n          if (linkStats.isSymbolicLink()) {\r\n\r\n            const targetStats: fs.Stats = FileSystem.getStatistics(FileSystem.getRealPath(linkTarget));\r\n            if (targetStats.isDirectory()) {\r\n              // Neither a junction nor a directory-symlink can have a directory-symlink\r\n              // as its target; instead, we must obtain the real physical path.\r\n              // A junction can link to another junction.  Unfortunately, the node 'fs' API\r\n              // lacks the ability to distinguish between a junction and a directory-symlink\r\n              // (even though it has the ability to create them both), so the safest policy\r\n              // is to always make a junction and always to the real physical path.\r\n              linkTarget = FileSystem.getRealPath(linkTarget);\r\n              symlinkKind = SymlinkKind.Directory;\r\n            }\r\n          } else if (linkStats.isDirectory()) {\r\n            symlinkKind = SymlinkKind.Directory;\r\n          }\r\n\r\n          BaseLinkManager._createSymlink({\r\n            linkTargetPath: linkTarget,\r\n            newLinkPath: linkSource,\r\n            symlinkKind\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    if (localPackage.children.length > 0) {\r\n      Utilities.createFolderWithRetry(localModuleFolder);\r\n\r\n      for (const child of localPackage.children) {\r\n        BaseLinkManager._createSymlinksForDependencies(child);\r\n      }\r\n    }\r\n  }\r\n\r\n  constructor(rushConfiguration: RushConfiguration) {\r\n    this._rushConfiguration = rushConfiguration;\r\n  }\r\n\r\n  /**\r\n   * Creates node_modules symlinks for all Rush projects defined in the RushConfiguration.\r\n   * @param force - Normally the operation will be skipped if the links are already up to date;\r\n   *   if true, this option forces the links to be recreated.\r\n   */\r\n  public createSymlinksForProjects(force: boolean): Promise<void> {\r\n    if (!force) {\r\n      if (FileSystem.exists(this._rushConfiguration.rushLinkJsonFilename)) {\r\n        console.log(colors.green(`Skipping linking -- everything is already up to date.`));\r\n        return Promise.resolve();\r\n      }\r\n    }\r\n\r\n    console.log('Linking projects together...');\r\n    const stopwatch: Stopwatch = Stopwatch.start();\r\n\r\n    // Delete the flag file if it exists; if we get interrupted, this will ensure that\r\n    // a full \"rush link\" is required next time\r\n    Utilities.deleteFile(this._rushConfiguration.rushLinkJsonFilename);\r\n\r\n    return this._linkProjects()\r\n      .then(() => {\r\n        stopwatch.stop();\r\n        console.log(os.EOL + colors.green(`Linking finished successfully. (${stopwatch.toString()})`));\r\n        console.log(os.EOL + 'Next you should probably run \"rush build\" or \"rush rebuild\"');\r\n      });\r\n  }\r\n\r\n  protected abstract _linkProjects(): Promise<void>;\r\n}\r\n"]}
{"version":3,"file":"ProjectCommandSet.js","sourceRoot":"","sources":["../../src/logic/ProjectCommandSet.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAO3D;;GAEG;AACH;IAKE,YAAmB,WAAyB;QAJ5B,yBAAoB,GAAa,EAAE,CAAC;QACpC,iBAAY,GAAa,EAAE,CAAC;QAC3B,mBAAc,GAAwB,IAAI,GAAG,EAAkB,CAAC;QAG/E,MAAM,OAAO,GAA4B,WAAW,CAAC,OAAO,IAAI,EAAG,CAAC;QAEpE,GAAG,CAAC,CAAC,MAAM,UAAU,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC9C,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBACrD,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC7C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACnC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YAC3D,CAAC;QACH,CAAC;QAED,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;IAC3B,CAAC;IAEM,gBAAgB,CAAC,WAAmB;QACzC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAC9C,CAAC;IAEM,aAAa,CAAC,WAAmB;QACtC,MAAM,MAAM,GAAuB,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;QACtE,EAAE,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;YACzB,MAAM,IAAI,KAAK,CAAC,gBAAgB,WAAW,iBAAiB,CAAC,CAAC;QAChE,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;CACF;AA/BD,8CA+BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  IPackageJson,\r\n  IPackageJsonScriptTable\r\n } from '@microsoft/node-core-library';\r\n\r\n/**\r\n * Parses the \"scripts\" section from package.json and provides support for executing scripts.\r\n */\r\nexport class ProjectCommandSet {\r\n  public readonly malformedScriptNames: string[] = [];\r\n  public readonly commandNames: string[] = [];\r\n  private readonly _scriptsByName: Map<string, string> = new Map<string, string>();\r\n\r\n  public constructor(packageJson: IPackageJson) {\r\n    const scripts: IPackageJsonScriptTable = packageJson.scripts || { };\r\n\r\n    for (const scriptName of Object.keys(scripts)) {\r\n      if (scriptName[0] === '-' || scriptName.length === 0) {\r\n        this.malformedScriptNames.push(scriptName);\r\n      } else {\r\n        this.commandNames.push(scriptName);\r\n        this._scriptsByName.set(scriptName, scripts[scriptName]);\r\n      }\r\n    }\r\n\r\n    this.commandNames.sort();\r\n  }\r\n\r\n  public tryGetScriptBody(commandName: string): string | undefined {\r\n    return this._scriptsByName.get(commandName);\r\n  }\r\n\r\n  public getScriptBody(commandName: string): string {\r\n    const result: string | undefined = this.tryGetScriptBody(commandName);\r\n    if (result === undefined) {\r\n      throw new Error(`The command \"${commandName}\" was not found`);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n"]}
{"version":3,"file":"InstallManager.js","sourceRoot":"","sources":["../../src/logic/InstallManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as glob from 'glob';\r\nimport * as colors from 'colors';\r\nimport * as fetch from 'node-fetch';\r\nimport * as http from 'http';\r\nimport HttpsProxyAgent = require('https-proxy-agent');\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as semver from 'semver';\r\nimport * as tar from 'tar';\r\nimport globEscape = require('glob-escape');\r\nimport {\r\n  JsonFile,\r\n  LockFile,\r\n  Text,\r\n  IPackageJson,\r\n  MapExtensions,\r\n  FileSystem,\r\n  FileConstants\r\n} from '@microsoft/node-core-library';\r\n\r\nimport { ApprovedPackagesChecker } from '../logic/ApprovedPackagesChecker';\r\nimport { AsyncRecycler } from '../utilities/AsyncRecycler';\r\nimport { BaseLinkManager } from '../logic/base/BaseLinkManager';\r\nimport { BaseShrinkwrapFile } from '../logic/base/BaseShrinkwrapFile';\r\nimport { PolicyValidator } from '../logic/policy/PolicyValidator';\r\nimport { IRushTempPackageJson } from '../logic/base/BasePackage';\r\nimport { LastInstallFlag } from '../api/LastInstallFlag';\r\nimport { LinkManagerFactory } from '../logic/LinkManagerFactory';\r\nimport { PurgeManager } from './PurgeManager';\r\nimport { RushConfiguration, PackageManager } from '../api/RushConfiguration';\r\nimport { RushConfigurationProject } from '../api/RushConfigurationProject';\r\nimport { RushConstants } from '../logic/RushConstants';\r\nimport { ShrinkwrapFileFactory } from '../logic/ShrinkwrapFileFactory';\r\nimport { Stopwatch } from '../utilities/Stopwatch';\r\nimport { Utilities } from '../utilities/Utilities';\r\nimport { Rush } from '../api/Rush';\r\nimport { PackageJsonEditor, DependencyType, PackageJsonDependency } from '../api/PackageJsonEditor';\r\nimport { AlreadyReportedError } from '../utilities/AlreadyReportedError';\r\n\r\nconst MAX_INSTALL_ATTEMPTS: number = 2;\r\n\r\n/**\r\n * The \"noMtime\" flag is new in tar@4.4.1 and not available yet for \\@types/tar.\r\n * As a temporary workaround, augment the type.\r\n */\r\nimport { CreateOptions } from 'tar';\r\n\r\nexport interface CreateOptions { // tslint:disable-line:interface-name\r\n  /**\r\n   * \"Set to true to omit writing mtime values for entries. Note that this prevents using other\r\n   * mtime-based features like tar.update or the keepNewer option with the resulting tar archive.\"\r\n   */\r\n  noMtime?: boolean;\r\n}\r\n\r\nexport interface IInstallManagerOptions {\r\n  /**\r\n   * Whether the global \"--debug\" flag was specified.\r\n   */\r\n  debug: boolean;\r\n  /**\r\n   * Whether or not Rush will automatically update the shrinkwrap file.\r\n   * True for \"rush update\", false for \"rush install\".\r\n   */\r\n  allowShrinkwrapUpdates: boolean;\r\n  /**\r\n   * Whether to skip policy checks.\r\n   */\r\n  bypassPolicy: boolean;\r\n  /**\r\n   * Whether to skip linking, i.e. require \"rush link\" to be done manually later.\r\n   */\r\n  noLink: boolean;\r\n  /**\r\n   * Whether to delete the shrinkwrap file before installation, i.e. so that all dependenices\r\n   * will be upgraded to the latest SemVer-compatible version.\r\n   */\r\n  fullUpgrade: boolean;\r\n  /**\r\n   * Whether to force an update to the shrinkwrap file even if it appears to be unnecessary.\r\n   * Normally Rush uses heuristics to determine when \"pnpm install\" can be skipped,\r\n   * but sometimes the heuristics can be inaccurate due to external influences\r\n   * (pnpmfile.js script logic, registry changes, etc).\r\n   */\r\n  recheckShrinkwrap: boolean;\r\n\r\n  /**\r\n   * The value of the \"--network-concurrency\" command-line parameter, which\r\n   * is a diagnostic option used to troubleshoot network failures.\r\n   *\r\n   * Currently only supported for PNPM.\r\n   */\r\n  networkConcurrency: number | undefined;\r\n\r\n  /**\r\n   * Whether or not to collect verbose logs from the package manager.\r\n   * If specified when using PNPM, the logs will be in /common/temp/pnpm.log\r\n   */\r\n  collectLogFile: boolean;\r\n}\r\n\r\n/**\r\n * This class implements common logic between \"rush install\" and \"rush update\".\r\n */\r\nexport class InstallManager {\r\n  private _rushConfiguration: RushConfiguration;\r\n  private _commonNodeModulesMarker: LastInstallFlag;\r\n  private _commonTempFolderRecycler: AsyncRecycler;\r\n\r\n  /**\r\n   * Returns a map of all direct dependencies that only have a single semantic version specifier\r\n   */\r\n  public static collectImplicitlyPreferredVersions(rushConfiguration: RushConfiguration): Map<string, string> {\r\n    // First, collect all the direct dependencies of all local projects, and their versions:\r\n    // direct dependency name --> set of version specifiers\r\n    const versionsForDependencies: Map<string, Set<string>> = new Map<string, Set<string>>();\r\n\r\n    rushConfiguration.projects.forEach((project: RushConfigurationProject) => {\r\n      InstallManager._collectVersionsForDependencies(versionsForDependencies,\r\n        project.packageJsonEditor.dependencyList,\r\n        project.cyclicDependencyProjects,\r\n        rushConfiguration);\r\n\r\n      InstallManager._collectVersionsForDependencies(versionsForDependencies,\r\n        project.packageJsonEditor.devDependencyList,\r\n        project.cyclicDependencyProjects,\r\n        rushConfiguration);\r\n    });\r\n\r\n    // If any dependency has more than one version, then filter it out (since we don't know which version\r\n    // should be preferred).  What remains will be the list of preferred dependencies.\r\n    // dependency --> version specifier\r\n    const implicitlyPreferred: Map<string, string> = new Map<string, string>();\r\n    versionsForDependencies.forEach((versions: Set<string>, dep: string) => {\r\n      if (versions.size === 1) {\r\n        const version: string = versions.values().next().value;\r\n        implicitlyPreferred.set(dep, version);\r\n      }\r\n    });\r\n    return implicitlyPreferred;\r\n  }\r\n\r\n  // Helper for collectImplicitlyPreferredVersions()\r\n  private static _updateVersionsForDependencies(versionsForDependencies: Map<string, Set<string>>,\r\n    dependency: string, version: string): void {\r\n    if (!versionsForDependencies.has(dependency)) {\r\n      versionsForDependencies.set(dependency, new Set<string>());\r\n    }\r\n    versionsForDependencies.get(dependency)!.add(version);\r\n  }\r\n\r\n  // Helper for collectImplicitlyPreferredVersions()\r\n  private static _collectVersionsForDependencies(versionsForDependencies: Map<string, Set<string>>,\r\n    dependencies: ReadonlyArray<PackageJsonDependency>,\r\n    cyclicDependencies: Set<string>, rushConfiguration: RushConfiguration): void {\r\n\r\n    const allowedAlternativeVersions: Map<string, ReadonlyArray<string>>\r\n      = rushConfiguration.commonVersions.allowedAlternativeVersions;\r\n\r\n    for (const dependency of dependencies) {\r\n      const alternativesForThisDependency: ReadonlyArray<string>\r\n        = allowedAlternativeVersions.get(dependency.name) || [];\r\n\r\n      // For each dependency, collectImplicitlyPreferredVersions() is collecting the set of all version specifiers\r\n      // that appear across the repo.  If there is only one version specifier, then that's the \"preferred\" one.\r\n      // However, there are a few cases where additional version specifiers can be safely ignored.\r\n      let ignoreVersion: boolean = false;\r\n\r\n      // 1. If the version specifier was listed in \"allowedAlternativeVersions\", then it's never a candidate.\r\n      //    (Even if it's the only version specifier anywhere in the repo, we still ignore it, because\r\n      //    otherwise the rule would be difficult to explain.)\r\n      if (alternativesForThisDependency.indexOf(dependency.version) > 0) {\r\n        ignoreVersion = true;\r\n      } else {\r\n        // Is it a local project?\r\n        const localProject: RushConfigurationProject | undefined = rushConfiguration.getProjectByName(dependency.name);\r\n        if (localProject) {\r\n          // 2. If it's a symlinked local project, then it's not a candidate, because the package manager will\r\n          //    never even see it.\r\n          // However there are two ways that a local project can NOT be symlinked:\r\n          // - if the local project doesn't satisfy the referenced semver specifier; OR\r\n          // - if the local project was specified in \"cyclicDependencyProjects\" in rush.json\r\n          if (semver.satisfies(localProject.packageJsonEditor.version, dependency.version)\r\n            && !cyclicDependencies.has(dependency.name)) {\r\n            ignoreVersion = true;\r\n          }\r\n        }\r\n\r\n        if (!ignoreVersion) {\r\n          InstallManager._updateVersionsForDependencies(versionsForDependencies, dependency.name, dependency.version);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public get commonNodeModulesMarker(): LastInstallFlag {\r\n    return this._commonNodeModulesMarker;\r\n  }\r\n\r\n  constructor(rushConfiguration: RushConfiguration, purgeManager: PurgeManager) {\r\n    this._rushConfiguration = rushConfiguration;\r\n    this._commonTempFolderRecycler = purgeManager.commonTempFolderRecycler;\r\n\r\n    this._commonNodeModulesMarker = new LastInstallFlag(this._rushConfiguration.commonTempFolder, {\r\n      node: process.versions.node,\r\n      packageManager: rushConfiguration.packageManager,\r\n      packageManagerVersion: rushConfiguration.packageManagerToolVersion\r\n    });\r\n  }\r\n\r\n  public doInstall(options: IInstallManagerOptions): Promise<void> {\r\n    return Promise.resolve().then(() => {\r\n\r\n      // Check the policies\r\n      PolicyValidator.validatePolicy(this._rushConfiguration, options.bypassPolicy);\r\n\r\n      ApprovedPackagesChecker.rewriteConfigFiles(this._rushConfiguration);\r\n\r\n      // Ensure that the package manager is installed\r\n      return this.ensureLocalPackageManager()\r\n        .then(() => {\r\n          let shrinkwrapFile: BaseShrinkwrapFile | undefined = undefined;\r\n\r\n          // (If it's a full update, then we ignore the shrinkwrap from Git since it will be overwritten)\r\n          if (!options.fullUpgrade) {\r\n            try {\r\n              shrinkwrapFile = ShrinkwrapFileFactory.getShrinkwrapFile(this._rushConfiguration.packageManager,\r\n                this._rushConfiguration.committedShrinkwrapFilename);\r\n            } catch (ex) {\r\n              console.log();\r\n              console.log(`Unable to load the ${this._shrinkwrapFilePhrase}: ${ex.message}`);\r\n\r\n              if (!options.allowShrinkwrapUpdates) {\r\n                console.log();\r\n                console.log(colors.red('You need to run \"rush update\" to fix this problem'));\r\n                throw new AlreadyReportedError();\r\n              }\r\n\r\n              shrinkwrapFile = undefined;\r\n            }\r\n          }\r\n\r\n          const shrinkwrapIsUpToDate: boolean = this._createTempModulesAndCheckShrinkwrap(shrinkwrapFile)\r\n            && !options.recheckShrinkwrap;\r\n\r\n          if (!shrinkwrapIsUpToDate) {\r\n            if (!options.allowShrinkwrapUpdates) {\r\n              console.log();\r\n              console.log(colors.red(`The ${this._shrinkwrapFilePhrase} is out of date.`\r\n                + `  You need to run \"rush update\".`));\r\n              throw new AlreadyReportedError();\r\n            }\r\n          }\r\n\r\n          return this._installCommonModules(shrinkwrapIsUpToDate, options)\r\n            .then(() => {\r\n              if (!options.noLink) {\r\n                const linkManager: BaseLinkManager = LinkManagerFactory.getLinkManager(this._rushConfiguration);\r\n                return linkManager.createSymlinksForProjects(false);\r\n              } else {\r\n                console.log(os.EOL\r\n                  + colors.yellow('Since \"--no-link\" was specified, you will need to run \"rush link\" manually.'));\r\n              }\r\n            });\r\n        });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * If the \"(p)npm-local\" symlink hasn't been set up yet, this creates it, installing the\r\n   * specified (P)npm version in the user's home directory if needed.\r\n   */\r\n  public ensureLocalPackageManager(): Promise<void> {\r\n    // Example: \"C:\\Users\\YourName\\.rush\"\r\n    const rushUserFolder: string = this._rushConfiguration.rushUserFolder;\r\n\r\n    if (!FileSystem.exists(rushUserFolder)) {\r\n      console.log('Creating ' + rushUserFolder);\r\n      FileSystem.ensureFolder(rushUserFolder);\r\n    }\r\n\r\n    const packageManager: PackageManager = this._rushConfiguration.packageManager;\r\n    const packageManagerVersion: string = this._rushConfiguration.packageManagerToolVersion;\r\n\r\n    const packageManagerAndVersion: string = `${packageManager}-${packageManagerVersion}`;\r\n    // Example: \"C:\\Users\\YourName\\.rush\\pnpm-1.2.3\"\r\n    const packageManagerToolFolder: string = path.join(rushUserFolder, packageManagerAndVersion);\r\n\r\n    const packageManagerMarker: LastInstallFlag = new LastInstallFlag(packageManagerToolFolder, {\r\n      node: process.versions.node\r\n    });\r\n\r\n    console.log(`Trying to acquire lock for ${packageManagerAndVersion}`);\r\n    return LockFile.acquire(rushUserFolder, packageManagerAndVersion).then((lock: LockFile) => {\r\n      console.log(`Acquired lock for ${packageManagerAndVersion}`);\r\n\r\n      if (!packageManagerMarker.isValid() || lock.dirtyWhenAcquired) {\r\n        console.log(colors.bold(`Installing ${packageManager} version ${packageManagerVersion}${os.EOL}`));\r\n\r\n        // note that this will remove the last-install flag from the directory\r\n        Utilities.installPackageInDirectory({\r\n          directory: packageManagerToolFolder,\r\n          packageName: packageManager,\r\n          version: this._rushConfiguration.packageManagerToolVersion,\r\n          tempPackageTitle: `${packageManager}-local-install`,\r\n          maxInstallAttempts: MAX_INSTALL_ATTEMPTS,\r\n          // This is using a local configuration to install a package in a shared global location.\r\n          // Generally that's a bad practice, but in this case if we can successfully install\r\n          // the package at all, we can reasonably assume it's good for all the repositories.\r\n          // In particular, we'll assume that two different NPM registries cannot have two\r\n          // different implementations of the same version of the same package.\r\n          // This was needed for: https://github.com/Microsoft/web-build-tools/issues/691\r\n          commonRushConfigFolder: this._rushConfiguration.commonRushConfigFolder\r\n        });\r\n\r\n        console.log(`Successfully installed ${packageManager} version ${packageManagerVersion}`);\r\n      } else {\r\n        console.log(`Found ${packageManager} version ${packageManagerVersion} in ${packageManagerToolFolder}`);\r\n      }\r\n\r\n      packageManagerMarker.create();\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\"\r\n      FileSystem.ensureFolder(this._rushConfiguration.commonTempFolder);\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\\pnpm-local\"\r\n      const localPackageManagerToolFolder: string =\r\n        path.join(this._rushConfiguration.commonTempFolder, `${packageManager}-local`);\r\n\r\n      console.log(os.EOL + 'Symlinking \"' + localPackageManagerToolFolder + '\"');\r\n      console.log('  --> \"' + packageManagerToolFolder + '\"');\r\n\r\n      // We cannot use FileSystem.exists() to test the existence of a symlink, because it will\r\n      // return false for broken symlinks.  There is no way to test without catching an exception.\r\n      try {\r\n        FileSystem.deleteFolder(localPackageManagerToolFolder);\r\n      } catch (error) {\r\n        if (error.code !== 'ENOENT') {\r\n          throw error;\r\n        }\r\n      }\r\n\r\n      FileSystem.createSymbolicLinkJunction({\r\n        linkTargetPath: packageManagerToolFolder,\r\n        newLinkPath: localPackageManagerToolFolder\r\n      });\r\n\r\n      lock.release();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Regenerates the common/package.json and all temp_modules projects.\r\n   * If shrinkwrapFile is provided, this function also validates whether it contains\r\n   * everything we need to install and returns true if so; in all other cases,\r\n   * the return value is false.\r\n   */\r\n  private _createTempModulesAndCheckShrinkwrap(\r\n    shrinkwrapFile: BaseShrinkwrapFile | undefined\r\n  ): boolean {\r\n    const stopwatch: Stopwatch = Stopwatch.start();\r\n\r\n    // Example: \"C:\\MyRepo\\common\\temp\\projects\"\r\n    const tempProjectsFolder: string = path.join(this._rushConfiguration.commonTempFolder,\r\n      RushConstants.rushTempProjectsFolderName);\r\n\r\n    console.log(os.EOL + colors.bold('Updating temp projects in ' + tempProjectsFolder));\r\n\r\n    Utilities.createFolderWithRetry(tempProjectsFolder);\r\n\r\n    const shrinkwrapWarnings: string[] = [];\r\n\r\n    // We will start with the assumption that it's valid, and then set it to false if\r\n    // any of the checks fail\r\n    let shrinkwrapIsUpToDate: boolean = true;\r\n\r\n    if (!shrinkwrapFile) {\r\n      shrinkwrapIsUpToDate = false;\r\n    }\r\n\r\n    const allExplicitPreferredVersions: Map<string, string> = this._rushConfiguration.commonVersions\r\n      .getAllPreferredVersions();\r\n\r\n    if (shrinkwrapFile) {\r\n      // Check any (explicitly) preferred dependencies first\r\n      allExplicitPreferredVersions.forEach((version: string, dependency: string) => {\r\n        if (!shrinkwrapFile.hasCompatibleTopLevelDependency(dependency, version)) {\r\n          shrinkwrapWarnings.push(`\"${dependency}\" (${version}) required by the preferred versions from `\r\n            + RushConstants.commonVersionsFilename);\r\n          shrinkwrapIsUpToDate = false;\r\n        }\r\n      });\r\n\r\n      if (this._findOrphanedTempProjects(shrinkwrapFile)) {\r\n        // If there are any orphaned projects, then \"npm install\" would fail because the shrinkwrap\r\n        // contains references such as \"resolved\": \"file:projects\\\\project1\" that refer to nonexistent\r\n        // file paths.\r\n        shrinkwrapIsUpToDate = false;\r\n      }\r\n    }\r\n\r\n    // Also copy down the committed .npmrc file, if there is one\r\n    // \"common\\config\\rush\\.npmrc\" --> \"common\\temp\\.npmrc\"\r\n    // Also ensure that we remove any old one that may be hanging around\r\n    Utilities.syncNpmrc(this._rushConfiguration.commonRushConfigFolder, this._rushConfiguration.commonTempFolder);\r\n\r\n    // also, copy the pnpmfile.js if it exists\r\n    if (this._rushConfiguration.packageManager === 'pnpm') {\r\n      const committedPnpmFilePath: string\r\n        = path.join(this._rushConfiguration.commonRushConfigFolder, RushConstants.pnpmFileFilename);\r\n      const tempPnpmFilePath: string\r\n        = path.join(this._rushConfiguration.commonTempFolder, RushConstants.pnpmFileFilename);\r\n\r\n      // ensure that we remove any old one that may be hanging around\r\n      this._syncFile(committedPnpmFilePath, tempPnpmFilePath);\r\n    }\r\n\r\n    const commonPackageJson: IPackageJson = {\r\n      dependencies: {},\r\n      description: 'Temporary file generated by the Rush tool',\r\n      name: 'rush-common',\r\n      private: true,\r\n      version: '0.0.0'\r\n    };\r\n\r\n    // Find the implicitly preferred versions\r\n    // These are any first-level dependencies for which we only consume a single version range\r\n    // (e.g. every package that depends on react uses an identical specifier)\r\n    const allPreferredVersions: Map<string, string> =\r\n      InstallManager.collectImplicitlyPreferredVersions(this._rushConfiguration);\r\n\r\n    // Add in the explicitly preferred versions.\r\n    // Note that these take precedence over implicitly preferred versions.\r\n    MapExtensions.mergeFromMap(allPreferredVersions, allExplicitPreferredVersions);\r\n\r\n    // Add any preferred versions to the top of the commonPackageJson\r\n    // do this in alphabetical order for simpler debugging\r\n    for (const dependency of Array.from(allPreferredVersions.keys()).sort()) {\r\n      commonPackageJson.dependencies![dependency] = allPreferredVersions.get(dependency)!;\r\n    }\r\n\r\n    // To make the common/package.json file more readable, sort alphabetically\r\n    // according to rushProject.tempProjectName instead of packageName.\r\n    const sortedRushProjects: RushConfigurationProject[] = this._rushConfiguration.projects.slice(0);\r\n    sortedRushProjects.sort(\r\n      (a: RushConfigurationProject, b: RushConfigurationProject) => a.tempProjectName.localeCompare(b.tempProjectName)\r\n    );\r\n\r\n    for (const rushProject of sortedRushProjects) {\r\n      const packageJson: PackageJsonEditor = rushProject.packageJsonEditor;\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\my-project-2.tgz\"\r\n      const tarballFile: string = this._getTarballFilePath(rushProject);\r\n\r\n      // Example: \"my-project-2\"\r\n      const unscopedTempProjectName: string = rushProject.unscopedTempProjectName;\r\n\r\n      // Example: dependencies[\"@rush-temp/my-project-2\"] = \"file:./projects/my-project-2.tgz\"\r\n      commonPackageJson.dependencies![rushProject.tempProjectName]\r\n        = `file:./${RushConstants.rushTempProjectsFolderName}/${rushProject.unscopedTempProjectName}.tgz`;\r\n\r\n      const tempPackageJson: IRushTempPackageJson = {\r\n        name: rushProject.tempProjectName,\r\n        version: '0.0.0',\r\n        private: true,\r\n        dependencies: {}\r\n      };\r\n\r\n      // Collect pairs of (packageName, packageVersion) to be added as temp package dependencies\r\n      const pairs: { packageName: string, packageVersion: string }[] = [];\r\n\r\n      for (const dependency of packageJson.dependencyList) {\r\n\r\n        // If there are any optional dependencies, copy them over directly\r\n        if (dependency.dependencyType === DependencyType.Optional) {\r\n          if (!tempPackageJson.optionalDependencies) {\r\n            tempPackageJson.optionalDependencies = {};\r\n          }\r\n          tempPackageJson.optionalDependencies[dependency.name] = dependency.version;\r\n        } else {\r\n          pairs.push({ packageName: dependency.name, packageVersion: dependency.version });\r\n        }\r\n      }\r\n\r\n      for (const dependency of packageJson.devDependencyList) {\r\n        // If there are devDependencies, we need to merge them with the regular\r\n        // dependencies.  If the same library appears in both places, then the\r\n        // regular dependency takes precedence over the devDependency.\r\n        // It also takes precedence over a duplicate in optionalDependencies,\r\n        // but NPM will take care of that for us.  (Frankly any kind of duplicate\r\n        // should be an error, but NPM is pretty lax about this.)\r\n        pairs.push({ packageName: dependency.name, packageVersion: dependency.version });\r\n      }\r\n\r\n      for (const pair of pairs) {\r\n        // Is there a locally built Rush project that could satisfy this dependency?\r\n        // If so, then we will symlink to the project folder rather than to common/temp/node_modules.\r\n        // In this case, we don't want \"npm install\" to process this package, but we do need\r\n        // to record this decision for \"rush link\" later, so we add it to a special 'rushDependencies' field.\r\n        const localProject: RushConfigurationProject | undefined =\r\n          this._rushConfiguration.getProjectByName(pair.packageName);\r\n        if (localProject) {\r\n\r\n          // Don't locally link if it's listed in the cyclicDependencyProjects\r\n          if (!rushProject.cyclicDependencyProjects.has(pair.packageName)) {\r\n\r\n            // Also, don't locally link if the SemVer doesn't match\r\n            const localProjectVersion: string = localProject.packageJsonEditor.version;\r\n            if (semver.satisfies(localProjectVersion, pair.packageVersion)) {\r\n\r\n              // We will locally link this package\r\n              if (!tempPackageJson.rushDependencies) {\r\n                tempPackageJson.rushDependencies = {};\r\n              }\r\n              tempPackageJson.rushDependencies[pair.packageName] = pair.packageVersion;\r\n              continue;\r\n            }\r\n          }\r\n        }\r\n\r\n        // We will NOT locally link this package; add it as a regular dependency.\r\n        tempPackageJson.dependencies![pair.packageName] = pair.packageVersion;\r\n\r\n        if (shrinkwrapFile) {\r\n          if (!shrinkwrapFile.tryEnsureCompatibleDependency(pair.packageName, pair.packageVersion,\r\n            rushProject.tempProjectName)) {\r\n              shrinkwrapWarnings.push(`\"${pair.packageName}\" (${pair.packageVersion}) required by`\r\n                + ` \"${rushProject.packageName}\"`);\r\n            shrinkwrapIsUpToDate = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      // NPM expects the root of the tarball to have a directory called 'package'\r\n      const npmPackageFolder: string = 'package';\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\my-project-2\"\r\n      const tempProjectFolder: string = path.join(\r\n        this._rushConfiguration.commonTempFolder,\r\n        RushConstants.rushTempProjectsFolderName,\r\n        unscopedTempProjectName);\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\my-project-2\\package.json\"\r\n      const tempPackageJsonFilename: string = path.join(tempProjectFolder, FileConstants.PackageJson);\r\n\r\n      // we only want to overwrite the package if the existing tarball's package.json is different from tempPackageJson\r\n      let shouldOverwrite: boolean = true;\r\n      try {\r\n        // if the tarball and the temp file still exist, then compare the contents\r\n        if (FileSystem.exists(tarballFile) && FileSystem.exists(tempPackageJsonFilename)) {\r\n\r\n          // compare the extracted package.json with the one we are about to write\r\n          const oldBuffer: Buffer = FileSystem.readFileToBuffer(tempPackageJsonFilename);\r\n          const newBuffer: Buffer = new Buffer(JsonFile.stringify(tempPackageJson));\r\n\r\n          if (Buffer.compare(oldBuffer, newBuffer) === 0) {\r\n            shouldOverwrite = false;\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // ignore the error, we will go ahead and create a new tarball\r\n      }\r\n\r\n      if (shouldOverwrite) {\r\n        try {\r\n          // ensure the folder we are about to zip exists\r\n          Utilities.createFolderWithRetry(tempProjectFolder);\r\n\r\n          // remove the old tarball & old temp package json, this is for any cases where new tarball creation\r\n          // fails, and the shouldOverwrite logic is messed up because the my-project-2\\package.json\r\n          // exists and is updated, but the tarball is not accurate\r\n          FileSystem.deleteFile(tarballFile);\r\n          FileSystem.deleteFile(tempPackageJsonFilename);\r\n\r\n          // write the expected package.json file into the zip staging folder\r\n          JsonFile.save(tempPackageJson, tempPackageJsonFilename);\r\n\r\n          // create the new tarball\r\n          tar.create({\r\n            gzip: true,\r\n            file: tarballFile,\r\n            cwd: tempProjectFolder,\r\n            portable: true,\r\n            noMtime: true,\r\n            noPax: true,\r\n            sync: true,\r\n            prefix: npmPackageFolder\r\n          } as CreateOptions, [FileConstants.PackageJson]);\r\n\r\n          console.log(`Updating ${tarballFile}`);\r\n        } catch (error) {\r\n          // delete everything in case of any error\r\n          FileSystem.deleteFile(tarballFile);\r\n          FileSystem.deleteFile(tempPackageJsonFilename);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Example: \"C:\\MyRepo\\common\\temp\\package.json\"\r\n    const commonPackageJsonFilename: string = path.join(this._rushConfiguration.commonTempFolder,\r\n      FileConstants.PackageJson);\r\n\r\n    if (shrinkwrapFile) {\r\n      // If we have a (possibly incomplete) shrinkwrap file, save it as the temporary file.\r\n      shrinkwrapFile.save(this._rushConfiguration.tempShrinkwrapFilename);\r\n      shrinkwrapFile.save(this._rushConfiguration.tempShrinkwrapPreinstallFilename);\r\n    } else {\r\n      // Otherwise delete the temporary file\r\n      FileSystem.deleteFile(this._rushConfiguration.tempShrinkwrapFilename);\r\n    }\r\n\r\n    // Don't update the file timestamp unless the content has changed, since \"rush install\"\r\n    // will consider this timestamp\r\n    JsonFile.save(commonPackageJson, commonPackageJsonFilename, { onlyIfChanged: true });\r\n\r\n    stopwatch.stop();\r\n    console.log(`Finished creating temporary modules (${stopwatch.toString()})`);\r\n\r\n    if (shrinkwrapWarnings.length > 0) {\r\n      console.log();\r\n      console.log(colors.yellow(Utilities.wrapWords(\r\n        `The ${this._shrinkwrapFilePhrase} is missing the following dependencies:`)));\r\n\r\n      for (const shrinkwrapWarning of shrinkwrapWarnings) {\r\n        console.log(colors.yellow('  ' + shrinkwrapWarning));\r\n      }\r\n      console.log();\r\n    }\r\n\r\n    return shrinkwrapIsUpToDate;\r\n  }\r\n\r\n  /**\r\n   * Runs \"npm install\" in the common folder.\r\n   */\r\n  private _installCommonModules(shrinkwrapIsUpToDate: boolean, options: IInstallManagerOptions): Promise<void> {\r\n    return Promise.resolve().then(() => {\r\n      console.log(os.EOL + colors.bold('Checking node_modules in ' + this._rushConfiguration.commonTempFolder)\r\n        + os.EOL);\r\n\r\n      const commonNodeModulesFolder: string = path.join(this._rushConfiguration.commonTempFolder,\r\n        'node_modules');\r\n\r\n      // This marker file indicates that the last \"rush install\" completed successfully\r\n      const markerFileExistedAndWasValidAtStart: boolean = this._commonNodeModulesMarker.isValid();\r\n\r\n      // If \"--clean\" or \"--full-clean\" was specified, or if the last install was interrupted,\r\n      // then we will need to delete the node_modules folder.  Otherwise, we can do an incremental\r\n      // install.\r\n      const deleteNodeModules: boolean = !markerFileExistedAndWasValidAtStart;\r\n\r\n      // Based on timestamps, can we skip this install entirely?\r\n      if (shrinkwrapIsUpToDate && !deleteNodeModules) {\r\n        const potentiallyChangedFiles: string[] = [];\r\n\r\n        // Consider the timestamp on the node_modules folder; if someone tampered with it\r\n        // or deleted it entirely, then we can't skip this install\r\n        potentiallyChangedFiles.push(commonNodeModulesFolder);\r\n\r\n        // Additionally, if they pulled an updated npm-shrinkwrap.json file from Git,\r\n        // then we can't skip this install\r\n        potentiallyChangedFiles.push(this._rushConfiguration.committedShrinkwrapFilename);\r\n\r\n        if (this._rushConfiguration.packageManager === 'pnpm') {\r\n          // If the repo is using pnpmfile.js, consider that also\r\n          const pnpmFileFilename: string = path.join(this._rushConfiguration.commonRushConfigFolder,\r\n            RushConstants.pnpmFileFilename);\r\n\r\n          if (FileSystem.exists(pnpmFileFilename)) {\r\n            potentiallyChangedFiles.push(pnpmFileFilename);\r\n          }\r\n        }\r\n\r\n        // Also consider timestamps for all the temp tarballs. (createTempModulesAndCheckShrinkwrap() will\r\n        // carefully preserve these timestamps unless something has changed.)\r\n        // Example: \"C:\\MyRepo\\common\\temp\\projects\\my-project-2.tgz\"\r\n        potentiallyChangedFiles.push(...this._rushConfiguration.projects.map(x => {\r\n          return this._getTarballFilePath(x);\r\n        }));\r\n\r\n        // NOTE: If commonNodeModulesMarkerFilename (or any of the potentiallyChangedFiles) does not\r\n        // exist, then isFileTimestampCurrent() returns false.\r\n        if (Utilities.isFileTimestampCurrent(this._commonNodeModulesMarker.path, potentiallyChangedFiles)) {\r\n          // Nothing to do, because everything is up to date according to time stamps\r\n          return;\r\n        }\r\n      }\r\n\r\n      return this._checkIfReleaseIsPublished()\r\n        .catch((error) => {\r\n          // If the user is working in an environment that can't reach the registry,\r\n          // don't bother them with errors.\r\n          return undefined;\r\n        }).then((publishedRelease: boolean | undefined) => {\r\n\r\n          if (publishedRelease === false) {\r\n            console.log(colors.yellow('Warning: This release of the Rush tool was unpublished; it may be unstable.'));\r\n          }\r\n\r\n          // Since we're going to be tampering with common/node_modules, delete the \"rush link\" flag file if it exists;\r\n          // this ensures that a full \"rush link\" is required next time\r\n          Utilities.deleteFile(this._rushConfiguration.rushLinkJsonFilename);\r\n\r\n          // Delete the successful install file to indicate the install transaction has started\r\n          this._commonNodeModulesMarker.clear();\r\n\r\n          // NOTE: The PNPM store is supposed to be transactionally safe, so we don't delete it automatically.\r\n          // The user must request that via the command line.\r\n          if (deleteNodeModules) {\r\n            if (this._rushConfiguration.packageManager === 'npm') {\r\n              console.log(`Deleting the \"npm-cache\" folder`);\r\n              // This is faster and more thorough than \"npm cache clean\"\r\n              this._commonTempFolderRecycler.moveFolder(this._rushConfiguration.npmCacheFolder);\r\n\r\n              console.log(`Deleting the \"npm-tmp\" folder`);\r\n              this._commonTempFolderRecycler.moveFolder(this._rushConfiguration.npmTmpFolder);\r\n            }\r\n          }\r\n\r\n          // Example: \"C:\\MyRepo\\common\\temp\\npm-local\\node_modules\\.bin\\npm\"\r\n          const packageManagerFilename: string = this._rushConfiguration.packageManagerToolFilename;\r\n\r\n          // Is there an existing \"node_modules\" folder to consider?\r\n          if (FileSystem.exists(commonNodeModulesFolder)) {\r\n            // Should we delete the entire \"node_modules\" folder?\r\n            if (deleteNodeModules) {\r\n              // YES: Delete \"node_modules\"\r\n\r\n              // Explain to the user why we are hosing their node_modules folder\r\n              console.log('Deleting files from ' + commonNodeModulesFolder);\r\n\r\n              this._commonTempFolderRecycler.moveFolder(commonNodeModulesFolder);\r\n\r\n              Utilities.createFolderWithRetry(commonNodeModulesFolder);\r\n            } else {\r\n              // NO: Prepare to do an incremental install in the \"node_modules\" folder\r\n\r\n              // note: it is not necessary to run \"prune\" with pnpm\r\n              if (this._rushConfiguration.packageManager === 'npm') {\r\n                console.log(`Running \"${this._rushConfiguration.packageManager} prune\"`\r\n                  + ` in ${this._rushConfiguration.commonTempFolder}`);\r\n                const args: string[] = ['prune'];\r\n                this._pushConfigurationArgs(args, options);\r\n\r\n                Utilities.executeCommandWithRetry(MAX_INSTALL_ATTEMPTS, packageManagerFilename, args,\r\n                  this._rushConfiguration.commonTempFolder);\r\n\r\n                // Delete the (installed image of) the temp projects, since \"npm install\" does not\r\n                // detect changes for \"file:./\" references.\r\n                // We recognize the temp projects by their names, which always start with \"rush-\".\r\n\r\n                // Example: \"C:\\MyRepo\\common\\temp\\node_modules\\@rush-temp\"\r\n                const pathToDeleteWithoutStar: string = path.join(commonNodeModulesFolder,\r\n                  RushConstants.rushTempNpmScope);\r\n                console.log(`Deleting ${pathToDeleteWithoutStar}\\\\*`);\r\n                // Glob can't handle Windows paths\r\n                const normalizedpathToDeleteWithoutStar: string = Text.replaceAll(pathToDeleteWithoutStar, '\\\\', '/');\r\n\r\n                // Example: \"C:/MyRepo/common/temp/node_modules/@rush-temp/*\"\r\n                for (const tempModulePath of glob.sync(globEscape(normalizedpathToDeleteWithoutStar) + '/*')) {\r\n                  // We could potentially use AsyncRecycler here, but in practice these folders tend\r\n                  // to be very small\r\n                  Utilities.dangerouslyDeletePath(tempModulePath);\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          if (this._rushConfiguration.packageManager === 'yarn') {\r\n            // Yarn does not correctly detect changes to a tarball, so we need to forcibly clear its cache\r\n            const yarnRushTempCacheFolder: string = path.join(\r\n              this._rushConfiguration.yarnCacheFolder, 'v2', 'npm-@rush-temp'\r\n            );\r\n            if (FileSystem.exists(yarnRushTempCacheFolder)) {\r\n              console.log('Deleting ' + yarnRushTempCacheFolder);\r\n              Utilities.dangerouslyDeletePath(yarnRushTempCacheFolder);\r\n            }\r\n          }\r\n\r\n          // Run \"npm install\" in the common folder\r\n\r\n          // NOTE:\r\n          // we do NOT install optional dependencies for Rush, as it seems that optional dependencies do not\r\n          // work properly with shrinkwrap. Consider the \"fsevents\" package. This is a Mac specific package\r\n          // which is an optional second-order dependency. Optional dependencies work by attempting to install\r\n          // the package, but removes the package if the install failed.\r\n          // This means that someone running generate on a Mac WILL have fsevents included in their shrinkwrap.\r\n          // When someone using Windows attempts to install from the shrinkwrap, the install will fail.\r\n          //\r\n          // If someone generates the shrinkwrap using Windows, then fsevents will NOT be listed in the shrinkwrap.\r\n          // When someone using Mac attempts to install from the shrinkwrap, (as of NPM 4), they will NOT have the\r\n          // optional dependency installed.\r\n          //\r\n          // One possible solution would be to have the shrinkwrap include information about whether the dependency\r\n          // is optional or not, but it does not appear to do so. Also, this would result in strange behavior where\r\n          // people would have different node_modules based on their system.\r\n\r\n          const installArgs: string[] = [ 'install' ];\r\n          this._pushConfigurationArgs(installArgs, options);\r\n\r\n          console.log(os.EOL + colors.bold(`Running \"${this._rushConfiguration.packageManager} install\" in`\r\n            + ` ${this._rushConfiguration.commonTempFolder}`) + os.EOL);\r\n\r\n          // If any diagnostic options were specified, then show the full command-line\r\n          if (options.debug || options.collectLogFile || options.networkConcurrency) {\r\n            console.log(os.EOL + colors.green('Invoking package manager: ')\r\n              + FileSystem.getRealPath(packageManagerFilename) + ' ' + installArgs.join(' ') + os.EOL);\r\n          }\r\n\r\n          Utilities.executeCommandWithRetry(MAX_INSTALL_ATTEMPTS, packageManagerFilename,\r\n            installArgs,\r\n            this._rushConfiguration.commonTempFolder,\r\n            undefined,\r\n            false, () => {\r\n              if (this._rushConfiguration.packageManager === 'pnpm') {\r\n                // If there is a failure in pnpm, it is possible that it left the\r\n                // store in a bad state. Therefore, we should clean out the store\r\n                // before attempting the install again.\r\n\r\n                console.log(colors.yellow(`Deleting the \"node_modules\" folder`));\r\n                this._commonTempFolderRecycler.moveFolder(commonNodeModulesFolder);\r\n                console.log(colors.yellow(`Deleting the \"pnpm-store\" folder`));\r\n                this._commonTempFolderRecycler.moveFolder(this._rushConfiguration.pnpmStoreFolder);\r\n\r\n                Utilities.createFolderWithRetry(commonNodeModulesFolder);\r\n              }\r\n            });\r\n\r\n          if (this._rushConfiguration.packageManager === 'npm') {\r\n\r\n            console.log(os.EOL + colors.bold('Running \"npm shrinkwrap\"...'));\r\n            const npmArgs: string[] = ['shrinkwrap'];\r\n            this._pushConfigurationArgs(npmArgs, options);\r\n            Utilities.executeCommand(this._rushConfiguration.packageManagerToolFilename,\r\n              npmArgs, this._rushConfiguration.commonTempFolder);\r\n            console.log('\"npm shrinkwrap\" completed' + os.EOL);\r\n\r\n            this._fixupNpm5Regression();\r\n          }\r\n\r\n          if (options.allowShrinkwrapUpdates && !shrinkwrapIsUpToDate) {\r\n            // Copy (or delete) common\\temp\\shrinkwrap.yaml --> common\\config\\rush\\shrinkwrap.yaml\r\n            this._syncFile(this._rushConfiguration.tempShrinkwrapFilename,\r\n              this._rushConfiguration.committedShrinkwrapFilename);\r\n          } else {\r\n            // TODO: Validate whether the package manager updated it in a nontrivial way\r\n          }\r\n\r\n          // Finally, create the marker file to indicate a successful install\r\n          this._commonNodeModulesMarker.create();\r\n\r\n          console.log('');\r\n        });\r\n    });\r\n  }\r\n\r\n  private _checkIfReleaseIsPublished(): Promise<boolean> {\r\n    return Promise.resolve().then(() => {\r\n      const lastCheckFile: string = path.join(this._rushConfiguration.rushUserFolder,\r\n        'rush-' + Rush.version, 'last-check.flag');\r\n\r\n      if (FileSystem.exists(lastCheckFile)) {\r\n        let cachedResult: boolean | 'error' | undefined = undefined;\r\n        try {\r\n          // NOTE: mtimeMs is not supported yet in NodeJS 6.x\r\n          const nowMs: number = new Date().getTime();\r\n          const ageMs: number = nowMs - FileSystem.getStatistics(lastCheckFile).mtime.getTime();\r\n          const HOUR: number = 60 * 60 * 1000;\r\n\r\n          // Is the cache too old?\r\n          if (ageMs < 24 * HOUR) {\r\n            // No, read the cached result\r\n            cachedResult = JsonFile.load(lastCheckFile);\r\n          }\r\n        } catch (e) {\r\n          // Unable to parse file\r\n        }\r\n        if (cachedResult === 'error') {\r\n          return Promise.reject(new Error('Unable to contact server'));\r\n        }\r\n        if (cachedResult === true || cachedResult === false) {\r\n          return cachedResult;\r\n        }\r\n      }\r\n\r\n      // Before we start the network operation, record a failed state.  If the process exits for some reason,\r\n      // this will record the error.  It will also update the timestamp to prevent other Rush instances\r\n      // from attempting to update the file.\r\n      JsonFile.save('error', lastCheckFile, { ensureFolderExists: true });\r\n\r\n      // For this check we use the official registry, not the private registry\r\n      return this._queryIfReleaseIsPublished('https://registry.npmjs.org:443')\r\n        .then((publishedRelease: boolean) => {\r\n          // Cache the result\r\n          JsonFile.save(publishedRelease, lastCheckFile, { ensureFolderExists: true });\r\n          return publishedRelease;\r\n        })\r\n        .catch((error: Error) => {\r\n          JsonFile.save('error', lastCheckFile, { ensureFolderExists: true });\r\n          return Promise.reject(error);\r\n        });\r\n    });\r\n  }\r\n\r\n  private _queryIfReleaseIsPublished(registryUrl: string): Promise<boolean> {\r\n    let queryUrl: string = registryUrl;\r\n    if (queryUrl[-1] !== '/') {\r\n      queryUrl += '/';\r\n    }\r\n    // Note that the \"@\" symbol does not normally get URL-encoded\r\n    queryUrl += RushConstants.rushPackageName.replace('/', '%2F');\r\n\r\n    const userAgent: string = `pnpm/? npm/? node/${process.version} ${os.platform()} ${os.arch()}`;\r\n\r\n    const headers: fetch.Headers = new fetch.Headers();\r\n    headers.append('user-agent', userAgent);\r\n    headers.append('accept', 'application/vnd.npm.install-v1+json; q=1.0, application/json; q=0.8, */*');\r\n\r\n    let agent: http.Agent | undefined = undefined;\r\n    if (process.env.HTTP_PROXY) {\r\n      agent = new HttpsProxyAgent(process.env.HTTP_PROXY);\r\n    }\r\n\r\n    return fetch.default(queryUrl, {\r\n        headers: headers,\r\n        agent: agent\r\n      })\r\n      .then((response: fetch.Response) => {\r\n        if (!response.ok) {\r\n          return Promise.reject(new Error('Failed to query'));\r\n        }\r\n        return response\r\n          .json()\r\n          .then((data) => {\r\n            let url: string;\r\n            try {\r\n              if (!data.versions[Rush.version]) {\r\n                // Version was not published\r\n                return false;\r\n              }\r\n              url = data.versions[Rush.version].dist.tarball;\r\n              if (!url) {\r\n                return Promise.reject(new Error(`URL not found`));\r\n              }\r\n            } catch (e) {\r\n              return Promise.reject(new Error('Error parsing response'));\r\n            }\r\n\r\n            // Make sure the tarball wasn't deleted from the CDN\r\n            headers.set('accept', '*/*');\r\n            return fetch.default(url, {\r\n                headers: headers,\r\n                agent: agent\r\n              })\r\n              .then<boolean>((response2: fetch.Response) => {\r\n                if (!response2.ok) {\r\n                  if (response2.status === 404) {\r\n                    return false;\r\n                  } else {\r\n                    return Promise.reject(new Error('Failed to fetch'));\r\n                  }\r\n                }\r\n                return true;\r\n              });\r\n          });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Used when invoking the NPM tool.  Appends the common configuration options\r\n   * to the command-line.\r\n   */\r\n  private _pushConfigurationArgs(args: string[], options: IInstallManagerOptions): void {\r\n    if (this._rushConfiguration.packageManager === 'npm') {\r\n      args.push('--no-optional');\r\n      args.push('--cache', this._rushConfiguration.npmCacheFolder);\r\n      args.push('--tmp', this._rushConfiguration.npmTmpFolder);\r\n\r\n      if (options.collectLogFile) {\r\n        args.push('--verbose');\r\n      }\r\n    } else if (this._rushConfiguration.packageManager === 'pnpm') {\r\n      args.push('--no-optional');\r\n      args.push('--store', this._rushConfiguration.pnpmStoreFolder);\r\n\r\n      // we are using the --no-lock flag for now, which unfortunately prints a warning, but should be OK\r\n      // since rush already has its own install lock file which will invalidate the cache for us.\r\n      // we theoretically could use the lock file, but we would need to clean the store if the\r\n      // lockfile existed, otherwise PNPM would hang indefinitely. it is simpler to rely on Rush's\r\n      // last install flag, which encapsulates the entire installation\r\n      args.push('--no-lock');\r\n\r\n      // Ensure that Rush's tarball dependencies get synchronized properly with the shrinkwrap.yaml file.\r\n      // See this GitHub issue: https://github.com/pnpm/pnpm/issues/1342\r\n      args.push('--no-prefer-frozen-shrinkwrap');\r\n\r\n      if (options.collectLogFile) {\r\n        args.push('--reporter', 'ndjson');\r\n      }\r\n\r\n      if (options.networkConcurrency) {\r\n        args.push('--network-concurrency', options.networkConcurrency.toString());\r\n      }\r\n\r\n      if (this._rushConfiguration.pnpmOptions.strictPeerDependencies) {\r\n        args.push('--strict-peer-dependencies');\r\n      }\r\n    } else if (this._rushConfiguration.packageManager === 'yarn') {\r\n      args.push('--ignore-optional');\r\n      args.push('--link-folder', 'yarn-link');\r\n      args.push('--cache-folder', this._rushConfiguration.yarnCacheFolder);\r\n\r\n      // Without this option, Yarn will sometimes stop and ask for user input on STDIN\r\n      // (e.g. \"Which command would you like to run?\").\r\n      args.push('--non-interactive');\r\n\r\n      if (options.networkConcurrency) {\r\n        args.push('--network-concurrency', options.networkConcurrency.toString());\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Copies the file \"sourcePath\" to \"destinationPath\", overwriting the target file location.\r\n   * If the source file does not exist, then the target file is deleted.\r\n   */\r\n  private _syncFile(sourcePath: string, destinationPath: string): void {\r\n    if (FileSystem.exists(sourcePath)) {\r\n      console.log('Updating ' + destinationPath);\r\n      FileSystem.copyFile({sourcePath, destinationPath});\r\n    } else {\r\n      if (FileSystem.exists(destinationPath)) {\r\n        console.log('Deleting ' + destinationPath);\r\n        FileSystem.deleteFile(destinationPath);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the path to the tarball\r\n   * Example: \"C:\\MyRepo\\common\\temp\\projects\\my-project-2.tgz\"\r\n   */\r\n  private _getTarballFilePath(project: RushConfigurationProject): string {\r\n    return path.join(\r\n      this._rushConfiguration.commonTempFolder,\r\n      RushConstants.rushTempProjectsFolderName,\r\n      `${project.unscopedTempProjectName}.tgz`);\r\n  }\r\n\r\n  /**\r\n   * This is a workaround for a bug introduced in NPM 5 (and still unfixed as of NPM 5.5.1):\r\n   * https://github.com/npm/npm/issues/19006\r\n   *\r\n   * The regression is that \"npm install\" sets the package.json \"version\" field for the\r\n   * @rush-temp projects to a value like \"file:projects/example.tgz\", when it should be \"0.0.0\".\r\n   * This causes \"rush link\" to fail later, when read-package-tree tries to parse the bad version.\r\n   * The error looks like this:\r\n   *\r\n   * ERROR: Failed to parse package.json for foo: Invalid version: \"file:projects/example.tgz\"\r\n   *\r\n   * Our workaround is to rewrite the package.json files for each of the @rush-temp projects\r\n   * in the node_modules folder, after \"npm install\" completes.\r\n   */\r\n  private _fixupNpm5Regression(): void {\r\n    const pathToDeleteWithoutStar: string = path.join(this._rushConfiguration.commonTempFolder,\r\n      'node_modules', RushConstants.rushTempNpmScope);\r\n    // Glob can't handle Windows paths\r\n    const normalizedpathToDeleteWithoutStar: string = Text.replaceAll(pathToDeleteWithoutStar, '\\\\', '/');\r\n\r\n    let anyChanges: boolean = false;\r\n\r\n    // Example: \"C:/MyRepo/common/temp/node_modules/@rush-temp/*/package.json\"\r\n    for (const packageJsonPath of glob.sync(globEscape(normalizedpathToDeleteWithoutStar) + '/*/package.json')) {\r\n      // Example: \"C:/MyRepo/common/temp/node_modules/@rush-temp/example/package.json\"\r\n      const packageJsonObject: IRushTempPackageJson = JsonFile.load(packageJsonPath);\r\n\r\n      // The temp projects always use \"0.0.0\" as their version\r\n      packageJsonObject.version = '0.0.0';\r\n\r\n      if (JsonFile.save(packageJsonObject, packageJsonPath, { onlyIfChanged: true })) {\r\n        anyChanges = true;\r\n      }\r\n    }\r\n\r\n    if (anyChanges) {\r\n      console.log(os.EOL + colors.yellow(Utilities.wrapWords(`Applied workaround for NPM 5 bug`)) + os.EOL);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks for temp projects that exist in the shrinkwrap file, but don't exist\r\n   * in rush.json.  This might occur, e.g. if a project was recently deleted or renamed.\r\n   *\r\n   * @returns true if orphans were found, or false if everything is okay\r\n   */\r\n  private _findOrphanedTempProjects(shrinkwrapFile: BaseShrinkwrapFile): boolean {\r\n\r\n    // We can recognize temp projects because they are under the \"@rush-temp\" NPM scope.\r\n    for (const tempProjectName of shrinkwrapFile.getTempProjectNames()) {\r\n      if (!this._rushConfiguration.findProjectByTempName(tempProjectName)) {\r\n        console.log(os.EOL + colors.yellow(Utilities.wrapWords(\r\n          `Your ${this._shrinkwrapFilePhrase} references a project \"${tempProjectName}\" which no longer exists.`))\r\n          + os.EOL);\r\n        return true;  // found one\r\n      }\r\n    }\r\n\r\n    return false;  // none found\r\n  }\r\n\r\n  private get _shrinkwrapFilePhrase(): string {\r\n    return this._rushConfiguration.shrinkwrapFilePhrase;\r\n  }\r\n}\r\n"]}
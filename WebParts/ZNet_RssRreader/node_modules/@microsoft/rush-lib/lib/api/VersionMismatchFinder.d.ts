import { RushConfiguration } from './RushConfiguration';
import { PackageJsonEditor } from './PackageJsonEditor';
export interface IVersionMismatchFinderProject {
    packageName: string;
    cyclicDependencyProjects: Set<string>;
    packageJsonEditor: PackageJsonEditor;
    skipRushCheck?: boolean;
}
/**
 * @public
 */
export declare class VersionMismatchFinder {
    private _allowedAlternativeVersion;
    private _mismatches;
    private _projects;
    static rushCheck(rushConfiguration: RushConfiguration): void;
    static ensureConsistentVersions(rushConfiguration: RushConfiguration): void;
    /**
     * Populates a version mismatch finder object given a Rush Configuration.
     * Intentionally considers preferred versions.
     */
    static getMismatches(rushConfiguration: RushConfiguration): VersionMismatchFinder;
    private static _checkForInconsistentVersions(rushConfiguration, isRushCheckCommand);
    constructor(projects: IVersionMismatchFinderProject[], allowedAlternativeVersions?: Map<string, ReadonlyArray<string>>);
    readonly numberOfMismatches: number;
    getMismatches(): Array<string>;
    getVersionsOfMismatch(mismatch: string): Array<string> | undefined;
    getConsumersOfMismatch(mismatch: string, version: string): Array<string> | undefined;
    print(): void;
    private _analyze();
    private _isVersionAllowedAlternative(dependency, version);
    private _getKeys(iterable);
}

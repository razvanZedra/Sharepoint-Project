{"version":3,"file":"RushXCommandLine.js","sourceRoot":"","sources":["../../src/cli/RushXCommandLine.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\n\r\nimport {\r\n  PackageJsonLookup,\r\n  IPackageJson,\r\n  Text\r\n } from '@microsoft/node-core-library';\r\nimport { Utilities } from '../utilities/Utilities';\r\nimport { ProjectCommandSet } from '../logic/ProjectCommandSet';\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\n\r\nexport class RushXCommandLine {\r\n  public static launchRushX(launcherVersion: string, isManaged: boolean): void {\r\n    // NodeJS can sometimes accidentally terminate with a zero exit code  (e.g. for an uncaught\r\n    // promise exception), so we start with the assumption that the exit code is 1\r\n    // and set it to 0 only on success.\r\n    process.exitCode = 1;\r\n\r\n    try {\r\n      // Find the governing package.json for this folder:\r\n      const packageJsonLookup: PackageJsonLookup = new PackageJsonLookup();\r\n\r\n      const packageJsonFilePath: string | undefined = packageJsonLookup.tryGetPackageJsonFilePathFor(process.cwd());\r\n      if (!packageJsonFilePath) {\r\n        console.log(colors.red('This command should be used inside a project folder.'));\r\n        console.log(`Unable to find a package.json file in the current working directory or any of its parents.`);\r\n        return;\r\n      }\r\n\r\n      const packageJson: IPackageJson = packageJsonLookup.loadPackageJson(packageJsonFilePath);\r\n\r\n      const projectCommandSet: ProjectCommandSet = new ProjectCommandSet(packageJson);\r\n\r\n      // 0 = node.exe\r\n      // 1 = rushx\r\n      const args: string[] = process.argv.slice(2);\r\n\r\n      // Check for the following types of things:\r\n      //   rush\r\n      //   rush --help\r\n      //   rush -h\r\n      //   rush --unrecognized-option\r\n      if (args.length === 0 || args[0][0] === '-') {\r\n        RushXCommandLine._showUsage(packageJson, projectCommandSet);\r\n        return;\r\n      }\r\n\r\n      const commandName: string = args[0];\r\n\r\n      const scriptBody: string | undefined = projectCommandSet.tryGetScriptBody(commandName);\r\n\r\n      if (scriptBody === undefined) {\r\n        console.log(colors.red(`Error: The command \"${commandName}\" is not defined in the`\r\n          + ` package.json file for this project.`));\r\n\r\n        if (projectCommandSet.commandNames.length > 0) {\r\n          console.log(os.EOL + 'Available commands for this project are: '\r\n            + projectCommandSet.commandNames.map(x => `\"${x}\"`).join(', '));\r\n        }\r\n\r\n        console.log(`Use ${colors.yellow('\"rushx --help\"')} for more information.`);\r\n        return;\r\n      }\r\n\r\n      // Are we in a Rush repo?\r\n      let rushConfiguration: RushConfiguration | undefined = undefined;\r\n      if (RushConfiguration.tryFindRushJsonLocation(false)) {\r\n        rushConfiguration = RushConfiguration.loadFromDefaultLocation();\r\n      }\r\n\r\n      console.log('Executing: ' + JSON.stringify(scriptBody) + os.EOL);\r\n\r\n      const packageFolder: string = path.dirname(packageJsonFilePath);\r\n\r\n      const exitCode: number = Utilities.executeLifecycleCommand(scriptBody,\r\n        {\r\n          workingDirectory: packageFolder,\r\n          // If there is a rush.json then use its .npmrc from the temp folder.\r\n          // Otherwise look for npmrc in the project folder.\r\n          initCwd: rushConfiguration ? rushConfiguration.commonTempFolder : packageFolder,\r\n          handleOutput: false\r\n        }\r\n      );\r\n\r\n      if (exitCode > 0) {\r\n        console.log(colors.red(`The script failed with exit code ${exitCode}`));\r\n      }\r\n\r\n      process.exitCode = exitCode;\r\n\r\n    } catch (error) {\r\n      console.log(colors.red('Error: ' + error.message));\r\n    }\r\n  }\r\n\r\n  private static _showUsage(packageJson: IPackageJson, projectCommandSet: ProjectCommandSet): void {\r\n    console.log('usage: rushx [-h]');\r\n    console.log('       rushx <command> ...' + os.EOL);\r\n\r\n    console.log('Optional arguments:');\r\n    console.log('  -h, --help            Show this help message and exit.' + os.EOL);\r\n\r\n    if (projectCommandSet.commandNames.length > 0) {\r\n      console.log(`Project commands for ${colors.cyan(packageJson.name)}:`);\r\n\r\n      // Calculate the length of the longest script name, for formatting\r\n      let maxLength: number = 0;\r\n      for (const commandName of projectCommandSet.commandNames) {\r\n        maxLength = Math.max(maxLength, commandName.length);\r\n      }\r\n\r\n      for (const commandName of projectCommandSet.commandNames) {\r\n        const escapedScriptBody: string = JSON.stringify(projectCommandSet.getScriptBody(commandName));\r\n\r\n        // The length of the string e.g. \"  command: \"\r\n        const firstPartLength: number = 2 + maxLength + 2;\r\n        // The length for truncating the escaped escapedScriptBody so it doesn't wrap\r\n        // to the next line\r\n        const truncateLength: number = Math.max(0, Utilities.getConsoleWidth() - firstPartLength) - 1;\r\n\r\n        console.log(\r\n          // Example: \"  command: \"\r\n          '  ' + colors.cyan(Text.padEnd(commandName + ':', maxLength + 2))\r\n          // Example: \"do some thin...\"\r\n          + Text.truncateWithEllipsis(escapedScriptBody, truncateLength)\r\n        );\r\n      }\r\n\r\n      if (projectCommandSet.malformedScriptNames.length > 0) {\r\n        console.log(os.EOL + colors.yellow('Warning: Some \"scripts\" entries in the package.json file'\r\n          + ' have malformed names: '\r\n          + projectCommandSet.malformedScriptNames.map(x => `\"${x}\"`).join(', ')));\r\n      }\r\n    } else {\r\n      console.log(colors.yellow('Warning: No commands are defined yet for this project.'));\r\n      console.log('You can define a command by adding a \"scripts\" table to the project\\'s package.json file.');\r\n    }\r\n  }\r\n}\r\n"]}
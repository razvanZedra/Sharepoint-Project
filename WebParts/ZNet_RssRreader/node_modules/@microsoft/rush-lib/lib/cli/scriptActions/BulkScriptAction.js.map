{"version":3,"file":"BulkScriptAction.js","sourceRoot":"","sources":["../../../src/cli/scriptActions/BulkScriptAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\nimport * as colors from 'colors';\r\n\r\nimport {\r\n  Event\r\n} from '../../index';\r\n\r\nimport {\r\n  CommandLineFlagParameter,\r\n  CommandLineStringParameter,\r\n  CommandLineStringListParameter,\r\n  CommandLineParameterKind\r\n} from '@microsoft/ts-command-line';\r\n\r\nimport { SetupChecks } from '../../logic/SetupChecks';\r\nimport { TaskSelector } from '../../logic/TaskSelector';\r\nimport { Stopwatch } from '../../utilities/Stopwatch';\r\nimport { AlreadyReportedError } from '../../utilities/AlreadyReportedError';\r\nimport { BaseScriptAction, IBaseScriptActionOptions } from './BaseScriptAction';\r\nimport { FileSystem } from '@microsoft/node-core-library';\r\n\r\n/**\r\n * Constructor parameters for BulkScriptAction.\r\n */\r\nexport interface IBulkScriptActionOptions extends IBaseScriptActionOptions {\r\n  enableParallelism: boolean;\r\n  ignoreMissingScript: boolean;\r\n}\r\n\r\n/**\r\n * This class implements bulk commands which are run individually for each project in the repo,\r\n * possibly in parallel.  The action executes a script found in the project's package.json file.\r\n *\r\n * @remarks\r\n * Bulk commands can be defined via common/config/command-line.json.  Rush's predefined \"build\"\r\n * and \"rebuild\" commands are also modeled as bulk commands, because they essentially just\r\n * execute scripts from package.json in the same as any custom command.\r\n */\r\nexport class BulkScriptAction extends BaseScriptAction {\r\n  private _enableParallelism: boolean;\r\n  private _ignoreMissingScript: boolean;\r\n\r\n  private _changedProjectsOnly: CommandLineFlagParameter;\r\n  private _fromFlag: CommandLineStringListParameter;\r\n  private _toFlag: CommandLineStringListParameter;\r\n  private _toVersionPolicy: CommandLineStringListParameter;\r\n  private _verboseParameter: CommandLineFlagParameter;\r\n  private _parallelismParameter: CommandLineStringParameter | undefined;\r\n\r\n  constructor(\r\n    options: IBulkScriptActionOptions\r\n  ) {\r\n    super(options);\r\n    this._enableParallelism = options.enableParallelism;\r\n    this._ignoreMissingScript = options.ignoreMissingScript;\r\n  }\r\n\r\n  public run(): Promise<void> {\r\n    if (!FileSystem.exists(this.rushConfiguration.rushLinkJsonFilename)) {\r\n      throw new Error(`File not found: ${this.rushConfiguration.rushLinkJsonFilename}` +\r\n        `${os.EOL}Did you run \"rush link\"?`);\r\n    }\r\n    this._doBeforeTask();\r\n\r\n    const stopwatch: Stopwatch = Stopwatch.start();\r\n\r\n    const isQuietMode: boolean = !(this._verboseParameter.value);\r\n\r\n    // if this is parallelizable, then use the value from the flag (undefined or a number),\r\n    // if parallelism is not enabled, then restrict to 1 core\r\n    const parallelism: string | undefined = this._isParallelismEnabled()\r\n      ? this._parallelismParameter!.value\r\n      : '1';\r\n\r\n    // Collect all custom parameter values\r\n    const customParameterValues: string[] = [];\r\n\r\n    for (const customParameter of this.customParameters) {\r\n      customParameter.appendToArgList(customParameterValues);\r\n    }\r\n\r\n    const changedProjectsOnly: boolean = this.actionName === 'build' && this._changedProjectsOnly.value;\r\n\r\n    const tasks: TaskSelector = new TaskSelector(\r\n      {\r\n        rushConfiguration: this.rushConfiguration,\r\n        toFlags: this._mergeToProjects(),\r\n        fromFlags: this._fromFlag.values,\r\n        commandToRun: this.actionName,\r\n        customParameterValues,\r\n        isQuietMode,\r\n        parallelism,\r\n        isIncrementalBuildAllowed: this.actionName === 'build',\r\n        changedProjectsOnly,\r\n        ignoreMissingScript: this._ignoreMissingScript\r\n      }\r\n    );\r\n\r\n    return tasks.execute().then(\r\n      () => {\r\n        stopwatch.stop();\r\n        console.log(colors.green(`rush ${this.actionName} (${stopwatch.toString()})`));\r\n        this._doAfterTask(stopwatch, true);\r\n      })\r\n      .catch((error: Error) => {\r\n        if (error && error.message) {\r\n          console.log('Error: ' + error.message);\r\n        }\r\n        stopwatch.stop();\r\n        console.log(colors.red(`rush ${this.actionName} - Errors! (${stopwatch.toString()})`));\r\n        this._doAfterTask(stopwatch, false);\r\n        throw new AlreadyReportedError();\r\n      });\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    if (this._isParallelismEnabled()) {\r\n      this._parallelismParameter = this.defineStringParameter({\r\n        parameterLongName: '--parallelism',\r\n        parameterShortName: '-p',\r\n        argumentName: 'COUNT',\r\n        description: 'Specify the number of concurrent build processes'\r\n          + ' The value \"max\" can be specified to indicate the number of CPU cores.'\r\n          + ' If this parameter omitted, the default value depends on the operating system and number of CPU cores.'\r\n      });\r\n    }\r\n    this._toFlag = this.defineStringListParameter({\r\n      parameterLongName: '--to',\r\n      parameterShortName: '-t',\r\n      argumentName: 'PROJECT1',\r\n      description: 'Run command in the specified project and all of its dependencies'\r\n    });\r\n    this._toVersionPolicy =  this.defineStringListParameter({\r\n      parameterLongName: '--to-version-policy',\r\n      argumentName: 'VERSION_POLICY_NAME',\r\n      description: 'Run command in all projects with the specified version policy and all of their dependencies'\r\n    });\r\n    this._fromFlag = this.defineStringListParameter({\r\n      parameterLongName: '--from',\r\n      parameterShortName: '-f',\r\n      argumentName: 'PROJECT2',\r\n      description: 'Run command in all projects that directly or indirectly depend on the specified project'\r\n    });\r\n    this._verboseParameter = this.defineFlagParameter({\r\n      parameterLongName: '--verbose',\r\n      parameterShortName: '-v',\r\n      description: 'Display the logs during the build, rather than just displaying the build status summary'\r\n    });\r\n    if (this.actionName === 'build') {\r\n      this._changedProjectsOnly = this.defineFlagParameter({\r\n        parameterLongName: '--changed-projects-only',\r\n        parameterShortName: '-o',\r\n        description: 'If specified, the incremental build will only rebuild projects that have changed, '\r\n          + 'but not any projects that directly or indirectly depend on the changed package.'\r\n      });\r\n    }\r\n\r\n    this.defineScriptParameters();\r\n  }\r\n\r\n  private _mergeToProjects(): string[] {\r\n    const projects: string[] = [...this._toFlag.values];\r\n    if (this._toVersionPolicy.values && this._toVersionPolicy.values.length) {\r\n      this.rushConfiguration.projects.forEach(project => {\r\n        const matches: boolean = this._toVersionPolicy.values.some(policyName => {\r\n          return project.versionPolicyName === policyName;\r\n        });\r\n        if (matches) {\r\n          projects.push(project.packageName);\r\n        }\r\n      });\r\n    }\r\n    return projects;\r\n  }\r\n\r\n  private _isParallelismEnabled(): boolean {\r\n    return this.actionName === 'build'\r\n      || this.actionName === 'rebuild'\r\n      || this._enableParallelism;\r\n  }\r\n\r\n  private _doBeforeTask(): void {\r\n    if (this.actionName !== 'build' && this.actionName !== 'rebuild') {\r\n      // Only collects information for built-in tasks like build or rebuild.\r\n      return;\r\n    }\r\n\r\n    SetupChecks.validate(this.rushConfiguration);\r\n\r\n    this.eventHooksManager.handle(Event.preRushBuild, this.parser.isDebug);\r\n  }\r\n\r\n  private _doAfterTask(stopwatch: Stopwatch, success: boolean): void {\r\n    if (this.actionName !== 'build' && this.actionName !== 'rebuild') {\r\n      // Only collects information for built-in tasks like build or rebuild.\r\n      return;\r\n    }\r\n    this._collectTelemetry(stopwatch, success);\r\n    this.parser.flushTelemetry();\r\n    this.eventHooksManager.handle(Event.postRushBuild, this.parser.isDebug);\r\n  }\r\n\r\n  private _collectTelemetry(stopwatch: Stopwatch, success: boolean): void {\r\n    const extraData: { [key: string]: string } = {\r\n      command_to: (this._toFlag.values.length > 0).toString(),\r\n      command_from: (this._fromFlag.values.length > 0).toString()\r\n    };\r\n\r\n    for (const customParameter of this.customParameters) {\r\n      switch (customParameter.kind) {\r\n        case CommandLineParameterKind.Flag:\r\n        case CommandLineParameterKind.Choice:\r\n        case CommandLineParameterKind.String:\r\n        case CommandLineParameterKind.Integer:\r\n          // tslint:disable-next-line:no-any\r\n          extraData[customParameter.longName] = JSON.stringify((customParameter as any).value);\r\n          break;\r\n        default:\r\n          extraData[customParameter.longName] = '?';\r\n      }\r\n    }\r\n\r\n    if (this.parser.telemetry) {\r\n      this.parser.telemetry.log({\r\n        name: this.actionName,\r\n        duration: stopwatch.duration,\r\n        result: success ? 'Succeeded' : 'Failed',\r\n        extraData\r\n      });\r\n    }\r\n  }\r\n}"]}
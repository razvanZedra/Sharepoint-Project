{"version":3,"file":"BaseScriptAction.js","sourceRoot":"","sources":["../../../src/cli/scriptActions/BaseScriptAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAG3D,8DAAmF;AAGnF,6DAA0D;AAS1D;;;;;;;;;GASG;AACH,sBAAuC,SAAQ,+BAAc;IAI3D,YACE,OAAiC;QAEjC,KAAK,CAAC,OAAO,CAAC,CAAC;QALE,qBAAgB,GAA2B,EAAE,CAAC;QAM/D,IAAI,CAAC,yBAAyB,GAAG,OAAO,CAAC,wBAAwB,CAAC;IACpE,CAAC;IAES,sBAAsB;QAC9B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC;QACT,CAAC;QAED,4DAA4D;QAC5D,GAAG,CAAC,CAAC,MAAM,SAAS,IAAI,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC,CAAC,CAAC;YAClE,IAAI,UAAU,GAAY,KAAK,CAAC;YAChC,GAAG,CAAC,CAAC,MAAM,iBAAiB,IAAI,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBAC7D,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;oBAC1C,UAAU,GAAG,IAAI,CAAC;gBACpB,CAAC;YACH,CAAC;YAED,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBACf,IAAI,eAAiD,CAAC;gBAEtD,MAAM,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;oBAChC,KAAK,MAAM;wBACT,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC;4BACzC,kBAAkB,EAAE,SAAS,CAAC,SAAS;4BACvC,iBAAiB,EAAE,SAAS,CAAC,QAAQ;4BACrC,WAAW,EAAE,SAAS,CAAC,WAAW;yBACnC,CAAC,CAAC;wBACH,KAAK,CAAC;oBACR,KAAK,QAAQ;wBACZ,eAAe,GAAG,IAAI,CAAC,qBAAqB,CAAC;4BAC1C,kBAAkB,EAAE,SAAS,CAAC,SAAS;4BACvC,iBAAiB,EAAE,SAAS,CAAC,QAAQ;4BACrC,WAAW,EAAE,SAAS,CAAC,WAAW;4BAClC,YAAY,EAAE,SAAS,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;4BACrD,YAAY,EAAE,SAAS,CAAC,YAAY;yBACrC,CAAC,CAAC;wBACH,KAAK,CAAC;oBACR;wBACE,MAAM,IAAI,KAAK,CAAC,GAAG,6BAAa,CAAC,mBAAmB,yBAAyB,SAAU,CAAC,QAAQ,GAAG;8BAC/F,yCAAyC,SAAU,CAAC,aAAa,GAAG,CAAC,CAAC;gBAC9E,CAAC;gBACD,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;oBACpB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;gBAC9C,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;CACF;AAvDD,4CAuDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { CommandLineParameter } from '@microsoft/ts-command-line';\r\nimport { BaseRushAction, IBaseRushActionOptions } from '../actions/BaseRushAction';\r\nimport { CommandLineConfiguration } from '../../api/CommandLineConfiguration';\r\nimport { ParameterJson } from '../../api/CommandLineJson';\r\nimport { RushConstants } from '../../logic/RushConstants';\r\n\r\n/**\r\n * Constructor parameters for BaseScriptAction\r\n */\r\nexport interface IBaseScriptActionOptions extends IBaseRushActionOptions {\r\n  commandLineConfiguration: CommandLineConfiguration | undefined;\r\n}\r\n\r\n/**\r\n * Base class for command-line actions that are implemented using user-defined scripts.\r\n *\r\n * @remarks\r\n * Compared to the normal built-in actions, these actions are special because (1) they\r\n * can be discovered dynamically via common/config/command-line.json, and (2)\r\n * user-defined command-line parameters can be passed through to the script.\r\n *\r\n * The two subclasses are BulkScriptAction and GlobalScriptAction.\r\n */\r\nexport abstract class BaseScriptAction extends BaseRushAction {\r\n  protected readonly _commandLineConfiguration: CommandLineConfiguration | undefined;\r\n  protected readonly customParameters: CommandLineParameter[] = [];\r\n\r\n  constructor(\r\n    options: IBaseScriptActionOptions\r\n  ) {\r\n    super(options);\r\n    this._commandLineConfiguration = options.commandLineConfiguration;\r\n  }\r\n\r\n  protected defineScriptParameters(): void {\r\n    if (!this._commandLineConfiguration) {\r\n      return;\r\n    }\r\n\r\n    // Find any parameters that are associated with this command\r\n    for (const parameter of this._commandLineConfiguration.parameters) {\r\n      let associated: boolean = false;\r\n      for (const associatedCommand of parameter.associatedCommands) {\r\n        if (associatedCommand === this.actionName) {\r\n          associated = true;\r\n        }\r\n      }\r\n\r\n      if (associated) {\r\n        let customParameter: CommandLineParameter | undefined;\r\n\r\n        switch (parameter.parameterKind) {\r\n          case 'flag':\r\n            customParameter = this.defineFlagParameter({\r\n              parameterShortName: parameter.shortName,\r\n              parameterLongName: parameter.longName,\r\n              description: parameter.description\r\n            });\r\n            break;\r\n          case 'choice':\r\n           customParameter = this.defineChoiceParameter({\r\n              parameterShortName: parameter.shortName,\r\n              parameterLongName: parameter.longName,\r\n              description: parameter.description,\r\n              alternatives: parameter.alternatives.map(x => x.name),\r\n              defaultValue: parameter.defaultValue\r\n            });\r\n            break;\r\n          default:\r\n            throw new Error(`${RushConstants.commandLineFilename} defines a parameter \"${parameter!.longName}\"`\r\n              + ` using an unsupported parameter kind \"${parameter!.parameterKind}\"`);\r\n        }\r\n        if (customParameter) {\r\n          this.customParameters.push(customParameter);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}
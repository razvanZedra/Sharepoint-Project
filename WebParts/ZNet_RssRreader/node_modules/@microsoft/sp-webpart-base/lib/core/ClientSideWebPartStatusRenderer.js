'use strict';
import * as tslib_1 from "tslib";
import * as ReactDOM from 'react-dom';
import * as React from 'react';
import { sealed } from '@microsoft/decorators';
import { _LogSource, _TraceLogger } from '@microsoft/sp-diagnostics';
import { _PerformanceLogger } from '@ms/sp-telemetry';
import { _SPKillSwitch, Environment, Guid, SPError, Text, Validate } from '@microsoft/sp-core-library';
import PlaceholderSpinner from '../components/placeHolder/PlaceholderSpinner';
import strings from './loc/Strings.resx';
import ErrorMessage from './ErrorMessage';
import FriendlyErrorMessage from './FriendlyErrorMessage';
import ClassicPageUtils from './classicPages/ClassicPageUtils';
import SpinnerFactory from './SpinnerFactory';
var ClientSideWebPartStatusRenderer = (function () {
    function ClientSideWebPartStatusRenderer() {
        this._errorId = 'cswp-error';
        this._logSource = _LogSource.create('ClientSideWebPartStatusRenderer');
        this._activeIndicatorCache = new Map();
    }
    ClientSideWebPartStatusRenderer.prototype.displayLoadingIndicator = function (domElement, loadingMessage, timeout) {
        this._createLoadingIndicator(domElement, loadingMessage, timeout);
    };
    ClientSideWebPartStatusRenderer.prototype._displayLoadingIndicator = function (domElement, loadingMessage, performanceLogEventName, timeout) {
        this._createLoadingIndicator(domElement, loadingMessage, timeout, performanceLogEventName);
    };
    ClientSideWebPartStatusRenderer.prototype.clearLoadingIndicator = function (domElement) {
        Validate.isNotNullOrUndefined(domElement, 'domElement');
        if (this._activeIndicatorCache.has(domElement)) {
            var cacheEntry = this._getCacheEntry(domElement);
            _TraceLogger.logVerbose(this._logSource, strings.ClearLoadingIndicator);
            if (cacheEntry.loadingTimer) {
                window.clearTimeout(cacheEntry.loadingTimer);
            }
            if (cacheEntry.placeholder) {
                if (cacheEntry.placeholder instanceof PlaceholderSpinner) {
                    cacheEntry.placeholder.clearPlaceholder();
                    ReactDOM.unmountComponentAtNode(domElement);
                }
                else if (cacheEntry.placeholder instanceof HTMLDivElement) {
                    if (cacheEntry.placeholder.parentElement) {
                        cacheEntry.placeholder.parentElement.removeChild(cacheEntry.placeholder);
                    }
                }
            }
            this._activeIndicatorCache.delete(domElement);
        }
    };
    ClientSideWebPartStatusRenderer.prototype.renderError = function (domElement, error) {
        Validate.isNotNullOrUndefined(domElement, 'domElement');
        Validate.isNotNullOrUndefined(error, 'error');
        var errorText = '';
        if (error instanceof SPError) {
            errorText = error.toStringForUI();
        }
        else {
            var vanillaError = error;
            var stack = vanillaError.stack;
            var newLineSeparator = '\r\n';
            var callStack = stack ? Text.format(strings.WebpartErrorCallStackText, newLineSeparator, stack) : '';
            errorText = Text.format(strings.WebpartErrorErrorText, newLineSeparator, "" + (vanillaError.message || error), callStack);
        }
        var cacheEntry = this._getCacheEntry(domElement);
        cacheEntry.isErrorBeingRendered = true;
        var errorComponent;
        if (!DEBUG) {
            errorComponent = FriendlyErrorMessage;
        }
        else {
            errorComponent = ErrorMessage;
        }
        var divErr = domElement.querySelector("div[data-sp-id='" + this._errorId + "']");
        if (divErr) {
            divErr.style.display = 'block';
        }
        else {
            divErr = document.createElement('div');
            divErr.setAttribute('data-sp-id', this._errorId);
            this._clearChildren(domElement);
            domElement.appendChild(divErr);
            ClassicPageUtils.disableAutomaticPostbacks(domElement, Environment.type);
        }
        divErr.setAttribute('data-automation-id', 'webPartError');
        var el = React.createElement(errorComponent, { errorMessage: errorText });
        ReactDOM.render(el, divErr);
    };
    ClientSideWebPartStatusRenderer.prototype.clearError = function (domElement) {
        Validate.isNotNullOrUndefined(domElement, 'domElement');
        if (!this._activeIndicatorCache.has(domElement)) {
            return;
        }
        var cacheEntry = this._activeIndicatorCache.get(domElement);
        if (cacheEntry && cacheEntry.isErrorBeingRendered) {
            cacheEntry.isErrorBeingRendered = false;
            var divErr = domElement.querySelector("div[data-sp-id='" + this._errorId + "']");
            if (divErr) {
                divErr.style.display = 'none';
                divErr.removeAttribute('data-automation-id');
            }
        }
    };
    ClientSideWebPartStatusRenderer.prototype._createLoadingIndicator = function (domElement, loadingMessage, timeout, performanceLogEventName) {
        var _this = this;
        Validate.isNotNullOrUndefined(domElement, 'domElement');
        if (!timeout || (timeout && isNaN(timeout))) {
            timeout = 1500; 
        }
        var cacheEntry = this._getCacheEntry(domElement);
        if (cacheEntry.loadingTimer) {
            window.clearTimeout(cacheEntry.loadingTimer);
        }
        this._renderSpinner(domElement, loadingMessage, false);
        cacheEntry.loadingTimer = window.setTimeout(function () {
            if (performanceLogEventName) {
                _PerformanceLogger.markComponent(performanceLogEventName, 'displaySpinner');
            }
            _this._renderSpinner(domElement, loadingMessage, true);
        }, timeout);
    };
    ClientSideWebPartStatusRenderer.prototype._renderSpinner = function (domElement, loadingMessage, showSpinner) {
        if (!this._activeIndicatorCache.has(domElement)) {
            return;
        }
        var cacheEntry = this._getCacheEntry(domElement);
        if (cacheEntry.isErrorBeingRendered) {
            return;
        }
        _TraceLogger.logVerbose(this._logSource, strings.DisplayLoadingIndicator);
        if (!cacheEntry.placeholder) {
            cacheEntry.placeholder = this._createSpinnerElement(domElement, showSpinner, loadingMessage);
        }
        else {
            if (cacheEntry.placeholder instanceof PlaceholderSpinner) {
                cacheEntry.placeholder.showSpinner(showSpinner);
            }
            else if (cacheEntry.placeholder instanceof HTMLDivElement) {
                cacheEntry.placeholder.style.display = showSpinner ? 'block' : 'none';
            }
        }
    };
    ClientSideWebPartStatusRenderer.prototype._getCacheEntry = function (domElement) {
        if (this._activeIndicatorCache.has(domElement)) {
            return this._activeIndicatorCache.get(domElement);
        }
        var cacheEntry = {
            loadingTimer: undefined,
            placeholder: undefined,
            isErrorBeingRendered: false
        };
        this._activeIndicatorCache.set(domElement, cacheEntry);
        return cacheEntry;
    };
    ClientSideWebPartStatusRenderer.prototype._createSpinnerElement = function (domElement, showSpinner, loadingMessage) {
        if (!_SPKillSwitch.isActivated(Guid.parse('522343b3-9f76-4860-962a-b159b1d1c5c2'), '8/28/2018', 'FallbackToUsingReactSpinner')) {
            this.clearLoadingIndicator(domElement);
            var spinnerContainerDiv = SpinnerFactory.createSpinner(Text.format(strings.LoadingStatus, loadingMessage));
            spinnerContainerDiv.style.display = showSpinner ? 'block' : 'none';
            return domElement.appendChild(spinnerContainerDiv);
        }
        else {
            var el = React.createElement(PlaceholderSpinner, { hideSpinner: !showSpinner, label: Text.format(strings.LoadingStatus, loadingMessage) });
            return ReactDOM.render(el, domElement);
        }
    };
    ClientSideWebPartStatusRenderer.prototype._clearChildren = function (element) {
        while (element.hasChildNodes()) {
            if (element.lastChild) {
                element.removeChild(element.lastChild);
            }
        }
    };
    ClientSideWebPartStatusRenderer = tslib_1.__decorate([
        sealed
    ], ClientSideWebPartStatusRenderer);
    return ClientSideWebPartStatusRenderer;
}());
export default ClientSideWebPartStatusRenderer;

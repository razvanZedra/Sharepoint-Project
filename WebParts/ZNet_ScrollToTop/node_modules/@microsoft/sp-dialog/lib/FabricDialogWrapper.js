var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { DialogContent } from 'office-ui-fabric-react/lib/components/Dialog';
import { Modal } from 'office-ui-fabric-react/lib/components/Modal/Modal';
import { autobind } from '@microsoft/office-ui-fabric-react-bundle';
import PlaceholderSpinner from './placeHolder/PlaceholderSpinner';
import * as React from 'react';
import ContentDiv from './ContentDiv';
import { _getInternalDialogApi } from './DialogManager';
var FabricDialogWrapper = /** @class */ (function (_super) {
    __extends(FabricDialogWrapper, _super);
    function FabricDialogWrapper(props) {
        var _this = _super.call(this, props) || this;
        _this._onDismissed = _this._onDismissed.bind(_this);
        _this.state = {
            isOpen: false,
            isContentReady: false
        };
        return _this;
    }
    FabricDialogWrapper.prototype.render = function () {
        var dialogContent = !this.state.isContentReady
            ? React.createElement(DialogContent, {}, React.createElement(PlaceholderSpinner, { label: '' }))
            : false;
        if (this.state.dialog) {
            return (React.createElement(Modal, { isOpen: this.state.isOpen, isBlocking: this.state.dialog._configuration.isBlocking, onDismissed: this._onDismissed, onDismiss: this._closeCallback },
                React.createElement(ContentDiv, { innerElement: this._detachedElement }),
                dialogContent));
        }
        else {
            return React.createElement("div", null);
        }
    };
    /**
     * Starts the sequence of opening the modal and rendering the dialog content into it.
     * Returns a promise that resolves when the content is fully rendered.
     */
    FabricDialogWrapper.prototype.open = function (dialog) {
        var _this = this;
        this._openPromise = new Promise(function (res, rej) {
            _this._resolveOpenPromise = res;
        });
        dialog = dialog || this.state.dialog;
        this.setState({ dialog: dialog, isOpen: true, isContentReady: false });
        return this._openPromise;
    };
    FabricDialogWrapper.prototype.close = function () {
        var _this = this;
        this._closedPromise = new Promise(function (res, rej) {
            _this._resolveClosedPromise = res;
        });
        if (!this.state.isOpen) {
            this._resolveClosedPromise();
        }
        else {
            this.setState({ isOpen: false });
        }
        return this._closedPromise;
    };
    FabricDialogWrapper.prototype.UNSAFE_componentWillMount = function () {
        this._detachedElement = document.createElement('DIV');
    };
    FabricDialogWrapper.prototype.componentDidUpdate = function () {
        var _this = this;
        if (this.state.isOpen && this.state.dialog && this._detachedElement) {
            if (!this.state.isContentReady) {
                this._detachedElement.innerHTML = '';
                _getInternalDialogApi(this.state.dialog)._render(this._detachedElement).then(function () {
                    _this.setState({ isContentReady: true });
                });
            }
            else {
                this._resolveOpenPromise();
            }
        }
    };
    FabricDialogWrapper.prototype._onDismissed = function () {
        if (!this.state.isOpen && this._resolveClosedPromise) {
            this._resolveClosedPromise();
        }
    };
    FabricDialogWrapper.prototype._closeCallback = function () {
        if (this.props.closeCallback && this.state.dialog) {
            this.props.closeCallback(this.state.dialog);
        }
    };
    __decorate([
        autobind
    ], FabricDialogWrapper.prototype, "render", null);
    __decorate([
        autobind
    ], FabricDialogWrapper.prototype, "open", null);
    __decorate([
        autobind
    ], FabricDialogWrapper.prototype, "close", null);
    __decorate([
        autobind
    ], FabricDialogWrapper.prototype, "componentDidUpdate", null);
    __decorate([
        autobind
    ], FabricDialogWrapper.prototype, "_onDismissed", null);
    __decorate([
        autobind
    ], FabricDialogWrapper.prototype, "_closeCallback", null);
    return FabricDialogWrapper;
}(React.Component));
export default FabricDialogWrapper;
//# sourceMappingURL=FabricDialogWrapper.js.map
/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file Common web part placeholder component.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { sealed } from '@microsoft/decorators';
import * as React from 'react';
import { Overlay, Spinner, SpinnerType } from '@microsoft/office-ui-fabric-react-bundle';
import './Placeholder.scss';
/**
 * Component used to display place holder content in the web part display area.
 *
 * @internal
 */
var PlaceholderSpinner = /** @class */ (function (_super) {
    __extends(PlaceholderSpinner, _super);
    function PlaceholderSpinner(props) {
        var _this = _super.call(this, props) || this;
        _this.showSpinner = _this.showSpinner.bind(_this);
        _this.state = { showSpinner: !props.hideSpinner };
        return _this;
    }
    PlaceholderSpinner.prototype.componentDidMount = function () {
        this._isMounted = true;
    };
    /**
     * Render the place holder user experience.
     */
    PlaceholderSpinner.prototype.render = function () {
        if (this.state.removePlaceholder) {
            // Don't use undefined, react does not work
            return null; // tslint:disable-line
        }
        return (React.createElement(Overlay, { className: 'Placeholder-overlay' },
            React.createElement("div", { className: 'Placeholder-spinnerContainer' }, this.state.showSpinner && React.createElement(Spinner, { type: SpinnerType.large, label: this.props.label }))));
    };
    PlaceholderSpinner.prototype.componentWillUnmount = function () {
        this._isMounted = false;
    };
    PlaceholderSpinner.prototype.showSpinner = function (showSpinner) {
        if (this._isMounted) {
            this.setState({ showSpinner: showSpinner });
        }
    };
    /**
     * Get rid of the placeholder completely from the DOM tree
     */
    PlaceholderSpinner.prototype.clearPlaceholder = function () {
        if (this._isMounted) {
            this.setState({ removePlaceholder: true });
        }
    };
    PlaceholderSpinner = __decorate([
        sealed
    ], PlaceholderSpinner);
    return PlaceholderSpinner;
}(React.Component));
export default PlaceholderSpinner;
//# sourceMappingURL=PlaceholderSpinner.js.map